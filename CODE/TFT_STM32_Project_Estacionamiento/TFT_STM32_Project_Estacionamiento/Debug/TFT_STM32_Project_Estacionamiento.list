
TFT_STM32_Project_Estacionamiento.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007220  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003aca8  080073e4  080073e4  000083e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804208c  0804208c  00044048  2**0
                  CONTENTS
  4 .ARM          00000008  0804208c  0804208c  0004308c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08042094  08042094  00044048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08042094  08042094  00043094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08042098  08042098  00043098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  0804209c  00044000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000048  080420e4  00044048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080420e4  00044178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00044048  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106e5  00000000  00000000  00044078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000227a  00000000  00000000  0005475d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  000569d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00022819  00000000  00000000  00057958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001291e  00000000  00000000  0007a171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d39a5  00000000  00000000  0008ca8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00160434  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000c24  00000000  00000000  00160477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004254  00000000  00000000  0016109c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  001652f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000048 	.word	0x20000048
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080073cc 	.word	0x080073cc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000004c 	.word	0x2000004c
 8000200:	080073cc 	.word	0x080073cc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <delay>:
static void MX_TIM1_Init(void);
static void MX_UART5_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void delay (uint32_t time)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80004fc:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <delay+0x2c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2200      	movs	r2, #0
 8000502:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8000504:	bf00      	nop
 8000506:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <delay+0x2c>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	429a      	cmp	r2, r3
 8000510:	d8f9      	bhi.n	8000506 <delay+0x12>
}
 8000512:	bf00      	nop
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	20000064 	.word	0x20000064

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f004 fa9d 	bl	8004a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f83b 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f949 	bl	80007c8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000536:	f000 f8a3 	bl	8000680 <MX_TIM1_Init>
  MX_UART5_Init();
 800053a:	f000 f8f1 	bl	8000720 <MX_UART5_Init>
  MX_USART2_UART_Init();
 800053e:	f000 f919 	bl	8000774 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8000542:	4814      	ldr	r0, [pc, #80]	@ (8000594 <main+0x70>)
 8000544:	f005 fcb0 	bl	8005ea8 <HAL_TIM_Base_Start>
	ID=readID();
 8000548:	f002 fac0 	bl	8002acc <readID>
 800054c:	4603      	mov	r3, r0
 800054e:	461a      	mov	r2, r3
 8000550:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <main+0x74>)
 8000552:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100);
 8000554:	2064      	movs	r0, #100	@ 0x64
 8000556:	f004 faf9 	bl	8004b4c <HAL_Delay>
	tft_init(ID);
 800055a:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <main+0x74>)
 800055c:	881b      	ldrh	r3, [r3, #0]
 800055e:	4618      	mov	r0, r3
 8000560:	f001 ff14 	bl	800238c <tft_init>
	setRotation(1);
 8000564:	2001      	movs	r0, #1
 8000566:	f003 f95b 	bl	8003820 <setRotation>
	fillScreen(BLACK);
 800056a:	2000      	movs	r0, #0
 800056c:	f003 ff20 	bl	80043b0 <fillScreen>

	  HAL_UART_Receive_IT(&huart5,rx_data, 1);  // Empezar la recepción por UART1 en modo interrupción
 8000570:	2201      	movs	r2, #1
 8000572:	490a      	ldr	r1, [pc, #40]	@ (800059c <main+0x78>)
 8000574:	480a      	ldr	r0, [pc, #40]	@ (80005a0 <main+0x7c>)
 8000576:	f005 ffd9 	bl	800652c <HAL_UART_Receive_IT>
	drawRGBBitmapFast(0,0,Terminal,320,240);
 800057a:	23f0      	movs	r3, #240	@ 0xf0
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000582:	4a08      	ldr	r2, [pc, #32]	@ (80005a4 <main+0x80>)
 8000584:	2100      	movs	r1, #0
 8000586:	2000      	movs	r0, #0
 8000588:	f004 f9d6 	bl	8004938 <drawRGBBitmapFast>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(10); // Esperar 10ms
 800058c:	200a      	movs	r0, #10
 800058e:	f004 fadd 	bl	8004b4c <HAL_Delay>
 8000592:	e7fb      	b.n	800058c <main+0x68>
 8000594:	20000064 	.word	0x20000064
 8000598:	2000013c 	.word	0x2000013c
 800059c:	20000154 	.word	0x20000154
 80005a0:	200000ac 	.word	0x200000ac
 80005a4:	080073e8 	.word	0x080073e8

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	@ 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	2234      	movs	r2, #52	@ 0x34
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f006 fedc 	bl	8007374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b29      	ldr	r3, [pc, #164]	@ (8000678 <SystemClock_Config+0xd0>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	4a28      	ldr	r2, [pc, #160]	@ (8000678 <SystemClock_Config+0xd0>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	@ 0x40
 80005dc:	4b26      	ldr	r3, [pc, #152]	@ (8000678 <SystemClock_Config+0xd0>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	2300      	movs	r3, #0
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	4b23      	ldr	r3, [pc, #140]	@ (800067c <SystemClock_Config+0xd4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a22      	ldr	r2, [pc, #136]	@ (800067c <SystemClock_Config+0xd4>)
 80005f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b20      	ldr	r3, [pc, #128]	@ (800067c <SystemClock_Config+0xd4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	2310      	movs	r3, #16
 800060e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000614:	2300      	movs	r3, #0
 8000616:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000618:	2308      	movs	r3, #8
 800061a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 800061c:	23a0      	movs	r3, #160	@ 0xa0
 800061e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000624:	2302      	movs	r3, #2
 8000626:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000628:	2302      	movs	r3, #2
 800062a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 031c 	add.w	r3, r7, #28
 8000630:	4618      	mov	r0, r3
 8000632:	f005 f94b 	bl	80058cc <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800063c:	f000 fd2a 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2302      	movs	r3, #2
 8000646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000650:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000652:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000656:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2105      	movs	r1, #5
 800065e:	4618      	mov	r0, r3
 8000660:	f004 fdea 	bl	8005238 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800066a:	f000 fd13 	bl	8001094 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	@ 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800069c:	4b1e      	ldr	r3, [pc, #120]	@ (8000718 <MX_TIM1_Init+0x98>)
 800069e:	4a1f      	ldr	r2, [pc, #124]	@ (800071c <MX_TIM1_Init+0x9c>)
 80006a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80006a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <MX_TIM1_Init+0x98>)
 80006a4:	2247      	movs	r2, #71	@ 0x47
 80006a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000718 <MX_TIM1_Init+0x98>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <MX_TIM1_Init+0x98>)
 80006b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b6:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <MX_TIM1_Init+0x98>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006bc:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <MX_TIM1_Init+0x98>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c2:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <MX_TIM1_Init+0x98>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006c8:	4813      	ldr	r0, [pc, #76]	@ (8000718 <MX_TIM1_Init+0x98>)
 80006ca:	f005 fb9d 	bl	8005e08 <HAL_TIM_Base_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80006d4:	f000 fcde 	bl	8001094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	4619      	mov	r1, r3
 80006e4:	480c      	ldr	r0, [pc, #48]	@ (8000718 <MX_TIM1_Init+0x98>)
 80006e6:	f005 fc47 	bl	8005f78 <HAL_TIM_ConfigClockSource>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80006f0:	f000 fcd0 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f4:	2300      	movs	r3, #0
 80006f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	@ (8000718 <MX_TIM1_Init+0x98>)
 8000702:	f005 fe47 	bl	8006394 <HAL_TIMEx_MasterConfigSynchronization>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800070c:	f000 fcc2 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000064 	.word	0x20000064
 800071c:	40010000 	.word	0x40010000

08000720 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000724:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_UART5_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <MX_UART5_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <MX_UART5_Init+0x4c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_UART5_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_UART5_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_UART5_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_UART5_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <MX_UART5_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_UART5_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_UART5_Init+0x4c>)
 8000758:	f005 fe98 	bl	800648c <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 fc97 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000ac 	.word	0x200000ac
 8000770:	40005000 	.word	0x40005000

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000778:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 800077a:	4a12      	ldr	r2, [pc, #72]	@ (80007c4 <MX_USART2_UART_Init+0x50>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007ac:	f005 fe6e 	bl	800648c <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b6:	f000 fc6d 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000f4 	.word	0x200000f4
 80007c4:	40004400 	.word	0x40004400

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	@ 0x28
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b42      	ldr	r3, [pc, #264]	@ (80008ec <MX_GPIO_Init+0x124>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a41      	ldr	r2, [pc, #260]	@ (80008ec <MX_GPIO_Init+0x124>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b3f      	ldr	r3, [pc, #252]	@ (80008ec <MX_GPIO_Init+0x124>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b3b      	ldr	r3, [pc, #236]	@ (80008ec <MX_GPIO_Init+0x124>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a3a      	ldr	r2, [pc, #232]	@ (80008ec <MX_GPIO_Init+0x124>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b38      	ldr	r3, [pc, #224]	@ (80008ec <MX_GPIO_Init+0x124>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b34      	ldr	r3, [pc, #208]	@ (80008ec <MX_GPIO_Init+0x124>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a33      	ldr	r2, [pc, #204]	@ (80008ec <MX_GPIO_Init+0x124>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b31      	ldr	r3, [pc, #196]	@ (80008ec <MX_GPIO_Init+0x124>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b2d      	ldr	r3, [pc, #180]	@ (80008ec <MX_GPIO_Init+0x124>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a2c      	ldr	r2, [pc, #176]	@ (80008ec <MX_GPIO_Init+0x124>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b2a      	ldr	r3, [pc, #168]	@ (80008ec <MX_GPIO_Init+0x124>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b26      	ldr	r3, [pc, #152]	@ (80008ec <MX_GPIO_Init+0x124>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a25      	ldr	r2, [pc, #148]	@ (80008ec <MX_GPIO_Init+0x124>)
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b23      	ldr	r3, [pc, #140]	@ (80008ec <MX_GPIO_Init+0x124>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|D1_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2182      	movs	r1, #130	@ 0x82
 800086e:	4820      	ldr	r0, [pc, #128]	@ (80008f0 <MX_GPIO_Init+0x128>)
 8000870:	f004 fcc8 	bl	8005204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|D7_Pin
 8000874:	2200      	movs	r2, #0
 8000876:	f240 7113 	movw	r1, #1811	@ 0x713
 800087a:	481e      	ldr	r0, [pc, #120]	@ (80008f4 <MX_GPIO_Init+0x12c>)
 800087c:	f004 fcc2 	bl	8005204 <HAL_GPIO_WritePin>
                          |D0_Pin|D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|D6_Pin|D3_Pin|D5_Pin
 8000880:	2200      	movs	r2, #0
 8000882:	f240 4139 	movw	r1, #1081	@ 0x439
 8000886:	481c      	ldr	r0, [pc, #112]	@ (80008f8 <MX_GPIO_Init+0x130>)
 8000888:	f004 fcbc 	bl	8005204 <HAL_GPIO_WritePin>
                          |D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|D1_Pin;
 800088c:	2382      	movs	r3, #130	@ 0x82
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	4813      	ldr	r0, [pc, #76]	@ (80008f0 <MX_GPIO_Init+0x128>)
 80008a4:	f004 fb1a 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin D7_Pin
                           D0_Pin D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|D7_Pin
 80008a8:	f240 7313 	movw	r3, #1811	@ 0x713
 80008ac:	617b      	str	r3, [r7, #20]
                          |D0_Pin|D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	480c      	ldr	r0, [pc, #48]	@ (80008f4 <MX_GPIO_Init+0x12c>)
 80008c2:	f004 fb0b 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin D6_Pin D3_Pin D5_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|D6_Pin|D3_Pin|D5_Pin
 80008c6:	f240 4339 	movw	r3, #1081	@ 0x439
 80008ca:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	4806      	ldr	r0, [pc, #24]	@ (80008f8 <MX_GPIO_Init+0x130>)
 80008e0:	f004 fafc 	bl	8004edc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	@ 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020800 	.word	0x40020800
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020400 	.word	0x40020400

080008fc <State_Dis>:

/* USER CODE BEGIN 4 */
int State_Dis(int KLA) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af02      	add	r7, sp, #8
 8000902:	6078      	str	r0, [r7, #4]
    selectedArray_DIS = carArrays_Dis[KLA];
 8000904:	4a09      	ldr	r2, [pc, #36]	@ (800092c <State_Dis+0x30>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800090c:	4a08      	ldr	r2, [pc, #32]	@ (8000930 <State_Dis+0x34>)
 800090e:	6013      	str	r3, [r2, #0]
    drawRGBBitmapFast(254, 81, selectedArray_DIS, 48, 80);
 8000910:	4b07      	ldr	r3, [pc, #28]	@ (8000930 <State_Dis+0x34>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	2350      	movs	r3, #80	@ 0x50
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	2330      	movs	r3, #48	@ 0x30
 800091a:	2151      	movs	r1, #81	@ 0x51
 800091c:	20fe      	movs	r0, #254	@ 0xfe
 800091e:	f004 f80b 	bl	8004938 <drawRGBBitmapFast>

    return 0; // Retorna un valor (por ejemplo, 0 para indicar éxito)
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000014 	.word	0x20000014
 8000930:	2000014c 	.word	0x2000014c

08000934 <State_Cars>:


int State_Cars(int S){
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af02      	add	r7, sp, #8
 800093a:	6078      	str	r0, [r7, #4]
switch (S) {
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3b01      	subs	r3, #1
 8000940:	2b07      	cmp	r3, #7
 8000942:	f200 8356 	bhi.w	8000ff2 <State_Cars+0x6be>
 8000946:	a201      	add	r2, pc, #4	@ (adr r2, 800094c <State_Cars+0x18>)
 8000948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094c:	0800096d 	.word	0x0800096d
 8000950:	08000a39 	.word	0x08000a39
 8000954:	08000b05 	.word	0x08000b05
 8000958:	08000bf9 	.word	0x08000bf9
 800095c:	08000cc5 	.word	0x08000cc5
 8000960:	08000d91 	.word	0x08000d91
 8000964:	08000e85 	.word	0x08000e85
 8000968:	08000f4f 	.word	0x08000f4f
		case 1:
			 C1 = !C1;
 800096c:	4b98      	ldr	r3, [pc, #608]	@ (8000bd0 <State_Cars+0x29c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	bf14      	ite	ne
 8000974:	2301      	movne	r3, #1
 8000976:	2300      	moveq	r3, #0
 8000978:	b2db      	uxtb	r3, r3
 800097a:	f083 0301 	eor.w	r3, r3, #1
 800097e:	b2db      	uxtb	r3, r3
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4b92      	ldr	r3, [pc, #584]	@ (8000bd0 <State_Cars+0x29c>)
 8000988:	701a      	strb	r2, [r3, #0]

			 if(C1 == 1){
 800098a:	4b91      	ldr	r3, [pc, #580]	@ (8000bd0 <State_Cars+0x29c>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d02e      	beq.n	80009f0 <State_Cars+0xbc>
				 KLE = (KLE < 3) ? (KLE + 1) : 0;
 8000992:	4b90      	ldr	r3, [pc, #576]	@ (8000bd4 <State_Cars+0x2a0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b02      	cmp	r3, #2
 8000998:	dc03      	bgt.n	80009a2 <State_Cars+0x6e>
 800099a:	4b8e      	ldr	r3, [pc, #568]	@ (8000bd4 <State_Cars+0x2a0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	3301      	adds	r3, #1
 80009a0:	e000      	b.n	80009a4 <State_Cars+0x70>
 80009a2:	2300      	movs	r3, #0
 80009a4:	4a8b      	ldr	r2, [pc, #556]	@ (8000bd4 <State_Cars+0x2a0>)
 80009a6:	6013      	str	r3, [r2, #0]
				selectedArray = carArrays[KLE]; // Selecciona el arreglo
 80009a8:	4b8a      	ldr	r3, [pc, #552]	@ (8000bd4 <State_Cars+0x2a0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a8a      	ldr	r2, [pc, #552]	@ (8000bd8 <State_Cars+0x2a4>)
 80009ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b2:	4a8a      	ldr	r2, [pc, #552]	@ (8000bdc <State_Cars+0x2a8>)
 80009b4:	6013      	str	r3, [r2, #0]
				// Llama a la función con el arreglo seleccionado
				drawRGBBitmapFast(14, 15, selectedArray,30, 50);
 80009b6:	4b89      	ldr	r3, [pc, #548]	@ (8000bdc <State_Cars+0x2a8>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	2332      	movs	r3, #50	@ 0x32
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	231e      	movs	r3, #30
 80009c0:	210f      	movs	r1, #15
 80009c2:	200e      	movs	r0, #14
 80009c4:	f003 ffb8 	bl	8004938 <drawRGBBitmapFast>
				drawRGBBitmapFast(12,95,mySem_RED,33,13);
 80009c8:	230d      	movs	r3, #13
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2321      	movs	r3, #33	@ 0x21
 80009ce:	4a84      	ldr	r2, [pc, #528]	@ (8000be0 <State_Cars+0x2ac>)
 80009d0:	215f      	movs	r1, #95	@ 0x5f
 80009d2:	200c      	movs	r0, #12
 80009d4:	f003 ffb0 	bl	8004938 <drawRGBBitmapFast>
				Number_Display = Number_Display - 1;
 80009d8:	4b82      	ldr	r3, [pc, #520]	@ (8000be4 <State_Cars+0x2b0>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	3b01      	subs	r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b80      	ldr	r3, [pc, #512]	@ (8000be4 <State_Cars+0x2b0>)
 80009e2:	701a      	strb	r2, [r3, #0]
				State_Dis(Number_Display);// imprimir en display
 80009e4:	4b7f      	ldr	r3, [pc, #508]	@ (8000be4 <State_Cars+0x2b0>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff87 	bl	80008fc <State_Dis>
				 drawRGBBitmapFast(12,95,mySem_RED,33,13);
				 Number_Display = Number_Display + 1;
				 State_Dis(Number_Display);// imprimir en display

			 }
			break;
 80009ee:	e302      	b.n	8000ff6 <State_Cars+0x6c2>
			 else if(C1 == 0){
 80009f0:	4b77      	ldr	r3, [pc, #476]	@ (8000bd0 <State_Cars+0x29c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	f083 0301 	eor.w	r3, r3, #1
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 82fb 	beq.w	8000ff6 <State_Cars+0x6c2>
				 drawRGBBitmapFast(14, 15, CAR_NAC, 30, 50);
 8000a00:	2332      	movs	r3, #50	@ 0x32
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	231e      	movs	r3, #30
 8000a06:	4a78      	ldr	r2, [pc, #480]	@ (8000be8 <State_Cars+0x2b4>)
 8000a08:	210f      	movs	r1, #15
 8000a0a:	200e      	movs	r0, #14
 8000a0c:	f003 ff94 	bl	8004938 <drawRGBBitmapFast>
				 drawRGBBitmapFast(12,95,mySem_RED,33,13);
 8000a10:	230d      	movs	r3, #13
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	2321      	movs	r3, #33	@ 0x21
 8000a16:	4a72      	ldr	r2, [pc, #456]	@ (8000be0 <State_Cars+0x2ac>)
 8000a18:	215f      	movs	r1, #95	@ 0x5f
 8000a1a:	200c      	movs	r0, #12
 8000a1c:	f003 ff8c 	bl	8004938 <drawRGBBitmapFast>
				 Number_Display = Number_Display + 1;
 8000a20:	4b70      	ldr	r3, [pc, #448]	@ (8000be4 <State_Cars+0x2b0>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	4b6e      	ldr	r3, [pc, #440]	@ (8000be4 <State_Cars+0x2b0>)
 8000a2a:	701a      	strb	r2, [r3, #0]
				 State_Dis(Number_Display);// imprimir en display
 8000a2c:	4b6d      	ldr	r3, [pc, #436]	@ (8000be4 <State_Cars+0x2b0>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff63 	bl	80008fc <State_Dis>
			break;
 8000a36:	e2de      	b.n	8000ff6 <State_Cars+0x6c2>
		case 2:
			 C2 = !C2;
 8000a38:	4b6c      	ldr	r3, [pc, #432]	@ (8000bec <State_Cars+0x2b8>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	bf14      	ite	ne
 8000a40:	2301      	movne	r3, #1
 8000a42:	2300      	moveq	r3, #0
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	f083 0301 	eor.w	r3, r3, #1
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4b66      	ldr	r3, [pc, #408]	@ (8000bec <State_Cars+0x2b8>)
 8000a54:	701a      	strb	r2, [r3, #0]

			 if(C2 == 1){
 8000a56:	4b65      	ldr	r3, [pc, #404]	@ (8000bec <State_Cars+0x2b8>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d02e      	beq.n	8000abc <State_Cars+0x188>
				 KLE = (KLE < 3) ? (KLE + 1) : 0;
 8000a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8000bd4 <State_Cars+0x2a0>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	dc03      	bgt.n	8000a6e <State_Cars+0x13a>
 8000a66:	4b5b      	ldr	r3, [pc, #364]	@ (8000bd4 <State_Cars+0x2a0>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	e000      	b.n	8000a70 <State_Cars+0x13c>
 8000a6e:	2300      	movs	r3, #0
 8000a70:	4a58      	ldr	r2, [pc, #352]	@ (8000bd4 <State_Cars+0x2a0>)
 8000a72:	6013      	str	r3, [r2, #0]
				selectedArray = carArrays[KLE]; // Selecciona el arreglo
 8000a74:	4b57      	ldr	r3, [pc, #348]	@ (8000bd4 <State_Cars+0x2a0>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a57      	ldr	r2, [pc, #348]	@ (8000bd8 <State_Cars+0x2a4>)
 8000a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7e:	4a57      	ldr	r2, [pc, #348]	@ (8000bdc <State_Cars+0x2a8>)
 8000a80:	6013      	str	r3, [r2, #0]
				// Llama a la función con el arreglo seleccionado
				drawRGBBitmapFast(73, 15, selectedArray, 30, 50);
 8000a82:	4b56      	ldr	r3, [pc, #344]	@ (8000bdc <State_Cars+0x2a8>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	2332      	movs	r3, #50	@ 0x32
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	231e      	movs	r3, #30
 8000a8c:	210f      	movs	r1, #15
 8000a8e:	2049      	movs	r0, #73	@ 0x49
 8000a90:	f003 ff52 	bl	8004938 <drawRGBBitmapFast>
				drawRGBBitmapFast(71,95,mySem_GREEN,33,13);
 8000a94:	230d      	movs	r3, #13
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2321      	movs	r3, #33	@ 0x21
 8000a9a:	4a55      	ldr	r2, [pc, #340]	@ (8000bf0 <State_Cars+0x2bc>)
 8000a9c:	215f      	movs	r1, #95	@ 0x5f
 8000a9e:	2047      	movs	r0, #71	@ 0x47
 8000aa0:	f003 ff4a 	bl	8004938 <drawRGBBitmapFast>
				Number_Display = Number_Display - 1;
 8000aa4:	4b4f      	ldr	r3, [pc, #316]	@ (8000be4 <State_Cars+0x2b0>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4b4d      	ldr	r3, [pc, #308]	@ (8000be4 <State_Cars+0x2b0>)
 8000aae:	701a      	strb	r2, [r3, #0]
				State_Dis(Number_Display);// imprimir en display
 8000ab0:	4b4c      	ldr	r3, [pc, #304]	@ (8000be4 <State_Cars+0x2b0>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff21 	bl	80008fc <State_Dis>
				 drawRGBBitmapFast(71,95,mySem_RED,33,13);
				 Number_Display = Number_Display + 1;
				 State_Dis(Number_Display);// imprimir en display

			 }
			break;
 8000aba:	e29e      	b.n	8000ffa <State_Cars+0x6c6>
			 else if(C2 == 0){
 8000abc:	4b4b      	ldr	r3, [pc, #300]	@ (8000bec <State_Cars+0x2b8>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	f083 0301 	eor.w	r3, r3, #1
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f000 8297 	beq.w	8000ffa <State_Cars+0x6c6>
				 drawRGBBitmapFast(73, 15, CAR_NAC, 30, 50);
 8000acc:	2332      	movs	r3, #50	@ 0x32
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	231e      	movs	r3, #30
 8000ad2:	4a45      	ldr	r2, [pc, #276]	@ (8000be8 <State_Cars+0x2b4>)
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	2049      	movs	r0, #73	@ 0x49
 8000ad8:	f003 ff2e 	bl	8004938 <drawRGBBitmapFast>
				 drawRGBBitmapFast(71,95,mySem_RED,33,13);
 8000adc:	230d      	movs	r3, #13
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2321      	movs	r3, #33	@ 0x21
 8000ae2:	4a3f      	ldr	r2, [pc, #252]	@ (8000be0 <State_Cars+0x2ac>)
 8000ae4:	215f      	movs	r1, #95	@ 0x5f
 8000ae6:	2047      	movs	r0, #71	@ 0x47
 8000ae8:	f003 ff26 	bl	8004938 <drawRGBBitmapFast>
				 Number_Display = Number_Display + 1;
 8000aec:	4b3d      	ldr	r3, [pc, #244]	@ (8000be4 <State_Cars+0x2b0>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	3301      	adds	r3, #1
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b3b      	ldr	r3, [pc, #236]	@ (8000be4 <State_Cars+0x2b0>)
 8000af6:	701a      	strb	r2, [r3, #0]
				 State_Dis(Number_Display);// imprimir en display
 8000af8:	4b3a      	ldr	r3, [pc, #232]	@ (8000be4 <State_Cars+0x2b0>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fefd 	bl	80008fc <State_Dis>
			break;
 8000b02:	e27a      	b.n	8000ffa <State_Cars+0x6c6>
		case 3:
			 C3 = !C3;
 8000b04:	4b3b      	ldr	r3, [pc, #236]	@ (8000bf4 <State_Cars+0x2c0>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	bf14      	ite	ne
 8000b0c:	2301      	movne	r3, #1
 8000b0e:	2300      	moveq	r3, #0
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	f083 0301 	eor.w	r3, r3, #1
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b35      	ldr	r3, [pc, #212]	@ (8000bf4 <State_Cars+0x2c0>)
 8000b20:	701a      	strb	r2, [r3, #0]

			 if(C3 == 1){
 8000b22:	4b34      	ldr	r3, [pc, #208]	@ (8000bf4 <State_Cars+0x2c0>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d02e      	beq.n	8000b88 <State_Cars+0x254>
				 KLE = (KLE == 0) ? (KLE - 1) : 3;
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd4 <State_Cars+0x2a0>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d103      	bne.n	8000b3a <State_Cars+0x206>
 8000b32:	4b28      	ldr	r3, [pc, #160]	@ (8000bd4 <State_Cars+0x2a0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	e000      	b.n	8000b3c <State_Cars+0x208>
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	4a25      	ldr	r2, [pc, #148]	@ (8000bd4 <State_Cars+0x2a0>)
 8000b3e:	6013      	str	r3, [r2, #0]
				selectedArray = carArrays[KLE]; // Selecciona el arreglo
 8000b40:	4b24      	ldr	r3, [pc, #144]	@ (8000bd4 <State_Cars+0x2a0>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a24      	ldr	r2, [pc, #144]	@ (8000bd8 <State_Cars+0x2a4>)
 8000b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4a:	4a24      	ldr	r2, [pc, #144]	@ (8000bdc <State_Cars+0x2a8>)
 8000b4c:	6013      	str	r3, [r2, #0]
				// Llama a la función con el arreglo seleccionado
				drawRGBBitmapFast(132, 15, selectedArray, 30, 50);
 8000b4e:	4b23      	ldr	r3, [pc, #140]	@ (8000bdc <State_Cars+0x2a8>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	2332      	movs	r3, #50	@ 0x32
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	231e      	movs	r3, #30
 8000b58:	210f      	movs	r1, #15
 8000b5a:	2084      	movs	r0, #132	@ 0x84
 8000b5c:	f003 feec 	bl	8004938 <drawRGBBitmapFast>
				drawRGBBitmapFast(130,95,mySem_GREEN,33,13);
 8000b60:	230d      	movs	r3, #13
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	2321      	movs	r3, #33	@ 0x21
 8000b66:	4a22      	ldr	r2, [pc, #136]	@ (8000bf0 <State_Cars+0x2bc>)
 8000b68:	215f      	movs	r1, #95	@ 0x5f
 8000b6a:	2082      	movs	r0, #130	@ 0x82
 8000b6c:	f003 fee4 	bl	8004938 <drawRGBBitmapFast>
				Number_Display = Number_Display - 1;
 8000b70:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <State_Cars+0x2b0>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	3b01      	subs	r3, #1
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <State_Cars+0x2b0>)
 8000b7a:	701a      	strb	r2, [r3, #0]
				State_Dis(Number_Display);// imprimir en display
 8000b7c:	4b19      	ldr	r3, [pc, #100]	@ (8000be4 <State_Cars+0x2b0>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff febb 	bl	80008fc <State_Dis>
				 drawRGBBitmapFast(132, 15, CAR_NAC, 30, 50);
				 drawRGBBitmapFast(130,95,mySem_RED,33,13);
				 Number_Display = Number_Display + 1;
				 State_Dis(Number_Display);// imprimir en display
			 }
			break;
 8000b86:	e23a      	b.n	8000ffe <State_Cars+0x6ca>
			 else if(C3 == 0){
 8000b88:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <State_Cars+0x2c0>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	f083 0301 	eor.w	r3, r3, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 8233 	beq.w	8000ffe <State_Cars+0x6ca>
				 drawRGBBitmapFast(132, 15, CAR_NAC, 30, 50);
 8000b98:	2332      	movs	r3, #50	@ 0x32
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	231e      	movs	r3, #30
 8000b9e:	4a12      	ldr	r2, [pc, #72]	@ (8000be8 <State_Cars+0x2b4>)
 8000ba0:	210f      	movs	r1, #15
 8000ba2:	2084      	movs	r0, #132	@ 0x84
 8000ba4:	f003 fec8 	bl	8004938 <drawRGBBitmapFast>
				 drawRGBBitmapFast(130,95,mySem_RED,33,13);
 8000ba8:	230d      	movs	r3, #13
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	2321      	movs	r3, #33	@ 0x21
 8000bae:	4a0c      	ldr	r2, [pc, #48]	@ (8000be0 <State_Cars+0x2ac>)
 8000bb0:	215f      	movs	r1, #95	@ 0x5f
 8000bb2:	2082      	movs	r0, #130	@ 0x82
 8000bb4:	f003 fec0 	bl	8004938 <drawRGBBitmapFast>
				 Number_Display = Number_Display + 1;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000be4 <State_Cars+0x2b0>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <State_Cars+0x2b0>)
 8000bc2:	701a      	strb	r2, [r3, #0]
				 State_Dis(Number_Display);// imprimir en display
 8000bc4:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <State_Cars+0x2b0>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fe97 	bl	80008fc <State_Dis>
			break;
 8000bce:	e216      	b.n	8000ffe <State_Cars+0x6ca>
 8000bd0:	2000013f 	.word	0x2000013f
 8000bd4:	20000150 	.word	0x20000150
 8000bd8:	20000004 	.word	0x20000004
 8000bdc:	20000148 	.word	0x20000148
 8000be0:	0802cf44 	.word	0x0802cf44
 8000be4:	20000000 	.word	0x20000000
 8000be8:	08040f80 	.word	0x08040f80
 8000bec:	20000140 	.word	0x20000140
 8000bf0:	0802cbe8 	.word	0x0802cbe8
 8000bf4:	20000141 	.word	0x20000141
		case 4:
			 C4 = !C4;
 8000bf8:	4b98      	ldr	r3, [pc, #608]	@ (8000e5c <State_Cars+0x528>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bf14      	ite	ne
 8000c00:	2301      	movne	r3, #1
 8000c02:	2300      	moveq	r3, #0
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	f083 0301 	eor.w	r3, r3, #1
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b92      	ldr	r3, [pc, #584]	@ (8000e5c <State_Cars+0x528>)
 8000c14:	701a      	strb	r2, [r3, #0]

			 if(C4 == 1){
 8000c16:	4b91      	ldr	r3, [pc, #580]	@ (8000e5c <State_Cars+0x528>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d02e      	beq.n	8000c7c <State_Cars+0x348>
				 KLE = (KLE < 3) ? (KLE + 1) : 0;
 8000c1e:	4b90      	ldr	r3, [pc, #576]	@ (8000e60 <State_Cars+0x52c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	dc03      	bgt.n	8000c2e <State_Cars+0x2fa>
 8000c26:	4b8e      	ldr	r3, [pc, #568]	@ (8000e60 <State_Cars+0x52c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	e000      	b.n	8000c30 <State_Cars+0x2fc>
 8000c2e:	2300      	movs	r3, #0
 8000c30:	4a8b      	ldr	r2, [pc, #556]	@ (8000e60 <State_Cars+0x52c>)
 8000c32:	6013      	str	r3, [r2, #0]
				selectedArray = carArrays[KLE]; // Selecciona el arreglo
 8000c34:	4b8a      	ldr	r3, [pc, #552]	@ (8000e60 <State_Cars+0x52c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a8a      	ldr	r2, [pc, #552]	@ (8000e64 <State_Cars+0x530>)
 8000c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3e:	4a8a      	ldr	r2, [pc, #552]	@ (8000e68 <State_Cars+0x534>)
 8000c40:	6013      	str	r3, [r2, #0]
				// Llama a la función con el arreglo seleccionado
				drawRGBBitmapFast(191, 15, selectedArray, 30, 50);
 8000c42:	4b89      	ldr	r3, [pc, #548]	@ (8000e68 <State_Cars+0x534>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	2332      	movs	r3, #50	@ 0x32
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	231e      	movs	r3, #30
 8000c4c:	210f      	movs	r1, #15
 8000c4e:	20bf      	movs	r0, #191	@ 0xbf
 8000c50:	f003 fe72 	bl	8004938 <drawRGBBitmapFast>
				drawRGBBitmapFast(189, 95,mySem_GREEN,33,13);
 8000c54:	230d      	movs	r3, #13
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	2321      	movs	r3, #33	@ 0x21
 8000c5a:	4a84      	ldr	r2, [pc, #528]	@ (8000e6c <State_Cars+0x538>)
 8000c5c:	215f      	movs	r1, #95	@ 0x5f
 8000c5e:	20bd      	movs	r0, #189	@ 0xbd
 8000c60:	f003 fe6a 	bl	8004938 <drawRGBBitmapFast>
				Number_Display = Number_Display - 1;
 8000c64:	4b82      	ldr	r3, [pc, #520]	@ (8000e70 <State_Cars+0x53c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b80      	ldr	r3, [pc, #512]	@ (8000e70 <State_Cars+0x53c>)
 8000c6e:	701a      	strb	r2, [r3, #0]
				State_Dis(Number_Display);// imprimir en display
 8000c70:	4b7f      	ldr	r3, [pc, #508]	@ (8000e70 <State_Cars+0x53c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fe41 	bl	80008fc <State_Dis>
				 drawRGBBitmapFast(191, 15, CAR_NAC, 30, 50);
				 drawRGBBitmapFast(189,95,mySem_RED,33,13);
				 Number_Display = Number_Display + 1;
				 State_Dis(Number_Display);// imprimir en display
			 }
			break;
 8000c7a:	e1c2      	b.n	8001002 <State_Cars+0x6ce>
			 else if(C4 == 0){
 8000c7c:	4b77      	ldr	r3, [pc, #476]	@ (8000e5c <State_Cars+0x528>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	f083 0301 	eor.w	r3, r3, #1
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 81bb 	beq.w	8001002 <State_Cars+0x6ce>
				 drawRGBBitmapFast(191, 15, CAR_NAC, 30, 50);
 8000c8c:	2332      	movs	r3, #50	@ 0x32
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	231e      	movs	r3, #30
 8000c92:	4a78      	ldr	r2, [pc, #480]	@ (8000e74 <State_Cars+0x540>)
 8000c94:	210f      	movs	r1, #15
 8000c96:	20bf      	movs	r0, #191	@ 0xbf
 8000c98:	f003 fe4e 	bl	8004938 <drawRGBBitmapFast>
				 drawRGBBitmapFast(189,95,mySem_RED,33,13);
 8000c9c:	230d      	movs	r3, #13
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	2321      	movs	r3, #33	@ 0x21
 8000ca2:	4a75      	ldr	r2, [pc, #468]	@ (8000e78 <State_Cars+0x544>)
 8000ca4:	215f      	movs	r1, #95	@ 0x5f
 8000ca6:	20bd      	movs	r0, #189	@ 0xbd
 8000ca8:	f003 fe46 	bl	8004938 <drawRGBBitmapFast>
				 Number_Display = Number_Display + 1;
 8000cac:	4b70      	ldr	r3, [pc, #448]	@ (8000e70 <State_Cars+0x53c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	4b6e      	ldr	r3, [pc, #440]	@ (8000e70 <State_Cars+0x53c>)
 8000cb6:	701a      	strb	r2, [r3, #0]
				 State_Dis(Number_Display);// imprimir en display
 8000cb8:	4b6d      	ldr	r3, [pc, #436]	@ (8000e70 <State_Cars+0x53c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fe1d 	bl	80008fc <State_Dis>
			break;
 8000cc2:	e19e      	b.n	8001002 <State_Cars+0x6ce>


		case 5:
			 C5 = !C5;
 8000cc4:	4b6d      	ldr	r3, [pc, #436]	@ (8000e7c <State_Cars+0x548>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	bf14      	ite	ne
 8000ccc:	2301      	movne	r3, #1
 8000cce:	2300      	moveq	r3, #0
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	f083 0301 	eor.w	r3, r3, #1
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4b67      	ldr	r3, [pc, #412]	@ (8000e7c <State_Cars+0x548>)
 8000ce0:	701a      	strb	r2, [r3, #0]

			 if(C5 == 1){
 8000ce2:	4b66      	ldr	r3, [pc, #408]	@ (8000e7c <State_Cars+0x548>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d02e      	beq.n	8000d48 <State_Cars+0x414>
				 KLE = (KLE < 3) ? (KLE + 1) : 0;
 8000cea:	4b5d      	ldr	r3, [pc, #372]	@ (8000e60 <State_Cars+0x52c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	dc03      	bgt.n	8000cfa <State_Cars+0x3c6>
 8000cf2:	4b5b      	ldr	r3, [pc, #364]	@ (8000e60 <State_Cars+0x52c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	e000      	b.n	8000cfc <State_Cars+0x3c8>
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	4a58      	ldr	r2, [pc, #352]	@ (8000e60 <State_Cars+0x52c>)
 8000cfe:	6013      	str	r3, [r2, #0]
				selectedArray = carArrays[KLE]; // Selecciona el arreglo
 8000d00:	4b57      	ldr	r3, [pc, #348]	@ (8000e60 <State_Cars+0x52c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a57      	ldr	r2, [pc, #348]	@ (8000e64 <State_Cars+0x530>)
 8000d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0a:	4a57      	ldr	r2, [pc, #348]	@ (8000e68 <State_Cars+0x534>)
 8000d0c:	6013      	str	r3, [r2, #0]
				// Llama a la función con el arreglo seleccionado
				drawRGBBitmapFast(14, 176, selectedArray, 30, 50);
 8000d0e:	4b56      	ldr	r3, [pc, #344]	@ (8000e68 <State_Cars+0x534>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	2332      	movs	r3, #50	@ 0x32
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	231e      	movs	r3, #30
 8000d18:	21b0      	movs	r1, #176	@ 0xb0
 8000d1a:	200e      	movs	r0, #14
 8000d1c:	f003 fe0c 	bl	8004938 <drawRGBBitmapFast>
				drawRGBBitmapFast(12,134,mySem_GREEN,33,13);
 8000d20:	230d      	movs	r3, #13
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2321      	movs	r3, #33	@ 0x21
 8000d26:	4a51      	ldr	r2, [pc, #324]	@ (8000e6c <State_Cars+0x538>)
 8000d28:	2186      	movs	r1, #134	@ 0x86
 8000d2a:	200c      	movs	r0, #12
 8000d2c:	f003 fe04 	bl	8004938 <drawRGBBitmapFast>
				Number_Display = Number_Display - 1;
 8000d30:	4b4f      	ldr	r3, [pc, #316]	@ (8000e70 <State_Cars+0x53c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	4b4d      	ldr	r3, [pc, #308]	@ (8000e70 <State_Cars+0x53c>)
 8000d3a:	701a      	strb	r2, [r3, #0]
				State_Dis(Number_Display);// imprimir en display
 8000d3c:	4b4c      	ldr	r3, [pc, #304]	@ (8000e70 <State_Cars+0x53c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fddb 	bl	80008fc <State_Dis>
				 drawRGBBitmapFast(14, 176, CAR_NAC, 30, 50);
				 drawRGBBitmapFast(12,134,mySem_RED,33,13);
				 Number_Display = Number_Display + 1;
				 State_Dis(Number_Display);// imprimir en display
			 }
			 break;
 8000d46:	e15e      	b.n	8001006 <State_Cars+0x6d2>
			 else if(C5 == 0){
 8000d48:	4b4c      	ldr	r3, [pc, #304]	@ (8000e7c <State_Cars+0x548>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	f083 0301 	eor.w	r3, r3, #1
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f000 8157 	beq.w	8001006 <State_Cars+0x6d2>
				 drawRGBBitmapFast(14, 176, CAR_NAC, 30, 50);
 8000d58:	2332      	movs	r3, #50	@ 0x32
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	231e      	movs	r3, #30
 8000d5e:	4a45      	ldr	r2, [pc, #276]	@ (8000e74 <State_Cars+0x540>)
 8000d60:	21b0      	movs	r1, #176	@ 0xb0
 8000d62:	200e      	movs	r0, #14
 8000d64:	f003 fde8 	bl	8004938 <drawRGBBitmapFast>
				 drawRGBBitmapFast(12,134,mySem_RED,33,13);
 8000d68:	230d      	movs	r3, #13
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	2321      	movs	r3, #33	@ 0x21
 8000d6e:	4a42      	ldr	r2, [pc, #264]	@ (8000e78 <State_Cars+0x544>)
 8000d70:	2186      	movs	r1, #134	@ 0x86
 8000d72:	200c      	movs	r0, #12
 8000d74:	f003 fde0 	bl	8004938 <drawRGBBitmapFast>
				 Number_Display = Number_Display + 1;
 8000d78:	4b3d      	ldr	r3, [pc, #244]	@ (8000e70 <State_Cars+0x53c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b3b      	ldr	r3, [pc, #236]	@ (8000e70 <State_Cars+0x53c>)
 8000d82:	701a      	strb	r2, [r3, #0]
				 State_Dis(Number_Display);// imprimir en display
 8000d84:	4b3a      	ldr	r3, [pc, #232]	@ (8000e70 <State_Cars+0x53c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fdb7 	bl	80008fc <State_Dis>
			 break;
 8000d8e:	e13a      	b.n	8001006 <State_Cars+0x6d2>
		case 6:
			 C6 = !C6;
 8000d90:	4b3b      	ldr	r3, [pc, #236]	@ (8000e80 <State_Cars+0x54c>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	bf14      	ite	ne
 8000d98:	2301      	movne	r3, #1
 8000d9a:	2300      	moveq	r3, #0
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	f083 0301 	eor.w	r3, r3, #1
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4b35      	ldr	r3, [pc, #212]	@ (8000e80 <State_Cars+0x54c>)
 8000dac:	701a      	strb	r2, [r3, #0]

			 if(C6 == 1){
 8000dae:	4b34      	ldr	r3, [pc, #208]	@ (8000e80 <State_Cars+0x54c>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d02e      	beq.n	8000e14 <State_Cars+0x4e0>
				 KLE = (KLE < 3) ? (KLE + 1) : 0;
 8000db6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e60 <State_Cars+0x52c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	dc03      	bgt.n	8000dc6 <State_Cars+0x492>
 8000dbe:	4b28      	ldr	r3, [pc, #160]	@ (8000e60 <State_Cars+0x52c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	e000      	b.n	8000dc8 <State_Cars+0x494>
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	4a25      	ldr	r2, [pc, #148]	@ (8000e60 <State_Cars+0x52c>)
 8000dca:	6013      	str	r3, [r2, #0]
				selectedArray = carArrays[KLE]; // Selecciona el arreglo
 8000dcc:	4b24      	ldr	r3, [pc, #144]	@ (8000e60 <State_Cars+0x52c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a24      	ldr	r2, [pc, #144]	@ (8000e64 <State_Cars+0x530>)
 8000dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd6:	4a24      	ldr	r2, [pc, #144]	@ (8000e68 <State_Cars+0x534>)
 8000dd8:	6013      	str	r3, [r2, #0]
				// Llama a la función con el arreglo seleccionado
				drawRGBBitmapFast(73, 176, selectedArray, 30, 50);
 8000dda:	4b23      	ldr	r3, [pc, #140]	@ (8000e68 <State_Cars+0x534>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	2332      	movs	r3, #50	@ 0x32
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	231e      	movs	r3, #30
 8000de4:	21b0      	movs	r1, #176	@ 0xb0
 8000de6:	2049      	movs	r0, #73	@ 0x49
 8000de8:	f003 fda6 	bl	8004938 <drawRGBBitmapFast>
				drawRGBBitmapFast(71,134,mySem_GREEN,33,13);
 8000dec:	230d      	movs	r3, #13
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2321      	movs	r3, #33	@ 0x21
 8000df2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e6c <State_Cars+0x538>)
 8000df4:	2186      	movs	r1, #134	@ 0x86
 8000df6:	2047      	movs	r0, #71	@ 0x47
 8000df8:	f003 fd9e 	bl	8004938 <drawRGBBitmapFast>
				Number_Display = Number_Display - 1;
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <State_Cars+0x53c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	3b01      	subs	r3, #1
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	4b1a      	ldr	r3, [pc, #104]	@ (8000e70 <State_Cars+0x53c>)
 8000e06:	701a      	strb	r2, [r3, #0]
				State_Dis(Number_Display);// imprimir en display
 8000e08:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <State_Cars+0x53c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fd75 	bl	80008fc <State_Dis>
				 drawRGBBitmapFast(73, 176, CAR_NAC, 30, 50);
				 drawRGBBitmapFast(71,134,mySem_RED,33,13);
				 Number_Display = Number_Display + 1;
				 State_Dis(Number_Display);// imprimir en display
			 }
			 break;
 8000e12:	e0fa      	b.n	800100a <State_Cars+0x6d6>
			 else if(C6 == 0){
 8000e14:	4b1a      	ldr	r3, [pc, #104]	@ (8000e80 <State_Cars+0x54c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	f083 0301 	eor.w	r3, r3, #1
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 80f3 	beq.w	800100a <State_Cars+0x6d6>
				 drawRGBBitmapFast(73, 176, CAR_NAC, 30, 50);
 8000e24:	2332      	movs	r3, #50	@ 0x32
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	231e      	movs	r3, #30
 8000e2a:	4a12      	ldr	r2, [pc, #72]	@ (8000e74 <State_Cars+0x540>)
 8000e2c:	21b0      	movs	r1, #176	@ 0xb0
 8000e2e:	2049      	movs	r0, #73	@ 0x49
 8000e30:	f003 fd82 	bl	8004938 <drawRGBBitmapFast>
				 drawRGBBitmapFast(71,134,mySem_RED,33,13);
 8000e34:	230d      	movs	r3, #13
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2321      	movs	r3, #33	@ 0x21
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e78 <State_Cars+0x544>)
 8000e3c:	2186      	movs	r1, #134	@ 0x86
 8000e3e:	2047      	movs	r0, #71	@ 0x47
 8000e40:	f003 fd7a 	bl	8004938 <drawRGBBitmapFast>
				 Number_Display = Number_Display + 1;
 8000e44:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <State_Cars+0x53c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <State_Cars+0x53c>)
 8000e4e:	701a      	strb	r2, [r3, #0]
				 State_Dis(Number_Display);// imprimir en display
 8000e50:	4b07      	ldr	r3, [pc, #28]	@ (8000e70 <State_Cars+0x53c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fd51 	bl	80008fc <State_Dis>
			 break;
 8000e5a:	e0d6      	b.n	800100a <State_Cars+0x6d6>
 8000e5c:	20000142 	.word	0x20000142
 8000e60:	20000150 	.word	0x20000150
 8000e64:	20000004 	.word	0x20000004
 8000e68:	20000148 	.word	0x20000148
 8000e6c:	0802cbe8 	.word	0x0802cbe8
 8000e70:	20000000 	.word	0x20000000
 8000e74:	08040f80 	.word	0x08040f80
 8000e78:	0802cf44 	.word	0x0802cf44
 8000e7c:	20000143 	.word	0x20000143
 8000e80:	20000144 	.word	0x20000144
		case 7:
			 C7 = !C7;
 8000e84:	4b66      	ldr	r3, [pc, #408]	@ (8001020 <State_Cars+0x6ec>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	bf14      	ite	ne
 8000e8c:	2301      	movne	r3, #1
 8000e8e:	2300      	moveq	r3, #0
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	f083 0301 	eor.w	r3, r3, #1
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b60      	ldr	r3, [pc, #384]	@ (8001020 <State_Cars+0x6ec>)
 8000ea0:	701a      	strb	r2, [r3, #0]

			 if(C7 == 1){
 8000ea2:	4b5f      	ldr	r3, [pc, #380]	@ (8001020 <State_Cars+0x6ec>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d02e      	beq.n	8000f08 <State_Cars+0x5d4>
				 KLE = (KLE < 3) ? (KLE + 1) : 0;
 8000eaa:	4b5e      	ldr	r3, [pc, #376]	@ (8001024 <State_Cars+0x6f0>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	dc03      	bgt.n	8000eba <State_Cars+0x586>
 8000eb2:	4b5c      	ldr	r3, [pc, #368]	@ (8001024 <State_Cars+0x6f0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	e000      	b.n	8000ebc <State_Cars+0x588>
 8000eba:	2300      	movs	r3, #0
 8000ebc:	4a59      	ldr	r2, [pc, #356]	@ (8001024 <State_Cars+0x6f0>)
 8000ebe:	6013      	str	r3, [r2, #0]
				selectedArray = carArrays[KLE]; // Selecciona el arreglo
 8000ec0:	4b58      	ldr	r3, [pc, #352]	@ (8001024 <State_Cars+0x6f0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a58      	ldr	r2, [pc, #352]	@ (8001028 <State_Cars+0x6f4>)
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	4a58      	ldr	r2, [pc, #352]	@ (800102c <State_Cars+0x6f8>)
 8000ecc:	6013      	str	r3, [r2, #0]
				// Llama a la función con el arreglo seleccionado
				drawRGBBitmapFast(132, 176, selectedArray, 30, 50);
 8000ece:	4b57      	ldr	r3, [pc, #348]	@ (800102c <State_Cars+0x6f8>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	2332      	movs	r3, #50	@ 0x32
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	231e      	movs	r3, #30
 8000ed8:	21b0      	movs	r1, #176	@ 0xb0
 8000eda:	2084      	movs	r0, #132	@ 0x84
 8000edc:	f003 fd2c 	bl	8004938 <drawRGBBitmapFast>
				drawRGBBitmapFast(130,134,mySem_GREEN,33,13);
 8000ee0:	230d      	movs	r3, #13
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2321      	movs	r3, #33	@ 0x21
 8000ee6:	4a52      	ldr	r2, [pc, #328]	@ (8001030 <State_Cars+0x6fc>)
 8000ee8:	2186      	movs	r1, #134	@ 0x86
 8000eea:	2082      	movs	r0, #130	@ 0x82
 8000eec:	f003 fd24 	bl	8004938 <drawRGBBitmapFast>
				Number_Display = Number_Display - 1;
 8000ef0:	4b50      	ldr	r3, [pc, #320]	@ (8001034 <State_Cars+0x700>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b4e      	ldr	r3, [pc, #312]	@ (8001034 <State_Cars+0x700>)
 8000efa:	701a      	strb	r2, [r3, #0]
				State_Dis(Number_Display);// imprimir en display
 8000efc:	4b4d      	ldr	r3, [pc, #308]	@ (8001034 <State_Cars+0x700>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fcfb 	bl	80008fc <State_Dis>
				 drawRGBBitmapFast(132, 176, CAR_NAC, 30, 50);
				 drawRGBBitmapFast(130,134,mySem_RED,33,13);
				 Number_Display = Number_Display + 1;
				 State_Dis(Number_Display);// imprimir en display
			 }
			 break;
 8000f06:	e082      	b.n	800100e <State_Cars+0x6da>
			 else if(C7 == 0){
 8000f08:	4b45      	ldr	r3, [pc, #276]	@ (8001020 <State_Cars+0x6ec>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	f083 0301 	eor.w	r3, r3, #1
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d07b      	beq.n	800100e <State_Cars+0x6da>
				 drawRGBBitmapFast(132, 176, CAR_NAC, 30, 50);
 8000f16:	2332      	movs	r3, #50	@ 0x32
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	231e      	movs	r3, #30
 8000f1c:	4a46      	ldr	r2, [pc, #280]	@ (8001038 <State_Cars+0x704>)
 8000f1e:	21b0      	movs	r1, #176	@ 0xb0
 8000f20:	2084      	movs	r0, #132	@ 0x84
 8000f22:	f003 fd09 	bl	8004938 <drawRGBBitmapFast>
				 drawRGBBitmapFast(130,134,mySem_RED,33,13);
 8000f26:	230d      	movs	r3, #13
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2321      	movs	r3, #33	@ 0x21
 8000f2c:	4a43      	ldr	r2, [pc, #268]	@ (800103c <State_Cars+0x708>)
 8000f2e:	2186      	movs	r1, #134	@ 0x86
 8000f30:	2082      	movs	r0, #130	@ 0x82
 8000f32:	f003 fd01 	bl	8004938 <drawRGBBitmapFast>
				 Number_Display = Number_Display + 1;
 8000f36:	4b3f      	ldr	r3, [pc, #252]	@ (8001034 <State_Cars+0x700>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001034 <State_Cars+0x700>)
 8000f40:	701a      	strb	r2, [r3, #0]
				 State_Dis(Number_Display);// imprimir en display
 8000f42:	4b3c      	ldr	r3, [pc, #240]	@ (8001034 <State_Cars+0x700>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fcd8 	bl	80008fc <State_Dis>
			 break;
 8000f4c:	e05f      	b.n	800100e <State_Cars+0x6da>
		case 8:
			 C8 = !C8;
 8000f4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001040 <State_Cars+0x70c>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	bf14      	ite	ne
 8000f56:	2301      	movne	r3, #1
 8000f58:	2300      	moveq	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	f083 0301 	eor.w	r3, r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b35      	ldr	r3, [pc, #212]	@ (8001040 <State_Cars+0x70c>)
 8000f6a:	701a      	strb	r2, [r3, #0]

			 if(C8 == 1){
 8000f6c:	4b34      	ldr	r3, [pc, #208]	@ (8001040 <State_Cars+0x70c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d01b      	beq.n	8000fac <State_Cars+0x678>
				// Llama a la función con el arreglo seleccionado
				drawRGBBitmapFast(191, 176, CAR_N, 30, 50);
 8000f74:	2332      	movs	r3, #50	@ 0x32
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	231e      	movs	r3, #30
 8000f7a:	4a32      	ldr	r2, [pc, #200]	@ (8001044 <State_Cars+0x710>)
 8000f7c:	21b0      	movs	r1, #176	@ 0xb0
 8000f7e:	20bf      	movs	r0, #191	@ 0xbf
 8000f80:	f003 fcda 	bl	8004938 <drawRGBBitmapFast>
				drawRGBBitmapFast(189, 134,mySem_GREEN,33,13);
 8000f84:	230d      	movs	r3, #13
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2321      	movs	r3, #33	@ 0x21
 8000f8a:	4a29      	ldr	r2, [pc, #164]	@ (8001030 <State_Cars+0x6fc>)
 8000f8c:	2186      	movs	r1, #134	@ 0x86
 8000f8e:	20bd      	movs	r0, #189	@ 0xbd
 8000f90:	f003 fcd2 	bl	8004938 <drawRGBBitmapFast>
				Number_Display = Number_Display - 1;
 8000f94:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <State_Cars+0x700>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b25      	ldr	r3, [pc, #148]	@ (8001034 <State_Cars+0x700>)
 8000f9e:	701a      	strb	r2, [r3, #0]
				State_Dis(Number_Display);// imprimir en display
 8000fa0:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <State_Cars+0x700>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fca9 	bl	80008fc <State_Dis>
				 drawRGBBitmapFast(191, 176, CAR_NAC, 30, 50);
				 drawRGBBitmapFast(189,134,mySem_RED,33,13);
				 Number_Display = Number_Display + 1;
				 State_Dis(Number_Display);// imprimir en display
			 }
			 break;
 8000faa:	e032      	b.n	8001012 <State_Cars+0x6de>
			 else if(C8 == 0){
 8000fac:	4b24      	ldr	r3, [pc, #144]	@ (8001040 <State_Cars+0x70c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	f083 0301 	eor.w	r3, r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d02b      	beq.n	8001012 <State_Cars+0x6de>
				 drawRGBBitmapFast(191, 176, CAR_NAC, 30, 50);
 8000fba:	2332      	movs	r3, #50	@ 0x32
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	231e      	movs	r3, #30
 8000fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001038 <State_Cars+0x704>)
 8000fc2:	21b0      	movs	r1, #176	@ 0xb0
 8000fc4:	20bf      	movs	r0, #191	@ 0xbf
 8000fc6:	f003 fcb7 	bl	8004938 <drawRGBBitmapFast>
				 drawRGBBitmapFast(189,134,mySem_RED,33,13);
 8000fca:	230d      	movs	r3, #13
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2321      	movs	r3, #33	@ 0x21
 8000fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800103c <State_Cars+0x708>)
 8000fd2:	2186      	movs	r1, #134	@ 0x86
 8000fd4:	20bd      	movs	r0, #189	@ 0xbd
 8000fd6:	f003 fcaf 	bl	8004938 <drawRGBBitmapFast>
				 Number_Display = Number_Display + 1;
 8000fda:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <State_Cars+0x700>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <State_Cars+0x700>)
 8000fe4:	701a      	strb	r2, [r3, #0]
				 State_Dis(Number_Display);// imprimir en display
 8000fe6:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <State_Cars+0x700>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fc86 	bl	80008fc <State_Dis>
			 break;
 8000ff0:	e00f      	b.n	8001012 <State_Cars+0x6de>

		default:

			break;
 8000ff2:	bf00      	nop
 8000ff4:	e00e      	b.n	8001014 <State_Cars+0x6e0>
			break;
 8000ff6:	bf00      	nop
 8000ff8:	e00c      	b.n	8001014 <State_Cars+0x6e0>
			break;
 8000ffa:	bf00      	nop
 8000ffc:	e00a      	b.n	8001014 <State_Cars+0x6e0>
			break;
 8000ffe:	bf00      	nop
 8001000:	e008      	b.n	8001014 <State_Cars+0x6e0>
			break;
 8001002:	bf00      	nop
 8001004:	e006      	b.n	8001014 <State_Cars+0x6e0>
			 break;
 8001006:	bf00      	nop
 8001008:	e004      	b.n	8001014 <State_Cars+0x6e0>
			 break;
 800100a:	bf00      	nop
 800100c:	e002      	b.n	8001014 <State_Cars+0x6e0>
			 break;
 800100e:	bf00      	nop
 8001010:	e000      	b.n	8001014 <State_Cars+0x6e0>
			 break;
 8001012:	bf00      	nop
	}

return 0;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000145 	.word	0x20000145
 8001024:	20000150 	.word	0x20000150
 8001028:	20000004 	.word	0x20000004
 800102c:	20000148 	.word	0x20000148
 8001030:	0802cbe8 	.word	0x0802cbe8
 8001034:	20000000 	.word	0x20000000
 8001038:	08040f80 	.word	0x08040f80
 800103c:	0802cf44 	.word	0x0802cf44
 8001040:	20000146 	.word	0x20000146
 8001044:	0803f810 	.word	0x0803f810

08001048 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == UART5) // Verificar si la interrupción es de UART1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0b      	ldr	r2, [pc, #44]	@ (8001084 <HAL_UART_RxCpltCallback+0x3c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d10f      	bne.n	800107a <HAL_UART_RxCpltCallback+0x32>
  {
	  Recived_Car = rx_data[0] - '0';
 800105a:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <HAL_UART_RxCpltCallback+0x40>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	3b30      	subs	r3, #48	@ 0x30
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <HAL_UART_RxCpltCallback+0x44>)
 8001064:	701a      	strb	r2, [r3, #0]
	  State_Cars(Recived_Car);// Recivir numero de carro
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <HAL_UART_RxCpltCallback+0x44>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fc62 	bl	8000934 <State_Cars>

	  // Volver a habilitar la recepción por UART5
	      HAL_UART_Receive_IT(&huart5, rx_data, 1);
 8001070:	2201      	movs	r2, #1
 8001072:	4905      	ldr	r1, [pc, #20]	@ (8001088 <HAL_UART_RxCpltCallback+0x40>)
 8001074:	4806      	ldr	r0, [pc, #24]	@ (8001090 <HAL_UART_RxCpltCallback+0x48>)
 8001076:	f005 fa59 	bl	800652c <HAL_UART_Receive_IT>

  }
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40005000 	.word	0x40005000
 8001088:	20000154 	.word	0x20000154
 800108c:	2000013e 	.word	0x2000013e
 8001090:	200000ac 	.word	0x200000ac

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <Error_Handler+0x8>

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4b10      	ldr	r3, [pc, #64]	@ (80010ec <HAL_MspInit+0x4c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	4a0f      	ldr	r2, [pc, #60]	@ (80010ec <HAL_MspInit+0x4c>)
 80010b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b6:	4b0d      	ldr	r3, [pc, #52]	@ (80010ec <HAL_MspInit+0x4c>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <HAL_MspInit+0x4c>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ca:	4a08      	ldr	r2, [pc, #32]	@ (80010ec <HAL_MspInit+0x4c>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_MspInit+0x4c>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800

080010f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0b      	ldr	r2, [pc, #44]	@ (800112c <HAL_TIM_Base_MspInit+0x3c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d10d      	bne.n	800111e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <HAL_TIM_Base_MspInit+0x40>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110a:	4a09      	ldr	r2, [pc, #36]	@ (8001130 <HAL_TIM_Base_MspInit+0x40>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6453      	str	r3, [r2, #68]	@ 0x44
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <HAL_TIM_Base_MspInit+0x40>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40010000 	.word	0x40010000
 8001130:	40023800 	.word	0x40023800

08001134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	@ 0x30
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a45      	ldr	r2, [pc, #276]	@ (8001268 <HAL_UART_MspInit+0x134>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d153      	bne.n	80011fe <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
 800115a:	4b44      	ldr	r3, [pc, #272]	@ (800126c <HAL_UART_MspInit+0x138>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	4a43      	ldr	r2, [pc, #268]	@ (800126c <HAL_UART_MspInit+0x138>)
 8001160:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001164:	6413      	str	r3, [r2, #64]	@ 0x40
 8001166:	4b41      	ldr	r3, [pc, #260]	@ (800126c <HAL_UART_MspInit+0x138>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	4b3d      	ldr	r3, [pc, #244]	@ (800126c <HAL_UART_MspInit+0x138>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a3c      	ldr	r2, [pc, #240]	@ (800126c <HAL_UART_MspInit+0x138>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b3a      	ldr	r3, [pc, #232]	@ (800126c <HAL_UART_MspInit+0x138>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b36      	ldr	r3, [pc, #216]	@ (800126c <HAL_UART_MspInit+0x138>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a35      	ldr	r2, [pc, #212]	@ (800126c <HAL_UART_MspInit+0x138>)
 8001198:	f043 0308 	orr.w	r3, r3, #8
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b33      	ldr	r3, [pc, #204]	@ (800126c <HAL_UART_MspInit+0x138>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011bc:	2308      	movs	r3, #8
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	482a      	ldr	r0, [pc, #168]	@ (8001270 <HAL_UART_MspInit+0x13c>)
 80011c8:	f003 fe88 	bl	8004edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011cc:	2304      	movs	r3, #4
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011dc:	2308      	movs	r3, #8
 80011de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4619      	mov	r1, r3
 80011e6:	4823      	ldr	r0, [pc, #140]	@ (8001274 <HAL_UART_MspInit+0x140>)
 80011e8:	f003 fe78 	bl	8004edc <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	2035      	movs	r0, #53	@ 0x35
 80011f2:	f003 fdaa 	bl	8004d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80011f6:	2035      	movs	r0, #53	@ 0x35
 80011f8:	f003 fdc3 	bl	8004d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011fc:	e030      	b.n	8001260 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a1d      	ldr	r2, [pc, #116]	@ (8001278 <HAL_UART_MspInit+0x144>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d12b      	bne.n	8001260 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	4b17      	ldr	r3, [pc, #92]	@ (800126c <HAL_UART_MspInit+0x138>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001210:	4a16      	ldr	r2, [pc, #88]	@ (800126c <HAL_UART_MspInit+0x138>)
 8001212:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001216:	6413      	str	r3, [r2, #64]	@ 0x40
 8001218:	4b14      	ldr	r3, [pc, #80]	@ (800126c <HAL_UART_MspInit+0x138>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	4b10      	ldr	r3, [pc, #64]	@ (800126c <HAL_UART_MspInit+0x138>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122c:	4a0f      	ldr	r2, [pc, #60]	@ (800126c <HAL_UART_MspInit+0x138>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	6313      	str	r3, [r2, #48]	@ 0x30
 8001234:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <HAL_UART_MspInit+0x138>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001240:	230c      	movs	r3, #12
 8001242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001250:	2307      	movs	r3, #7
 8001252:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	4808      	ldr	r0, [pc, #32]	@ (800127c <HAL_UART_MspInit+0x148>)
 800125c:	f003 fe3e 	bl	8004edc <HAL_GPIO_Init>
}
 8001260:	bf00      	nop
 8001262:	3730      	adds	r7, #48	@ 0x30
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40005000 	.word	0x40005000
 800126c:	40023800 	.word	0x40023800
 8001270:	40020800 	.word	0x40020800
 8001274:	40020c00 	.word	0x40020c00
 8001278:	40004400 	.word	0x40004400
 800127c:	40020000 	.word	0x40020000

08001280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <NMI_Handler+0x4>

08001288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <HardFault_Handler+0x4>

08001290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <MemManage_Handler+0x4>

08001298 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <BusFault_Handler+0x4>

080012a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <UsageFault_Handler+0x4>

080012a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d6:	f003 fc19 	bl	8004b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80012e4:	4802      	ldr	r0, [pc, #8]	@ (80012f0 <UART5_IRQHandler+0x10>)
 80012e6:	f005 f947 	bl	8006578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200000ac 	.word	0x200000ac

080012f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <SystemInit+0x20>)
 80012fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012fe:	4a05      	ldr	r2, [pc, #20]	@ (8001314 <SystemInit+0x20>)
 8001300:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001304:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001324:	887b      	ldrh	r3, [r7, #2]
 8001326:	2200      	movs	r2, #0
 8001328:	4619      	mov	r1, r3
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f003 ff6a 	bl	8005204 <HAL_GPIO_WritePin>
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	2201      	movs	r2, #1
 8001348:	4619      	mov	r1, r3
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f003 ff5a 	bl	8005204 <HAL_GPIO_WritePin>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8001364:	887b      	ldrh	r3, [r7, #2]
 8001366:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136c:	2301      	movs	r3, #1
 800136e:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	4619      	mov	r1, r3
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f003 fdb0 	bl	8004edc <HAL_GPIO_Init>
}
 800137c:	bf00      	nop
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800139c:	2302      	movs	r3, #2
 800139e:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	4619      	mov	r1, r3
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f003 fd98 	bl	8004edc <HAL_GPIO_Init>
}
 80013ac:	bf00      	nop
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4b03      	ldr	r3, [pc, #12]	@ (80013c8 <width+0x14>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	2000003c 	.word	0x2000003c

080013cc <height>:

uint16_t height(void)
{ return _height; }
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4b03      	ldr	r3, [pc, #12]	@ (80013e0 <height+0x14>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	2000003e 	.word	0x2000003e

080013e4 <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 80013ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8001402:	b21b      	sxth	r3, r3
 8001404:	4313      	orrs	r3, r2
 8001406:	b21a      	sxth	r2, r3
 8001408:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	b21b      	sxth	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	b21b      	sxth	r3, r3
 8001416:	b29b      	uxth	r3, r3
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 800142e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001432:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001436:	b21a      	sxth	r2, r3
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	115b      	asrs	r3, r3, #5
 800143c:	b21b      	sxth	r3, r3
 800143e:	f003 0320 	and.w	r3, r3, #32
 8001442:	b21b      	sxth	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b21a      	sxth	r2, r3
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	105b      	asrs	r3, r3, #1
 800144c:	b21b      	sxth	r3, r3
 800144e:	f003 031f 	and.w	r3, r3, #31
 8001452:	b21b      	sxth	r3, r3
 8001454:	4313      	orrs	r3, r2
 8001456:	b21b      	sxth	r3, r3
 8001458:	b29b      	uxth	r3, r3
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	121b      	asrs	r3, r3, #8
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f023 0307 	bic.w	r3, r3, #7
 800147a:	b2db      	uxtb	r3, r3
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	10db      	asrs	r3, r3, #3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	f023 0303 	bic.w	r3, r3, #3
 800149c:	b2db      	uxtb	r3, r3
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	b2db      	uxtb	r3, r3
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	460b      	mov	r3, r1
 80014d2:	71bb      	strb	r3, [r7, #6]
 80014d4:	4613      	mov	r3, r2
 80014d6:	717b      	strb	r3, [r7, #5]
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	b21b      	sxth	r3, r3
 80014de:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80014e2:	f023 0307 	bic.w	r3, r3, #7
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	79bb      	ldrb	r3, [r7, #6]
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	797b      	ldrb	r3, [r7, #5]
 80014fa:	08db      	lsrs	r3, r3, #3
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b21b      	sxth	r3, r3
 8001504:	b29b      	uxth	r3, r3
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af02      	add	r7, sp, #8
 8001518:	4603      	mov	r3, r0
 800151a:	460a      	mov	r2, r1
 800151c:	80fb      	strh	r3, [r7, #6]
 800151e:	4613      	mov	r3, r2
 8001520:	80bb      	strh	r3, [r7, #4]
 8001522:	f107 020e 	add.w	r2, r7, #14
 8001526:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800152a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800152e:	2301      	movs	r3, #1
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2301      	movs	r3, #1
 8001534:	f001 fc0a 	bl	8002d4c <readGRAM>
 8001538:	89fb      	ldrh	r3, [r7, #14]
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	460a      	mov	r2, r1
 800154c:	80fb      	strh	r3, [r7, #6]
 800154e:	4613      	mov	r3, r2
 8001550:	80bb      	strh	r3, [r7, #4]
 8001552:	88ba      	ldrh	r2, [r7, #4]
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f000 f95b 	bl	8001814 <writecmddata>
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	6039      	str	r1, [r7, #0]
 8001570:	80fb      	strh	r3, [r7, #6]
 8001572:	4613      	mov	r3, r2
 8001574:	717b      	strb	r3, [r7, #5]
 8001576:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f000 fa7e 	bl	8001a80 <WriteCmdParamN>
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <setReadDir>:


//extern GFXfont *gfxFont;

void setReadDir (void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8001590:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001594:	4811      	ldr	r0, [pc, #68]	@ (80015dc <setReadDir+0x50>)
 8001596:	f7ff fedf 	bl	8001358 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 800159a:	2180      	movs	r1, #128	@ 0x80
 800159c:	4810      	ldr	r0, [pc, #64]	@ (80015e0 <setReadDir+0x54>)
 800159e:	f7ff fedb 	bl	8001358 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 80015a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015a6:	480d      	ldr	r0, [pc, #52]	@ (80015dc <setReadDir+0x50>)
 80015a8:	f7ff fed6 	bl	8001358 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 80015ac:	2108      	movs	r1, #8
 80015ae:	480d      	ldr	r0, [pc, #52]	@ (80015e4 <setReadDir+0x58>)
 80015b0:	f7ff fed2 	bl	8001358 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 80015b4:	2120      	movs	r1, #32
 80015b6:	480b      	ldr	r0, [pc, #44]	@ (80015e4 <setReadDir+0x58>)
 80015b8:	f7ff fece 	bl	8001358 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 80015bc:	2110      	movs	r1, #16
 80015be:	4809      	ldr	r0, [pc, #36]	@ (80015e4 <setReadDir+0x58>)
 80015c0:	f7ff feca 	bl	8001358 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 80015c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015c8:	4806      	ldr	r0, [pc, #24]	@ (80015e4 <setReadDir+0x58>)
 80015ca:	f7ff fec5 	bl	8001358 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 80015ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015d2:	4802      	ldr	r0, [pc, #8]	@ (80015dc <setReadDir+0x50>)
 80015d4:	f7ff fec0 	bl	8001358 <PIN_INPUT>
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020800 	.word	0x40020800
 80015e4:	40020400 	.word	0x40020400

080015e8 <setWriteDir>:

void setWriteDir (void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 80015ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015f0:	4811      	ldr	r0, [pc, #68]	@ (8001638 <setWriteDir+0x50>)
 80015f2:	f7ff fec7 	bl	8001384 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 80015f6:	2180      	movs	r1, #128	@ 0x80
 80015f8:	4810      	ldr	r0, [pc, #64]	@ (800163c <setWriteDir+0x54>)
 80015fa:	f7ff fec3 	bl	8001384 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 80015fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001602:	480d      	ldr	r0, [pc, #52]	@ (8001638 <setWriteDir+0x50>)
 8001604:	f7ff febe 	bl	8001384 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8001608:	2108      	movs	r1, #8
 800160a:	480d      	ldr	r0, [pc, #52]	@ (8001640 <setWriteDir+0x58>)
 800160c:	f7ff feba 	bl	8001384 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8001610:	2120      	movs	r1, #32
 8001612:	480b      	ldr	r0, [pc, #44]	@ (8001640 <setWriteDir+0x58>)
 8001614:	f7ff feb6 	bl	8001384 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8001618:	2110      	movs	r1, #16
 800161a:	4809      	ldr	r0, [pc, #36]	@ (8001640 <setWriteDir+0x58>)
 800161c:	f7ff feb2 	bl	8001384 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8001620:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001624:	4806      	ldr	r0, [pc, #24]	@ (8001640 <setWriteDir+0x58>)
 8001626:	f7ff fead 	bl	8001384 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 800162a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800162e:	4802      	ldr	r0, [pc, #8]	@ (8001638 <setWriteDir+0x50>)
 8001630:	f7ff fea8 	bl	8001384 <PIN_OUTPUT>
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40020000 	.word	0x40020000
 800163c:	40020800 	.word	0x40020800
 8001640:	40020400 	.word	0x40020400

08001644 <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff08 	bl	8001466 <color565_to_r>
 8001656:	4603      	mov	r3, r0
 8001658:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff13 	bl	8001488 <color565_to_g>
 8001662:	4603      	mov	r3, r0
 8001664:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff1e 	bl	80014aa <color565_to_b>
 800166e:	4603      	mov	r3, r0
 8001670:	737b      	strb	r3, [r7, #13]
    write8(r);
 8001672:	4b65      	ldr	r3, [pc, #404]	@ (8001808 <write24+0x1c4>)
 8001674:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001678:	619a      	str	r2, [r3, #24]
 800167a:	4b64      	ldr	r3, [pc, #400]	@ (800180c <write24+0x1c8>)
 800167c:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001680:	619a      	str	r2, [r3, #24]
 8001682:	4b63      	ldr	r3, [pc, #396]	@ (8001810 <write24+0x1cc>)
 8001684:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001688:	619a      	str	r2, [r3, #24]
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800169a:	431a      	orrs	r2, r3
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	025b      	lsls	r3, r3, #9
 80016a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016a4:	431a      	orrs	r2, r3
 80016a6:	4b58      	ldr	r3, [pc, #352]	@ (8001808 <write24+0x1c4>)
 80016a8:	619a      	str	r2, [r3, #24]
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	105b      	asrs	r3, r3, #1
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	431a      	orrs	r2, r3
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	431a      	orrs	r2, r3
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	431a      	orrs	r2, r3
 80016ce:	4b4f      	ldr	r3, [pc, #316]	@ (800180c <write24+0x1c8>)
 80016d0:	619a      	str	r2, [r3, #24]
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	019b      	lsls	r3, r3, #6
 80016d6:	4a4e      	ldr	r2, [pc, #312]	@ (8001810 <write24+0x1cc>)
 80016d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016dc:	6193      	str	r3, [r2, #24]
 80016de:	2102      	movs	r1, #2
 80016e0:	4849      	ldr	r0, [pc, #292]	@ (8001808 <write24+0x1c4>)
 80016e2:	f7ff fe19 	bl	8001318 <PIN_LOW>
 80016e6:	2102      	movs	r1, #2
 80016e8:	4847      	ldr	r0, [pc, #284]	@ (8001808 <write24+0x1c4>)
 80016ea:	f7ff fe25 	bl	8001338 <PIN_HIGH>
 80016ee:	2102      	movs	r1, #2
 80016f0:	4845      	ldr	r0, [pc, #276]	@ (8001808 <write24+0x1c4>)
 80016f2:	f7ff fe21 	bl	8001338 <PIN_HIGH>
    write8(g);
 80016f6:	4b44      	ldr	r3, [pc, #272]	@ (8001808 <write24+0x1c4>)
 80016f8:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80016fc:	619a      	str	r2, [r3, #24]
 80016fe:	4b43      	ldr	r3, [pc, #268]	@ (800180c <write24+0x1c8>)
 8001700:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001704:	619a      	str	r2, [r3, #24]
 8001706:	4b42      	ldr	r3, [pc, #264]	@ (8001810 <write24+0x1cc>)
 8001708:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800170c:	619a      	str	r2, [r3, #24]
 800170e:	7bbb      	ldrb	r3, [r7, #14]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001716:	7bbb      	ldrb	r3, [r7, #14]
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800171e:	431a      	orrs	r2, r3
 8001720:	7bbb      	ldrb	r3, [r7, #14]
 8001722:	025b      	lsls	r3, r3, #9
 8001724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001728:	431a      	orrs	r2, r3
 800172a:	4b37      	ldr	r3, [pc, #220]	@ (8001808 <write24+0x1c4>)
 800172c:	619a      	str	r2, [r3, #24]
 800172e:	7bbb      	ldrb	r3, [r7, #14]
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001736:	7bbb      	ldrb	r3, [r7, #14]
 8001738:	105b      	asrs	r3, r3, #1
 800173a:	f003 0310 	and.w	r3, r3, #16
 800173e:	431a      	orrs	r2, r3
 8001740:	7bbb      	ldrb	r3, [r7, #14]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	f003 0320 	and.w	r3, r3, #32
 8001748:	431a      	orrs	r2, r3
 800174a:	7bbb      	ldrb	r3, [r7, #14]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	431a      	orrs	r2, r3
 8001752:	4b2e      	ldr	r3, [pc, #184]	@ (800180c <write24+0x1c8>)
 8001754:	619a      	str	r2, [r3, #24]
 8001756:	7bbb      	ldrb	r3, [r7, #14]
 8001758:	019b      	lsls	r3, r3, #6
 800175a:	4a2d      	ldr	r2, [pc, #180]	@ (8001810 <write24+0x1cc>)
 800175c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001760:	6193      	str	r3, [r2, #24]
 8001762:	2102      	movs	r1, #2
 8001764:	4828      	ldr	r0, [pc, #160]	@ (8001808 <write24+0x1c4>)
 8001766:	f7ff fdd7 	bl	8001318 <PIN_LOW>
 800176a:	2102      	movs	r1, #2
 800176c:	4826      	ldr	r0, [pc, #152]	@ (8001808 <write24+0x1c4>)
 800176e:	f7ff fde3 	bl	8001338 <PIN_HIGH>
 8001772:	2102      	movs	r1, #2
 8001774:	4824      	ldr	r0, [pc, #144]	@ (8001808 <write24+0x1c4>)
 8001776:	f7ff fddf 	bl	8001338 <PIN_HIGH>
    write8(b);
 800177a:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <write24+0x1c4>)
 800177c:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001780:	619a      	str	r2, [r3, #24]
 8001782:	4b22      	ldr	r3, [pc, #136]	@ (800180c <write24+0x1c8>)
 8001784:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001788:	619a      	str	r2, [r3, #24]
 800178a:	4b21      	ldr	r3, [pc, #132]	@ (8001810 <write24+0x1cc>)
 800178c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001790:	619a      	str	r2, [r3, #24]
 8001792:	7b7b      	ldrb	r3, [r7, #13]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800179a:	7b7b      	ldrb	r3, [r7, #13]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a2:	431a      	orrs	r2, r3
 80017a4:	7b7b      	ldrb	r3, [r7, #13]
 80017a6:	025b      	lsls	r3, r3, #9
 80017a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017ac:	431a      	orrs	r2, r3
 80017ae:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <write24+0x1c4>)
 80017b0:	619a      	str	r2, [r3, #24]
 80017b2:	7b7b      	ldrb	r3, [r7, #13]
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80017ba:	7b7b      	ldrb	r3, [r7, #13]
 80017bc:	105b      	asrs	r3, r3, #1
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	431a      	orrs	r2, r3
 80017c4:	7b7b      	ldrb	r3, [r7, #13]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	f003 0320 	and.w	r3, r3, #32
 80017cc:	431a      	orrs	r2, r3
 80017ce:	7b7b      	ldrb	r3, [r7, #13]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	431a      	orrs	r2, r3
 80017d6:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <write24+0x1c8>)
 80017d8:	619a      	str	r2, [r3, #24]
 80017da:	7b7b      	ldrb	r3, [r7, #13]
 80017dc:	019b      	lsls	r3, r3, #6
 80017de:	4a0c      	ldr	r2, [pc, #48]	@ (8001810 <write24+0x1cc>)
 80017e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017e4:	6193      	str	r3, [r2, #24]
 80017e6:	2102      	movs	r1, #2
 80017e8:	4807      	ldr	r0, [pc, #28]	@ (8001808 <write24+0x1c4>)
 80017ea:	f7ff fd95 	bl	8001318 <PIN_LOW>
 80017ee:	2102      	movs	r1, #2
 80017f0:	4805      	ldr	r0, [pc, #20]	@ (8001808 <write24+0x1c4>)
 80017f2:	f7ff fda1 	bl	8001338 <PIN_HIGH>
 80017f6:	2102      	movs	r1, #2
 80017f8:	4803      	ldr	r0, [pc, #12]	@ (8001808 <write24+0x1c4>)
 80017fa:	f7ff fd9d 	bl	8001338 <PIN_HIGH>
}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40020000 	.word	0x40020000
 800180c:	40020400 	.word	0x40020400
 8001810:	40020800 	.word	0x40020800

08001814 <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	460a      	mov	r2, r1
 800181e:	80fb      	strh	r3, [r7, #6]
 8001820:	4613      	mov	r3, r2
 8001822:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 8001824:	2101      	movs	r1, #1
 8001826:	4893      	ldr	r0, [pc, #588]	@ (8001a74 <writecmddata+0x260>)
 8001828:	f7ff fd76 	bl	8001318 <PIN_LOW>
    WriteCmd(cmd);
 800182c:	2110      	movs	r1, #16
 800182e:	4892      	ldr	r0, [pc, #584]	@ (8001a78 <writecmddata+0x264>)
 8001830:	f7ff fd72 	bl	8001318 <PIN_LOW>
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	0a1b      	lsrs	r3, r3, #8
 8001838:	b29b      	uxth	r3, r3
 800183a:	73fb      	strb	r3, [r7, #15]
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	73bb      	strb	r3, [r7, #14]
 8001840:	4b8d      	ldr	r3, [pc, #564]	@ (8001a78 <writecmddata+0x264>)
 8001842:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001846:	619a      	str	r2, [r3, #24]
 8001848:	4b8a      	ldr	r3, [pc, #552]	@ (8001a74 <writecmddata+0x260>)
 800184a:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 800184e:	619a      	str	r2, [r3, #24]
 8001850:	4b8a      	ldr	r3, [pc, #552]	@ (8001a7c <writecmddata+0x268>)
 8001852:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001856:	619a      	str	r2, [r3, #24]
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001868:	431a      	orrs	r2, r3
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	025b      	lsls	r3, r3, #9
 800186e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001872:	431a      	orrs	r2, r3
 8001874:	4b80      	ldr	r3, [pc, #512]	@ (8001a78 <writecmddata+0x264>)
 8001876:	619a      	str	r2, [r3, #24]
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	105b      	asrs	r3, r3, #1
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	431a      	orrs	r2, r3
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	f003 0320 	and.w	r3, r3, #32
 8001892:	431a      	orrs	r2, r3
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	431a      	orrs	r2, r3
 800189c:	4b75      	ldr	r3, [pc, #468]	@ (8001a74 <writecmddata+0x260>)
 800189e:	619a      	str	r2, [r3, #24]
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	019b      	lsls	r3, r3, #6
 80018a4:	4a75      	ldr	r2, [pc, #468]	@ (8001a7c <writecmddata+0x268>)
 80018a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	2102      	movs	r1, #2
 80018ae:	4872      	ldr	r0, [pc, #456]	@ (8001a78 <writecmddata+0x264>)
 80018b0:	f7ff fd32 	bl	8001318 <PIN_LOW>
 80018b4:	2102      	movs	r1, #2
 80018b6:	4870      	ldr	r0, [pc, #448]	@ (8001a78 <writecmddata+0x264>)
 80018b8:	f7ff fd3e 	bl	8001338 <PIN_HIGH>
 80018bc:	2102      	movs	r1, #2
 80018be:	486e      	ldr	r0, [pc, #440]	@ (8001a78 <writecmddata+0x264>)
 80018c0:	f7ff fd3a 	bl	8001338 <PIN_HIGH>
 80018c4:	4b6c      	ldr	r3, [pc, #432]	@ (8001a78 <writecmddata+0x264>)
 80018c6:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80018ca:	619a      	str	r2, [r3, #24]
 80018cc:	4b69      	ldr	r3, [pc, #420]	@ (8001a74 <writecmddata+0x260>)
 80018ce:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80018d2:	619a      	str	r2, [r3, #24]
 80018d4:	4b69      	ldr	r3, [pc, #420]	@ (8001a7c <writecmddata+0x268>)
 80018d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018da:	619a      	str	r2, [r3, #24]
 80018dc:	7bbb      	ldrb	r3, [r7, #14]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80018e4:	7bbb      	ldrb	r3, [r7, #14]
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ec:	431a      	orrs	r2, r3
 80018ee:	7bbb      	ldrb	r3, [r7, #14]
 80018f0:	025b      	lsls	r3, r3, #9
 80018f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018f6:	431a      	orrs	r2, r3
 80018f8:	4b5f      	ldr	r3, [pc, #380]	@ (8001a78 <writecmddata+0x264>)
 80018fa:	619a      	str	r2, [r3, #24]
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001904:	7bbb      	ldrb	r3, [r7, #14]
 8001906:	105b      	asrs	r3, r3, #1
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	431a      	orrs	r2, r3
 800190e:	7bbb      	ldrb	r3, [r7, #14]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	f003 0320 	and.w	r3, r3, #32
 8001916:	431a      	orrs	r2, r3
 8001918:	7bbb      	ldrb	r3, [r7, #14]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	431a      	orrs	r2, r3
 8001920:	4b54      	ldr	r3, [pc, #336]	@ (8001a74 <writecmddata+0x260>)
 8001922:	619a      	str	r2, [r3, #24]
 8001924:	7bbb      	ldrb	r3, [r7, #14]
 8001926:	019b      	lsls	r3, r3, #6
 8001928:	4a54      	ldr	r2, [pc, #336]	@ (8001a7c <writecmddata+0x268>)
 800192a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	2102      	movs	r1, #2
 8001932:	4851      	ldr	r0, [pc, #324]	@ (8001a78 <writecmddata+0x264>)
 8001934:	f7ff fcf0 	bl	8001318 <PIN_LOW>
 8001938:	2102      	movs	r1, #2
 800193a:	484f      	ldr	r0, [pc, #316]	@ (8001a78 <writecmddata+0x264>)
 800193c:	f7ff fcfc 	bl	8001338 <PIN_HIGH>
 8001940:	2102      	movs	r1, #2
 8001942:	484d      	ldr	r0, [pc, #308]	@ (8001a78 <writecmddata+0x264>)
 8001944:	f7ff fcf8 	bl	8001338 <PIN_HIGH>
 8001948:	2110      	movs	r1, #16
 800194a:	484b      	ldr	r0, [pc, #300]	@ (8001a78 <writecmddata+0x264>)
 800194c:	f7ff fcf4 	bl	8001338 <PIN_HIGH>
    WriteData(dat);
 8001950:	88bb      	ldrh	r3, [r7, #4]
 8001952:	0a1b      	lsrs	r3, r3, #8
 8001954:	b29b      	uxth	r3, r3
 8001956:	737b      	strb	r3, [r7, #13]
 8001958:	88bb      	ldrh	r3, [r7, #4]
 800195a:	733b      	strb	r3, [r7, #12]
 800195c:	4b46      	ldr	r3, [pc, #280]	@ (8001a78 <writecmddata+0x264>)
 800195e:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001962:	619a      	str	r2, [r3, #24]
 8001964:	4b43      	ldr	r3, [pc, #268]	@ (8001a74 <writecmddata+0x260>)
 8001966:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 800196a:	619a      	str	r2, [r3, #24]
 800196c:	4b43      	ldr	r3, [pc, #268]	@ (8001a7c <writecmddata+0x268>)
 800196e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001972:	619a      	str	r2, [r3, #24]
 8001974:	7b7b      	ldrb	r3, [r7, #13]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800197c:	7b7b      	ldrb	r3, [r7, #13]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001984:	431a      	orrs	r2, r3
 8001986:	7b7b      	ldrb	r3, [r7, #13]
 8001988:	025b      	lsls	r3, r3, #9
 800198a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800198e:	431a      	orrs	r2, r3
 8001990:	4b39      	ldr	r3, [pc, #228]	@ (8001a78 <writecmddata+0x264>)
 8001992:	619a      	str	r2, [r3, #24]
 8001994:	7b7b      	ldrb	r3, [r7, #13]
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800199c:	7b7b      	ldrb	r3, [r7, #13]
 800199e:	105b      	asrs	r3, r3, #1
 80019a0:	f003 0310 	and.w	r3, r3, #16
 80019a4:	431a      	orrs	r2, r3
 80019a6:	7b7b      	ldrb	r3, [r7, #13]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	f003 0320 	and.w	r3, r3, #32
 80019ae:	431a      	orrs	r2, r3
 80019b0:	7b7b      	ldrb	r3, [r7, #13]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	431a      	orrs	r2, r3
 80019b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a74 <writecmddata+0x260>)
 80019ba:	619a      	str	r2, [r3, #24]
 80019bc:	7b7b      	ldrb	r3, [r7, #13]
 80019be:	019b      	lsls	r3, r3, #6
 80019c0:	4a2e      	ldr	r2, [pc, #184]	@ (8001a7c <writecmddata+0x268>)
 80019c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	2102      	movs	r1, #2
 80019ca:	482b      	ldr	r0, [pc, #172]	@ (8001a78 <writecmddata+0x264>)
 80019cc:	f7ff fca4 	bl	8001318 <PIN_LOW>
 80019d0:	2102      	movs	r1, #2
 80019d2:	4829      	ldr	r0, [pc, #164]	@ (8001a78 <writecmddata+0x264>)
 80019d4:	f7ff fcb0 	bl	8001338 <PIN_HIGH>
 80019d8:	2102      	movs	r1, #2
 80019da:	4827      	ldr	r0, [pc, #156]	@ (8001a78 <writecmddata+0x264>)
 80019dc:	f7ff fcac 	bl	8001338 <PIN_HIGH>
 80019e0:	4b25      	ldr	r3, [pc, #148]	@ (8001a78 <writecmddata+0x264>)
 80019e2:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80019e6:	619a      	str	r2, [r3, #24]
 80019e8:	4b22      	ldr	r3, [pc, #136]	@ (8001a74 <writecmddata+0x260>)
 80019ea:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80019ee:	619a      	str	r2, [r3, #24]
 80019f0:	4b22      	ldr	r3, [pc, #136]	@ (8001a7c <writecmddata+0x268>)
 80019f2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019f6:	619a      	str	r2, [r3, #24]
 80019f8:	7b3b      	ldrb	r3, [r7, #12]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001a00:	7b3b      	ldrb	r3, [r7, #12]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	7b3b      	ldrb	r3, [r7, #12]
 8001a0c:	025b      	lsls	r3, r3, #9
 8001a0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a12:	431a      	orrs	r2, r3
 8001a14:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <writecmddata+0x264>)
 8001a16:	619a      	str	r2, [r3, #24]
 8001a18:	7b3b      	ldrb	r3, [r7, #12]
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001a20:	7b3b      	ldrb	r3, [r7, #12]
 8001a22:	105b      	asrs	r3, r3, #1
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	7b3b      	ldrb	r3, [r7, #12]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	f003 0320 	and.w	r3, r3, #32
 8001a32:	431a      	orrs	r2, r3
 8001a34:	7b3b      	ldrb	r3, [r7, #12]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a74 <writecmddata+0x260>)
 8001a3e:	619a      	str	r2, [r3, #24]
 8001a40:	7b3b      	ldrb	r3, [r7, #12]
 8001a42:	019b      	lsls	r3, r3, #6
 8001a44:	4a0d      	ldr	r2, [pc, #52]	@ (8001a7c <writecmddata+0x268>)
 8001a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	480a      	ldr	r0, [pc, #40]	@ (8001a78 <writecmddata+0x264>)
 8001a50:	f7ff fc62 	bl	8001318 <PIN_LOW>
 8001a54:	2102      	movs	r1, #2
 8001a56:	4808      	ldr	r0, [pc, #32]	@ (8001a78 <writecmddata+0x264>)
 8001a58:	f7ff fc6e 	bl	8001338 <PIN_HIGH>
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	4806      	ldr	r0, [pc, #24]	@ (8001a78 <writecmddata+0x264>)
 8001a60:	f7ff fc6a 	bl	8001338 <PIN_HIGH>
    CS_IDLE;
 8001a64:	2101      	movs	r1, #1
 8001a66:	4803      	ldr	r0, [pc, #12]	@ (8001a74 <writecmddata+0x260>)
 8001a68:	f7ff fc66 	bl	8001338 <PIN_HIGH>
}
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40020400 	.word	0x40020400
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40020800 	.word	0x40020800

08001a80 <WriteCmdParamN>:



static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	603a      	str	r2, [r7, #0]
 8001a8a:	80fb      	strh	r3, [r7, #6]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 8001a90:	2101      	movs	r1, #1
 8001a92:	484b      	ldr	r0, [pc, #300]	@ (8001bc0 <WriteCmdParamN+0x140>)
 8001a94:	f7ff fc40 	bl	8001318 <PIN_LOW>
    WriteCmd(cmd);
 8001a98:	2110      	movs	r1, #16
 8001a9a:	484a      	ldr	r0, [pc, #296]	@ (8001bc4 <WriteCmdParamN+0x144>)
 8001a9c:	f7ff fc3c 	bl	8001318 <PIN_LOW>
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	73fb      	strb	r3, [r7, #15]
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	73bb      	strb	r3, [r7, #14]
 8001aac:	4b45      	ldr	r3, [pc, #276]	@ (8001bc4 <WriteCmdParamN+0x144>)
 8001aae:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001ab2:	619a      	str	r2, [r3, #24]
 8001ab4:	4b42      	ldr	r3, [pc, #264]	@ (8001bc0 <WriteCmdParamN+0x140>)
 8001ab6:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001aba:	619a      	str	r2, [r3, #24]
 8001abc:	4b42      	ldr	r3, [pc, #264]	@ (8001bc8 <WriteCmdParamN+0x148>)
 8001abe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ac2:	619a      	str	r2, [r3, #24]
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	025b      	lsls	r3, r3, #9
 8001ada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	4b38      	ldr	r3, [pc, #224]	@ (8001bc4 <WriteCmdParamN+0x144>)
 8001ae2:	619a      	str	r2, [r3, #24]
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	105b      	asrs	r3, r3, #1
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	431a      	orrs	r2, r3
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	f003 0320 	and.w	r3, r3, #32
 8001afe:	431a      	orrs	r2, r3
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	431a      	orrs	r2, r3
 8001b08:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc0 <WriteCmdParamN+0x140>)
 8001b0a:	619a      	str	r2, [r3, #24]
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	019b      	lsls	r3, r3, #6
 8001b10:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc8 <WriteCmdParamN+0x148>)
 8001b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	2102      	movs	r1, #2
 8001b1a:	482a      	ldr	r0, [pc, #168]	@ (8001bc4 <WriteCmdParamN+0x144>)
 8001b1c:	f7ff fbfc 	bl	8001318 <PIN_LOW>
 8001b20:	2102      	movs	r1, #2
 8001b22:	4828      	ldr	r0, [pc, #160]	@ (8001bc4 <WriteCmdParamN+0x144>)
 8001b24:	f7ff fc08 	bl	8001338 <PIN_HIGH>
 8001b28:	2102      	movs	r1, #2
 8001b2a:	4826      	ldr	r0, [pc, #152]	@ (8001bc4 <WriteCmdParamN+0x144>)
 8001b2c:	f7ff fc04 	bl	8001338 <PIN_HIGH>
 8001b30:	4b24      	ldr	r3, [pc, #144]	@ (8001bc4 <WriteCmdParamN+0x144>)
 8001b32:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001b36:	619a      	str	r2, [r3, #24]
 8001b38:	4b21      	ldr	r3, [pc, #132]	@ (8001bc0 <WriteCmdParamN+0x140>)
 8001b3a:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001b3e:	619a      	str	r2, [r3, #24]
 8001b40:	4b21      	ldr	r3, [pc, #132]	@ (8001bc8 <WriteCmdParamN+0x148>)
 8001b42:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b46:	619a      	str	r2, [r3, #24]
 8001b48:	7bbb      	ldrb	r3, [r7, #14]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001b50:	7bbb      	ldrb	r3, [r7, #14]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	7bbb      	ldrb	r3, [r7, #14]
 8001b5c:	025b      	lsls	r3, r3, #9
 8001b5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b62:	431a      	orrs	r2, r3
 8001b64:	4b17      	ldr	r3, [pc, #92]	@ (8001bc4 <WriteCmdParamN+0x144>)
 8001b66:	619a      	str	r2, [r3, #24]
 8001b68:	7bbb      	ldrb	r3, [r7, #14]
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001b70:	7bbb      	ldrb	r3, [r7, #14]
 8001b72:	105b      	asrs	r3, r3, #1
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	7bbb      	ldrb	r3, [r7, #14]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	f003 0320 	and.w	r3, r3, #32
 8001b82:	431a      	orrs	r2, r3
 8001b84:	7bbb      	ldrb	r3, [r7, #14]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <WriteCmdParamN+0x140>)
 8001b8e:	619a      	str	r2, [r3, #24]
 8001b90:	7bbb      	ldrb	r3, [r7, #14]
 8001b92:	019b      	lsls	r3, r3, #6
 8001b94:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc8 <WriteCmdParamN+0x148>)
 8001b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	4809      	ldr	r0, [pc, #36]	@ (8001bc4 <WriteCmdParamN+0x144>)
 8001ba0:	f7ff fbba 	bl	8001318 <PIN_LOW>
 8001ba4:	2102      	movs	r1, #2
 8001ba6:	4807      	ldr	r0, [pc, #28]	@ (8001bc4 <WriteCmdParamN+0x144>)
 8001ba8:	f7ff fbc6 	bl	8001338 <PIN_HIGH>
 8001bac:	2102      	movs	r1, #2
 8001bae:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <WriteCmdParamN+0x144>)
 8001bb0:	f7ff fbc2 	bl	8001338 <PIN_HIGH>
 8001bb4:	2110      	movs	r1, #16
 8001bb6:	4803      	ldr	r0, [pc, #12]	@ (8001bc4 <WriteCmdParamN+0x144>)
 8001bb8:	f7ff fbbe 	bl	8001338 <PIN_HIGH>
    while (N-- > 0) {
 8001bbc:	e0ec      	b.n	8001d98 <WriteCmdParamN+0x318>
 8001bbe:	bf00      	nop
 8001bc0:	40020400 	.word	0x40020400
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020800 	.word	0x40020800
        uint8_t u8 = *block++;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	603a      	str	r2, [r7, #0]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	737b      	strb	r3, [r7, #13]
        write8(u8);
 8001bd6:	4b79      	ldr	r3, [pc, #484]	@ (8001dbc <WriteCmdParamN+0x33c>)
 8001bd8:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001bdc:	619a      	str	r2, [r3, #24]
 8001bde:	4b78      	ldr	r3, [pc, #480]	@ (8001dc0 <WriteCmdParamN+0x340>)
 8001be0:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001be4:	619a      	str	r2, [r3, #24]
 8001be6:	4b77      	ldr	r3, [pc, #476]	@ (8001dc4 <WriteCmdParamN+0x344>)
 8001be8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001bec:	619a      	str	r2, [r3, #24]
 8001bee:	7b7b      	ldrb	r3, [r7, #13]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001bf6:	7b7b      	ldrb	r3, [r7, #13]
 8001bf8:	021b      	lsls	r3, r3, #8
 8001bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	7b7b      	ldrb	r3, [r7, #13]
 8001c02:	025b      	lsls	r3, r3, #9
 8001c04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	4b6c      	ldr	r3, [pc, #432]	@ (8001dbc <WriteCmdParamN+0x33c>)
 8001c0c:	619a      	str	r2, [r3, #24]
 8001c0e:	7b7b      	ldrb	r3, [r7, #13]
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001c16:	7b7b      	ldrb	r3, [r7, #13]
 8001c18:	105b      	asrs	r3, r3, #1
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	7b7b      	ldrb	r3, [r7, #13]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	f003 0320 	and.w	r3, r3, #32
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	7b7b      	ldrb	r3, [r7, #13]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	431a      	orrs	r2, r3
 8001c32:	4b63      	ldr	r3, [pc, #396]	@ (8001dc0 <WriteCmdParamN+0x340>)
 8001c34:	619a      	str	r2, [r3, #24]
 8001c36:	7b7b      	ldrb	r3, [r7, #13]
 8001c38:	019b      	lsls	r3, r3, #6
 8001c3a:	4a62      	ldr	r2, [pc, #392]	@ (8001dc4 <WriteCmdParamN+0x344>)
 8001c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c40:	6193      	str	r3, [r2, #24]
 8001c42:	2102      	movs	r1, #2
 8001c44:	485d      	ldr	r0, [pc, #372]	@ (8001dbc <WriteCmdParamN+0x33c>)
 8001c46:	f7ff fb67 	bl	8001318 <PIN_LOW>
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	485b      	ldr	r0, [pc, #364]	@ (8001dbc <WriteCmdParamN+0x33c>)
 8001c4e:	f7ff fb73 	bl	8001338 <PIN_HIGH>
 8001c52:	2102      	movs	r1, #2
 8001c54:	4859      	ldr	r0, [pc, #356]	@ (8001dbc <WriteCmdParamN+0x33c>)
 8001c56:	f7ff fb6f 	bl	8001338 <PIN_HIGH>
        if (N && is8347) {
 8001c5a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 809a 	beq.w	8001d98 <WriteCmdParamN+0x318>
 8001c64:	4b58      	ldr	r3, [pc, #352]	@ (8001dc8 <WriteCmdParamN+0x348>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 8095 	beq.w	8001d98 <WriteCmdParamN+0x318>
            cmd++;
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	3301      	adds	r3, #1
 8001c72:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 8001c74:	2110      	movs	r1, #16
 8001c76:	4851      	ldr	r0, [pc, #324]	@ (8001dbc <WriteCmdParamN+0x33c>)
 8001c78:	f7ff fb4e 	bl	8001318 <PIN_LOW>
 8001c7c:	88fb      	ldrh	r3, [r7, #6]
 8001c7e:	0a1b      	lsrs	r3, r3, #8
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	733b      	strb	r3, [r7, #12]
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	72fb      	strb	r3, [r7, #11]
 8001c88:	4b4c      	ldr	r3, [pc, #304]	@ (8001dbc <WriteCmdParamN+0x33c>)
 8001c8a:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001c8e:	619a      	str	r2, [r3, #24]
 8001c90:	4b4b      	ldr	r3, [pc, #300]	@ (8001dc0 <WriteCmdParamN+0x340>)
 8001c92:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001c96:	619a      	str	r2, [r3, #24]
 8001c98:	4b4a      	ldr	r3, [pc, #296]	@ (8001dc4 <WriteCmdParamN+0x344>)
 8001c9a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c9e:	619a      	str	r2, [r3, #24]
 8001ca0:	7b3b      	ldrb	r3, [r7, #12]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001ca8:	7b3b      	ldrb	r3, [r7, #12]
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	7b3b      	ldrb	r3, [r7, #12]
 8001cb4:	025b      	lsls	r3, r3, #9
 8001cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	4b3f      	ldr	r3, [pc, #252]	@ (8001dbc <WriteCmdParamN+0x33c>)
 8001cbe:	619a      	str	r2, [r3, #24]
 8001cc0:	7b3b      	ldrb	r3, [r7, #12]
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001cc8:	7b3b      	ldrb	r3, [r7, #12]
 8001cca:	105b      	asrs	r3, r3, #1
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	7b3b      	ldrb	r3, [r7, #12]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	7b3b      	ldrb	r3, [r7, #12]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	4b36      	ldr	r3, [pc, #216]	@ (8001dc0 <WriteCmdParamN+0x340>)
 8001ce6:	619a      	str	r2, [r3, #24]
 8001ce8:	7b3b      	ldrb	r3, [r7, #12]
 8001cea:	019b      	lsls	r3, r3, #6
 8001cec:	4a35      	ldr	r2, [pc, #212]	@ (8001dc4 <WriteCmdParamN+0x344>)
 8001cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf2:	6193      	str	r3, [r2, #24]
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	4831      	ldr	r0, [pc, #196]	@ (8001dbc <WriteCmdParamN+0x33c>)
 8001cf8:	f7ff fb0e 	bl	8001318 <PIN_LOW>
 8001cfc:	2102      	movs	r1, #2
 8001cfe:	482f      	ldr	r0, [pc, #188]	@ (8001dbc <WriteCmdParamN+0x33c>)
 8001d00:	f7ff fb1a 	bl	8001338 <PIN_HIGH>
 8001d04:	2102      	movs	r1, #2
 8001d06:	482d      	ldr	r0, [pc, #180]	@ (8001dbc <WriteCmdParamN+0x33c>)
 8001d08:	f7ff fb16 	bl	8001338 <PIN_HIGH>
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001dbc <WriteCmdParamN+0x33c>)
 8001d0e:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001d12:	619a      	str	r2, [r3, #24]
 8001d14:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc0 <WriteCmdParamN+0x340>)
 8001d16:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001d1a:	619a      	str	r2, [r3, #24]
 8001d1c:	4b29      	ldr	r3, [pc, #164]	@ (8001dc4 <WriteCmdParamN+0x344>)
 8001d1e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d22:	619a      	str	r2, [r3, #24]
 8001d24:	7afb      	ldrb	r3, [r7, #11]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001d2c:	7afb      	ldrb	r3, [r7, #11]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d34:	431a      	orrs	r2, r3
 8001d36:	7afb      	ldrb	r3, [r7, #11]
 8001d38:	025b      	lsls	r3, r3, #9
 8001d3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <WriteCmdParamN+0x33c>)
 8001d42:	619a      	str	r2, [r3, #24]
 8001d44:	7afb      	ldrb	r3, [r7, #11]
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001d4c:	7afb      	ldrb	r3, [r7, #11]
 8001d4e:	105b      	asrs	r3, r3, #1
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	431a      	orrs	r2, r3
 8001d56:	7afb      	ldrb	r3, [r7, #11]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	f003 0320 	and.w	r3, r3, #32
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	7afb      	ldrb	r3, [r7, #11]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	431a      	orrs	r2, r3
 8001d68:	4b15      	ldr	r3, [pc, #84]	@ (8001dc0 <WriteCmdParamN+0x340>)
 8001d6a:	619a      	str	r2, [r3, #24]
 8001d6c:	7afb      	ldrb	r3, [r7, #11]
 8001d6e:	019b      	lsls	r3, r3, #6
 8001d70:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <WriteCmdParamN+0x344>)
 8001d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d76:	6193      	str	r3, [r2, #24]
 8001d78:	2102      	movs	r1, #2
 8001d7a:	4810      	ldr	r0, [pc, #64]	@ (8001dbc <WriteCmdParamN+0x33c>)
 8001d7c:	f7ff facc 	bl	8001318 <PIN_LOW>
 8001d80:	2102      	movs	r1, #2
 8001d82:	480e      	ldr	r0, [pc, #56]	@ (8001dbc <WriteCmdParamN+0x33c>)
 8001d84:	f7ff fad8 	bl	8001338 <PIN_HIGH>
 8001d88:	2102      	movs	r1, #2
 8001d8a:	480c      	ldr	r0, [pc, #48]	@ (8001dbc <WriteCmdParamN+0x33c>)
 8001d8c:	f7ff fad4 	bl	8001338 <PIN_HIGH>
 8001d90:	2110      	movs	r1, #16
 8001d92:	480a      	ldr	r0, [pc, #40]	@ (8001dbc <WriteCmdParamN+0x33c>)
 8001d94:	f7ff fad0 	bl	8001338 <PIN_HIGH>
    while (N-- > 0) {
 8001d98:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	3a01      	subs	r2, #1
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	717a      	strb	r2, [r7, #5]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f73f af11 	bgt.w	8001bcc <WriteCmdParamN+0x14c>
        }
    }
    CS_IDLE;
 8001daa:	2101      	movs	r1, #1
 8001dac:	4804      	ldr	r0, [pc, #16]	@ (8001dc0 <WriteCmdParamN+0x340>)
 8001dae:	f7ff fac3 	bl	8001338 <PIN_HIGH>
}
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40020000 	.word	0x40020000
 8001dc0:	40020400 	.word	0x40020400
 8001dc4:	40020800 	.word	0x40020800
 8001dc8:	20000156 	.word	0x20000156

08001dcc <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	4608      	mov	r0, r1
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4623      	mov	r3, r4
 8001ddc:	71fb      	strb	r3, [r7, #7]
 8001dde:	4603      	mov	r3, r0
 8001de0:	71bb      	strb	r3, [r7, #6]
 8001de2:	460b      	mov	r3, r1
 8001de4:	717b      	strb	r3, [r7, #5]
 8001de6:	4613      	mov	r3, r2
 8001de8:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8001dea:	79bb      	ldrb	r3, [r7, #6]
 8001dec:	733b      	strb	r3, [r7, #12]
 8001dee:	797b      	ldrb	r3, [r7, #5]
 8001df0:	737b      	strb	r3, [r7, #13]
 8001df2:	793b      	ldrb	r3, [r7, #4]
 8001df4:	73bb      	strb	r3, [r7, #14]
 8001df6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dfa:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	f107 020c 	add.w	r2, r7, #12
 8001e04:	2104      	movs	r1, #4
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fe3a 	bl	8001a80 <WriteCmdParamN>
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd90      	pop	{r4, r7, pc}

08001e14 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	@ 0x28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	627b      	str	r3, [r7, #36]	@ 0x24

    while (size > 0)
 8001e24:	e046      	b.n	8001eb4 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        uint8_t len = pgm_read_byte(p++);
 8001e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (cmd == TFTLCD_DELAY8)
 8001e3e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001e42:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e44:	d108      	bne.n	8001e58 <init_table+0x44>
        {
            delay(len);
 8001e46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb52 	bl	80004f4 <delay>
            len = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001e56:	e024      	b.n	8001ea2 <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001e5e:	e010      	b.n	8001e82 <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8001e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e66:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001e6a:	7819      	ldrb	r1, [r3, #0]
 8001e6c:	f102 0328 	add.w	r3, r2, #40	@ 0x28
 8001e70:	443b      	add	r3, r7
 8001e72:	460a      	mov	r2, r1
 8001e74:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 8001e78:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001e82:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001e86:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d3e8      	bcc.n	8001e60 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 8001e8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	f997 1023 	ldrsb.w	r1, [r7, #35]	@ 0x23
 8001e98:	f107 0208 	add.w	r2, r7, #8
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fdef 	bl	8001a80 <WriteCmdParamN>
        }
        size -= len + 2;
 8001ea2:	887a      	ldrh	r2, [r7, #2]
 8001ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3b02      	subs	r3, #2
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 8001eb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	dcb4      	bgt.n	8001e26 <init_table+0x12>
    }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3728      	adds	r7, #40	@ 0x28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b084      	sub	sp, #16
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 8001ed6:	e01d      	b.n	8001f14 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1c9a      	adds	r2, r3, #2
 8001edc:	60fa      	str	r2, [r7, #12]
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1c9a      	adds	r2, r3, #2
 8001ee6:	60fa      	str	r2, [r7, #12]
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 8001eec:	897b      	ldrh	r3, [r7, #10]
 8001eee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d104      	bne.n	8001f00 <init_table16+0x3a>
            delay(d);
 8001ef6:	893b      	ldrh	r3, [r7, #8]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fafb 	bl	80004f4 <delay>
 8001efe:	e005      	b.n	8001f0c <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 8001f00:	893a      	ldrh	r2, [r7, #8]
 8001f02:	897b      	ldrh	r3, [r7, #10]
 8001f04:	4611      	mov	r1, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fc84 	bl	8001814 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 8001f14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	dcdd      	bgt.n	8001ed8 <init_table16+0x12>
    }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <reset>:



void reset(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
    done_reset = 1;
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fac <reset+0x84>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 8001f32:	f7ff fb59 	bl	80015e8 <setWriteDir>
    CTL_INIT();
 8001f36:	2101      	movs	r1, #1
 8001f38:	481d      	ldr	r0, [pc, #116]	@ (8001fb0 <reset+0x88>)
 8001f3a:	f7ff fa23 	bl	8001384 <PIN_OUTPUT>
 8001f3e:	2102      	movs	r1, #2
 8001f40:	481b      	ldr	r0, [pc, #108]	@ (8001fb0 <reset+0x88>)
 8001f42:	f7ff fa1f 	bl	8001384 <PIN_OUTPUT>
 8001f46:	2110      	movs	r1, #16
 8001f48:	4819      	ldr	r0, [pc, #100]	@ (8001fb0 <reset+0x88>)
 8001f4a:	f7ff fa1b 	bl	8001384 <PIN_OUTPUT>
 8001f4e:	2101      	movs	r1, #1
 8001f50:	4818      	ldr	r0, [pc, #96]	@ (8001fb4 <reset+0x8c>)
 8001f52:	f7ff fa17 	bl	8001384 <PIN_OUTPUT>
 8001f56:	2102      	movs	r1, #2
 8001f58:	4817      	ldr	r0, [pc, #92]	@ (8001fb8 <reset+0x90>)
 8001f5a:	f7ff fa13 	bl	8001384 <PIN_OUTPUT>
    CS_IDLE;
 8001f5e:	2101      	movs	r1, #1
 8001f60:	4814      	ldr	r0, [pc, #80]	@ (8001fb4 <reset+0x8c>)
 8001f62:	f7ff f9e9 	bl	8001338 <PIN_HIGH>
    RD_IDLE;
 8001f66:	2101      	movs	r1, #1
 8001f68:	4811      	ldr	r0, [pc, #68]	@ (8001fb0 <reset+0x88>)
 8001f6a:	f7ff f9e5 	bl	8001338 <PIN_HIGH>
    WR_IDLE;
 8001f6e:	2102      	movs	r1, #2
 8001f70:	480f      	ldr	r0, [pc, #60]	@ (8001fb0 <reset+0x88>)
 8001f72:	f7ff f9e1 	bl	8001338 <PIN_HIGH>
    RESET_IDLE;
 8001f76:	2102      	movs	r1, #2
 8001f78:	480f      	ldr	r0, [pc, #60]	@ (8001fb8 <reset+0x90>)
 8001f7a:	f7ff f9dd 	bl	8001338 <PIN_HIGH>
    delay(50);
 8001f7e:	2032      	movs	r0, #50	@ 0x32
 8001f80:	f7fe fab8 	bl	80004f4 <delay>
    RESET_ACTIVE;
 8001f84:	2102      	movs	r1, #2
 8001f86:	480c      	ldr	r0, [pc, #48]	@ (8001fb8 <reset+0x90>)
 8001f88:	f7ff f9c6 	bl	8001318 <PIN_LOW>
    delay(100);
 8001f8c:	2064      	movs	r0, #100	@ 0x64
 8001f8e:	f7fe fab1 	bl	80004f4 <delay>
    RESET_IDLE;
 8001f92:	2102      	movs	r1, #2
 8001f94:	4808      	ldr	r0, [pc, #32]	@ (8001fb8 <reset+0x90>)
 8001f96:	f7ff f9cf 	bl	8001338 <PIN_HIGH>
    delay(100);
 8001f9a:	2064      	movs	r0, #100	@ 0x64
 8001f9c:	f7fe faaa 	bl	80004f4 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	20b0      	movs	r0, #176	@ 0xb0
 8001fa4:	f7ff facd 	bl	8001542 <WriteCmdData>
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000155 	.word	0x20000155
 8001fb0:	40020000 	.word	0x40020000
 8001fb4:	40020400 	.word	0x40020400
 8001fb8:	40020800 	.word	0x40020800

08001fbc <read16bits>:

static uint16_t read16bits(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	4867      	ldr	r0, [pc, #412]	@ (8002164 <read16bits+0x1a8>)
 8001fc6:	f7ff f9b7 	bl	8001338 <PIN_HIGH>
 8001fca:	2101      	movs	r1, #1
 8001fcc:	4865      	ldr	r0, [pc, #404]	@ (8002164 <read16bits+0x1a8>)
 8001fce:	f7ff f9a3 	bl	8001318 <PIN_LOW>
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	4863      	ldr	r0, [pc, #396]	@ (8002164 <read16bits+0x1a8>)
 8001fd6:	f7ff f99f 	bl	8001318 <PIN_LOW>
 8001fda:	2101      	movs	r1, #1
 8001fdc:	4861      	ldr	r0, [pc, #388]	@ (8002164 <read16bits+0x1a8>)
 8001fde:	f7ff f99b 	bl	8001318 <PIN_LOW>
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	485f      	ldr	r0, [pc, #380]	@ (8002164 <read16bits+0x1a8>)
 8001fe6:	f7ff f997 	bl	8001318 <PIN_LOW>
 8001fea:	4b5e      	ldr	r3, [pc, #376]	@ (8002164 <read16bits+0x1a8>)
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	085b      	lsrs	r3, r3, #1
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8002164 <read16bits+0x1a8>)
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	0a5b      	lsrs	r3, r3, #9
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	b29b      	uxth	r3, r3
 8002006:	4313      	orrs	r3, r2
 8002008:	b29a      	uxth	r2, r3
 800200a:	4b56      	ldr	r3, [pc, #344]	@ (8002164 <read16bits+0x1a8>)
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	b29b      	uxth	r3, r3
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	b29b      	uxth	r3, r3
 8002018:	4313      	orrs	r3, r2
 800201a:	b29a      	uxth	r2, r3
 800201c:	4b52      	ldr	r3, [pc, #328]	@ (8002168 <read16bits+0x1ac>)
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	b29b      	uxth	r3, r3
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	b29b      	uxth	r3, r3
 8002028:	4313      	orrs	r3, r2
 800202a:	b29a      	uxth	r2, r3
 800202c:	4b4e      	ldr	r3, [pc, #312]	@ (8002168 <read16bits+0x1ac>)
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	b29b      	uxth	r3, r3
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	b29b      	uxth	r3, r3
 8002036:	f003 0320 	and.w	r3, r3, #32
 800203a:	b29b      	uxth	r3, r3
 800203c:	4313      	orrs	r3, r2
 800203e:	b29a      	uxth	r2, r3
 8002040:	4b49      	ldr	r3, [pc, #292]	@ (8002168 <read16bits+0x1ac>)
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	085b      	lsrs	r3, r3, #1
 8002046:	b29b      	uxth	r3, r3
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	b29b      	uxth	r3, r3
 800204e:	4313      	orrs	r3, r2
 8002050:	b29a      	uxth	r2, r3
 8002052:	4b45      	ldr	r3, [pc, #276]	@ (8002168 <read16bits+0x1ac>)
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	091b      	lsrs	r3, r3, #4
 8002058:	b29b      	uxth	r3, r3
 800205a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800205e:	b29b      	uxth	r3, r3
 8002060:	4313      	orrs	r3, r2
 8002062:	b29a      	uxth	r2, r3
 8002064:	4b41      	ldr	r3, [pc, #260]	@ (800216c <read16bits+0x1b0>)
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	099b      	lsrs	r3, r3, #6
 800206a:	b29b      	uxth	r3, r3
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	b29b      	uxth	r3, r3
 8002072:	4313      	orrs	r3, r2
 8002074:	80fb      	strh	r3, [r7, #6]
 8002076:	2101      	movs	r1, #1
 8002078:	483a      	ldr	r0, [pc, #232]	@ (8002164 <read16bits+0x1a8>)
 800207a:	f7ff f95d 	bl	8001338 <PIN_HIGH>
 800207e:	2101      	movs	r1, #1
 8002080:	4838      	ldr	r0, [pc, #224]	@ (8002164 <read16bits+0x1a8>)
 8002082:	f7ff f959 	bl	8001338 <PIN_HIGH>
    READ_8(lo);
 8002086:	2101      	movs	r1, #1
 8002088:	4836      	ldr	r0, [pc, #216]	@ (8002164 <read16bits+0x1a8>)
 800208a:	f7ff f955 	bl	8001338 <PIN_HIGH>
 800208e:	2101      	movs	r1, #1
 8002090:	4834      	ldr	r0, [pc, #208]	@ (8002164 <read16bits+0x1a8>)
 8002092:	f7ff f941 	bl	8001318 <PIN_LOW>
 8002096:	2101      	movs	r1, #1
 8002098:	4832      	ldr	r0, [pc, #200]	@ (8002164 <read16bits+0x1a8>)
 800209a:	f7ff f93d 	bl	8001318 <PIN_LOW>
 800209e:	2101      	movs	r1, #1
 80020a0:	4830      	ldr	r0, [pc, #192]	@ (8002164 <read16bits+0x1a8>)
 80020a2:	f7ff f939 	bl	8001318 <PIN_LOW>
 80020a6:	2101      	movs	r1, #1
 80020a8:	482e      	ldr	r0, [pc, #184]	@ (8002164 <read16bits+0x1a8>)
 80020aa:	f7ff f935 	bl	8001318 <PIN_LOW>
 80020ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002164 <read16bits+0x1a8>)
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	085b      	lsrs	r3, r3, #1
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	4b29      	ldr	r3, [pc, #164]	@ (8002164 <read16bits+0x1a8>)
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	0a5b      	lsrs	r3, r3, #9
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	4313      	orrs	r3, r2
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4b25      	ldr	r3, [pc, #148]	@ (8002164 <read16bits+0x1a8>)
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	0a1b      	lsrs	r3, r3, #8
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	4313      	orrs	r3, r2
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	4b21      	ldr	r3, [pc, #132]	@ (8002168 <read16bits+0x1ac>)
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002168 <read16bits+0x1ac>)
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	4313      	orrs	r3, r2
 8002102:	b2da      	uxtb	r2, r3
 8002104:	4b18      	ldr	r3, [pc, #96]	@ (8002168 <read16bits+0x1ac>)
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	085b      	lsrs	r3, r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	b2db      	uxtb	r3, r3
 8002112:	4313      	orrs	r3, r2
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4b14      	ldr	r3, [pc, #80]	@ (8002168 <read16bits+0x1ac>)
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	091b      	lsrs	r3, r3, #4
 800211c:	b2db      	uxtb	r3, r3
 800211e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002122:	b2db      	uxtb	r3, r3
 8002124:	4313      	orrs	r3, r2
 8002126:	b2da      	uxtb	r2, r3
 8002128:	4b10      	ldr	r3, [pc, #64]	@ (800216c <read16bits+0x1b0>)
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	099b      	lsrs	r3, r3, #6
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	b2db      	uxtb	r3, r3
 8002136:	4313      	orrs	r3, r2
 8002138:	717b      	strb	r3, [r7, #5]
 800213a:	2101      	movs	r1, #1
 800213c:	4809      	ldr	r0, [pc, #36]	@ (8002164 <read16bits+0x1a8>)
 800213e:	f7ff f8fb 	bl	8001338 <PIN_HIGH>
 8002142:	2101      	movs	r1, #1
 8002144:	4807      	ldr	r0, [pc, #28]	@ (8002164 <read16bits+0x1a8>)
 8002146:	f7ff f8f7 	bl	8001338 <PIN_HIGH>
    return (ret << 8) | lo;
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b21a      	sxth	r2, r3
 8002150:	797b      	ldrb	r3, [r7, #5]
 8002152:	b21b      	sxth	r3, r3
 8002154:	4313      	orrs	r3, r2
 8002156:	b21b      	sxth	r3, r3
 8002158:	b29b      	uxth	r3, r3
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40020000 	.word	0x40020000
 8002168:	40020400 	.word	0x40020400
 800216c:	40020800 	.word	0x40020800

08002170 <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	460a      	mov	r2, r1
 800217a:	80fb      	strh	r3, [r7, #6]
 800217c:	4613      	mov	r3, r2
 800217e:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8002180:	4b5d      	ldr	r3, [pc, #372]	@ (80022f8 <readReg+0x188>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <readReg+0x1c>
        reset();
 8002188:	f7ff fece 	bl	8001f28 <reset>
    CS_ACTIVE;
 800218c:	2101      	movs	r1, #1
 800218e:	485b      	ldr	r0, [pc, #364]	@ (80022fc <readReg+0x18c>)
 8002190:	f7ff f8c2 	bl	8001318 <PIN_LOW>
    WriteCmd(reg);
 8002194:	2110      	movs	r1, #16
 8002196:	485a      	ldr	r0, [pc, #360]	@ (8002300 <readReg+0x190>)
 8002198:	f7ff f8be 	bl	8001318 <PIN_LOW>
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	88fb      	ldrh	r3, [r7, #6]
 80021a6:	73bb      	strb	r3, [r7, #14]
 80021a8:	4b55      	ldr	r3, [pc, #340]	@ (8002300 <readReg+0x190>)
 80021aa:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80021ae:	619a      	str	r2, [r3, #24]
 80021b0:	4b52      	ldr	r3, [pc, #328]	@ (80022fc <readReg+0x18c>)
 80021b2:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80021b6:	619a      	str	r2, [r3, #24]
 80021b8:	4b52      	ldr	r3, [pc, #328]	@ (8002304 <readReg+0x194>)
 80021ba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80021be:	619a      	str	r2, [r3, #24]
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d0:	431a      	orrs	r2, r3
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	025b      	lsls	r3, r3, #9
 80021d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021da:	431a      	orrs	r2, r3
 80021dc:	4b48      	ldr	r3, [pc, #288]	@ (8002300 <readReg+0x190>)
 80021de:	619a      	str	r2, [r3, #24]
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	105b      	asrs	r3, r3, #1
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	431a      	orrs	r2, r3
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	431a      	orrs	r2, r3
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	431a      	orrs	r2, r3
 8002204:	4b3d      	ldr	r3, [pc, #244]	@ (80022fc <readReg+0x18c>)
 8002206:	619a      	str	r2, [r3, #24]
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	019b      	lsls	r3, r3, #6
 800220c:	4a3d      	ldr	r2, [pc, #244]	@ (8002304 <readReg+0x194>)
 800220e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002212:	6193      	str	r3, [r2, #24]
 8002214:	2102      	movs	r1, #2
 8002216:	483a      	ldr	r0, [pc, #232]	@ (8002300 <readReg+0x190>)
 8002218:	f7ff f87e 	bl	8001318 <PIN_LOW>
 800221c:	2102      	movs	r1, #2
 800221e:	4838      	ldr	r0, [pc, #224]	@ (8002300 <readReg+0x190>)
 8002220:	f7ff f88a 	bl	8001338 <PIN_HIGH>
 8002224:	2102      	movs	r1, #2
 8002226:	4836      	ldr	r0, [pc, #216]	@ (8002300 <readReg+0x190>)
 8002228:	f7ff f886 	bl	8001338 <PIN_HIGH>
 800222c:	4b34      	ldr	r3, [pc, #208]	@ (8002300 <readReg+0x190>)
 800222e:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8002232:	619a      	str	r2, [r3, #24]
 8002234:	4b31      	ldr	r3, [pc, #196]	@ (80022fc <readReg+0x18c>)
 8002236:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 800223a:	619a      	str	r2, [r3, #24]
 800223c:	4b31      	ldr	r3, [pc, #196]	@ (8002304 <readReg+0x194>)
 800223e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002242:	619a      	str	r2, [r3, #24]
 8002244:	7bbb      	ldrb	r3, [r7, #14]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800224c:	7bbb      	ldrb	r3, [r7, #14]
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002254:	431a      	orrs	r2, r3
 8002256:	7bbb      	ldrb	r3, [r7, #14]
 8002258:	025b      	lsls	r3, r3, #9
 800225a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800225e:	431a      	orrs	r2, r3
 8002260:	4b27      	ldr	r3, [pc, #156]	@ (8002300 <readReg+0x190>)
 8002262:	619a      	str	r2, [r3, #24]
 8002264:	7bbb      	ldrb	r3, [r7, #14]
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800226c:	7bbb      	ldrb	r3, [r7, #14]
 800226e:	105b      	asrs	r3, r3, #1
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	431a      	orrs	r2, r3
 8002276:	7bbb      	ldrb	r3, [r7, #14]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	f003 0320 	and.w	r3, r3, #32
 800227e:	431a      	orrs	r2, r3
 8002280:	7bbb      	ldrb	r3, [r7, #14]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	431a      	orrs	r2, r3
 8002288:	4b1c      	ldr	r3, [pc, #112]	@ (80022fc <readReg+0x18c>)
 800228a:	619a      	str	r2, [r3, #24]
 800228c:	7bbb      	ldrb	r3, [r7, #14]
 800228e:	019b      	lsls	r3, r3, #6
 8002290:	4a1c      	ldr	r2, [pc, #112]	@ (8002304 <readReg+0x194>)
 8002292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002296:	6193      	str	r3, [r2, #24]
 8002298:	2102      	movs	r1, #2
 800229a:	4819      	ldr	r0, [pc, #100]	@ (8002300 <readReg+0x190>)
 800229c:	f7ff f83c 	bl	8001318 <PIN_LOW>
 80022a0:	2102      	movs	r1, #2
 80022a2:	4817      	ldr	r0, [pc, #92]	@ (8002300 <readReg+0x190>)
 80022a4:	f7ff f848 	bl	8001338 <PIN_HIGH>
 80022a8:	2102      	movs	r1, #2
 80022aa:	4815      	ldr	r0, [pc, #84]	@ (8002300 <readReg+0x190>)
 80022ac:	f7ff f844 	bl	8001338 <PIN_HIGH>
 80022b0:	2110      	movs	r1, #16
 80022b2:	4813      	ldr	r0, [pc, #76]	@ (8002300 <readReg+0x190>)
 80022b4:	f7ff f840 	bl	8001338 <PIN_HIGH>
    setReadDir();
 80022b8:	f7ff f968 	bl	800158c <setReadDir>
    delay(1);    //1us should be adequate
 80022bc:	2001      	movs	r0, #1
 80022be:	f7fe f919 	bl	80004f4 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 80022c2:	f7ff fe7b 	bl	8001fbc <read16bits>
 80022c6:	4603      	mov	r3, r0
 80022c8:	81bb      	strh	r3, [r7, #12]
 80022ca:	797b      	ldrb	r3, [r7, #5]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	717b      	strb	r3, [r7, #5]
 80022d2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	daf3      	bge.n	80022c2 <readReg+0x152>
    RD_IDLE;
 80022da:	2101      	movs	r1, #1
 80022dc:	4808      	ldr	r0, [pc, #32]	@ (8002300 <readReg+0x190>)
 80022de:	f7ff f82b 	bl	8001338 <PIN_HIGH>
    CS_IDLE;
 80022e2:	2101      	movs	r1, #1
 80022e4:	4805      	ldr	r0, [pc, #20]	@ (80022fc <readReg+0x18c>)
 80022e6:	f7ff f827 	bl	8001338 <PIN_HIGH>
    setWriteDir();
 80022ea:	f7ff f97d 	bl	80015e8 <setWriteDir>
    return ret;
 80022ee:	89bb      	ldrh	r3, [r7, #12]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000155 	.word	0x20000155
 80022fc:	40020400 	.word	0x40020400
 8002300:	40020000 	.word	0x40020000
 8002304:	40020800 	.word	0x40020800

08002308 <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff ff2a 	bl	8002170 <readReg>
 800231c:	4603      	mov	r3, r0
 800231e:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8002320:	88fb      	ldrh	r3, [r7, #6]
 8002322:	2101      	movs	r1, #1
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff23 	bl	8002170 <readReg>
 800232a:	4603      	mov	r3, r0
 800232c:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 800232e:	89fb      	ldrh	r3, [r7, #14]
 8002330:	041a      	lsls	r2, r3, #16
 8002332:	89bb      	ldrh	r3, [r7, #12]
 8002334:	4313      	orrs	r3, r2
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff0f 	bl	8002170 <readReg>
 8002352:	4603      	mov	r3, r0
 8002354:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	2101      	movs	r1, #1
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff ff08 	bl	8002170 <readReg>
 8002360:	4603      	mov	r3, r0
 8002362:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	2102      	movs	r1, #2
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff01 	bl	8002170 <readReg>
 800236e:	4603      	mov	r3, r0
 8002370:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8002372:	89fb      	ldrh	r3, [r7, #14]
 8002374:	061a      	lsls	r2, r3, #24
 8002376:	89bb      	ldrh	r3, [r7, #12]
 8002378:	021b      	lsls	r3, r3, #8
 800237a:	4313      	orrs	r3, r2
 800237c:	897a      	ldrh	r2, [r7, #10]
 800237e:	0a12      	lsrs	r2, r2, #8
 8002380:	b292      	uxth	r2, r2
 8002382:	4313      	orrs	r3, r2
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <tft_init>:


void tft_init(uint16_t ID)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 800239e:	4bd3      	ldr	r3, [pc, #844]	@ (80026ec <tft_init+0x360>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 80023a4:	4ad2      	ldr	r2, [pc, #840]	@ (80026f0 <tft_init+0x364>)
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	8013      	strh	r3, [r2, #0]
 80023aa:	4bd1      	ldr	r3, [pc, #836]	@ (80026f0 <tft_init+0x364>)
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	f24c 5205 	movw	r2, #50437	@ 0xc505
 80023b2:	4293      	cmp	r3, r2
 80023b4:	f000 8304 	beq.w	80029c0 <tft_init+0x634>
 80023b8:	f24c 5205 	movw	r2, #50437	@ 0xc505
 80023bc:	4293      	cmp	r3, r2
 80023be:	f300 8317 	bgt.w	80029f0 <tft_init+0x664>
 80023c2:	f24b 5209 	movw	r2, #46345	@ 0xb509
 80023c6:	4293      	cmp	r3, r2
 80023c8:	f000 8303 	beq.w	80029d2 <tft_init+0x646>
 80023cc:	f24b 5209 	movw	r2, #46345	@ 0xb509
 80023d0:	4293      	cmp	r3, r2
 80023d2:	f300 830d 	bgt.w	80029f0 <tft_init+0x664>
 80023d6:	f24b 5205 	movw	r2, #46341	@ 0xb505
 80023da:	4293      	cmp	r3, r2
 80023dc:	f000 82f0 	beq.w	80029c0 <tft_init+0x634>
 80023e0:	f24b 5205 	movw	r2, #46341	@ 0xb505
 80023e4:	4293      	cmp	r3, r2
 80023e6:	f300 8303 	bgt.w	80029f0 <tft_init+0x664>
 80023ea:	f64a 4211 	movw	r2, #44049	@ 0xac11
 80023ee:	4293      	cmp	r3, r2
 80023f0:	f000 8237 	beq.w	8002862 <tft_init+0x4d6>
 80023f4:	f64a 4211 	movw	r2, #44049	@ 0xac11
 80023f8:	4293      	cmp	r3, r2
 80023fa:	f300 82f9 	bgt.w	80029f0 <tft_init+0x664>
 80023fe:	f249 4288 	movw	r2, #38024	@ 0x9488
 8002402:	4293      	cmp	r3, r2
 8002404:	f300 82f4 	bgt.w	80029f0 <tft_init+0x664>
 8002408:	f249 4287 	movw	r2, #38023	@ 0x9487
 800240c:	4293      	cmp	r3, r2
 800240e:	f280 829a 	bge.w	8002946 <tft_init+0x5ba>
 8002412:	f249 4286 	movw	r2, #38022	@ 0x9486
 8002416:	4293      	cmp	r3, r2
 8002418:	f000 827b 	beq.w	8002912 <tft_init+0x586>
 800241c:	f249 4286 	movw	r2, #38022	@ 0x9486
 8002420:	4293      	cmp	r3, r2
 8002422:	f300 82e5 	bgt.w	80029f0 <tft_init+0x664>
 8002426:	f249 4281 	movw	r2, #38017	@ 0x9481
 800242a:	4293      	cmp	r3, r2
 800242c:	f000 825a 	beq.w	80028e4 <tft_init+0x558>
 8002430:	f249 4281 	movw	r2, #38017	@ 0x9481
 8002434:	4293      	cmp	r3, r2
 8002436:	f300 82db 	bgt.w	80029f0 <tft_init+0x664>
 800243a:	f249 3242 	movw	r2, #37698	@ 0x9342
 800243e:	4293      	cmp	r3, r2
 8002440:	f300 82d6 	bgt.w	80029f0 <tft_init+0x664>
 8002444:	f249 3202 	movw	r2, #37634	@ 0x9302
 8002448:	4293      	cmp	r3, r2
 800244a:	f280 80a5 	bge.w	8002598 <tft_init+0x20c>
 800244e:	f249 0290 	movw	r2, #37008	@ 0x9090
 8002452:	4293      	cmp	r3, r2
 8002454:	f000 818d 	beq.w	8002772 <tft_init+0x3e6>
 8002458:	f249 0290 	movw	r2, #37008	@ 0x9090
 800245c:	4293      	cmp	r3, r2
 800245e:	f300 82c7 	bgt.w	80029f0 <tft_init+0x664>
 8002462:	f248 3257 	movw	r2, #33623	@ 0x8357
 8002466:	4293      	cmp	r3, r2
 8002468:	f000 817e 	beq.w	8002768 <tft_init+0x3dc>
 800246c:	f248 3257 	movw	r2, #33623	@ 0x8357
 8002470:	4293      	cmp	r3, r2
 8002472:	f300 82bd 	bgt.w	80029f0 <tft_init+0x664>
 8002476:	f248 0231 	movw	r2, #32817	@ 0x8031
 800247a:	4293      	cmp	r3, r2
 800247c:	f000 816b 	beq.w	8002756 <tft_init+0x3ca>
 8002480:	f248 0231 	movw	r2, #32817	@ 0x8031
 8002484:	4293      	cmp	r3, r2
 8002486:	f300 82b3 	bgt.w	80029f0 <tft_init+0x664>
 800248a:	f247 7296 	movw	r2, #30614	@ 0x7796
 800248e:	4293      	cmp	r3, r2
 8002490:	f000 8254 	beq.w	800293c <tft_init+0x5b0>
 8002494:	f247 7296 	movw	r2, #30614	@ 0x7796
 8002498:	4293      	cmp	r3, r2
 800249a:	f300 82a9 	bgt.w	80029f0 <tft_init+0x664>
 800249e:	f247 7293 	movw	r2, #30611	@ 0x7793
 80024a2:	4293      	cmp	r3, r2
 80024a4:	f000 8295 	beq.w	80029d2 <tft_init+0x646>
 80024a8:	f247 7293 	movw	r2, #30611	@ 0x7793
 80024ac:	4293      	cmp	r3, r2
 80024ae:	f300 829f 	bgt.w	80029f0 <tft_init+0x664>
 80024b2:	f247 7289 	movw	r2, #30601	@ 0x7789
 80024b6:	4293      	cmp	r3, r2
 80024b8:	f000 8144 	beq.w	8002744 <tft_init+0x3b8>
 80024bc:	f247 7289 	movw	r2, #30601	@ 0x7789
 80024c0:	4293      	cmp	r3, r2
 80024c2:	f300 8295 	bgt.w	80029f0 <tft_init+0x664>
 80024c6:	f646 0209 	movw	r2, #26633	@ 0x6809
 80024ca:	4293      	cmp	r3, r2
 80024cc:	f000 8192 	beq.w	80027f4 <tft_init+0x468>
 80024d0:	f646 0209 	movw	r2, #26633	@ 0x6809
 80024d4:	4293      	cmp	r3, r2
 80024d6:	f300 828b 	bgt.w	80029f0 <tft_init+0x664>
 80024da:	f245 4208 	movw	r2, #21512	@ 0x5408
 80024de:	4293      	cmp	r3, r2
 80024e0:	f000 8178 	beq.w	80027d4 <tft_init+0x448>
 80024e4:	f245 4208 	movw	r2, #21512	@ 0x5408
 80024e8:	4293      	cmp	r3, r2
 80024ea:	f300 8281 	bgt.w	80029f0 <tft_init+0x664>
 80024ee:	f245 3210 	movw	r2, #21264	@ 0x5310
 80024f2:	4293      	cmp	r3, r2
 80024f4:	f000 8111 	beq.w	800271a <tft_init+0x38e>
 80024f8:	f245 3210 	movw	r2, #21264	@ 0x5310
 80024fc:	4293      	cmp	r3, r2
 80024fe:	f300 8277 	bgt.w	80029f0 <tft_init+0x664>
 8002502:	f242 0253 	movw	r2, #8275	@ 0x2053
 8002506:	4293      	cmp	r3, r2
 8002508:	f000 81a6 	beq.w	8002858 <tft_init+0x4cc>
 800250c:	f242 0253 	movw	r2, #8275	@ 0x2053
 8002510:	4293      	cmp	r3, r2
 8002512:	f300 826d 	bgt.w	80029f0 <tft_init+0x664>
 8002516:	f241 6202 	movw	r2, #5634	@ 0x1602
 800251a:	4293      	cmp	r3, r2
 800251c:	f000 8193 	beq.w	8002846 <tft_init+0x4ba>
 8002520:	f241 6202 	movw	r2, #5634	@ 0x1602
 8002524:	4293      	cmp	r3, r2
 8002526:	f300 8263 	bgt.w	80029f0 <tft_init+0x664>
 800252a:	f241 5281 	movw	r2, #5505	@ 0x1581
 800252e:	4293      	cmp	r3, r2
 8002530:	f000 81d3 	beq.w	80028da <tft_init+0x54e>
 8002534:	f241 5281 	movw	r2, #5505	@ 0x1581
 8002538:	4293      	cmp	r3, r2
 800253a:	f300 8259 	bgt.w	80029f0 <tft_init+0x664>
 800253e:	f241 5226 	movw	r2, #5414	@ 0x1526
 8002542:	4293      	cmp	r3, r2
 8002544:	f000 80e0 	beq.w	8002708 <tft_init+0x37c>
 8002548:	f241 5226 	movw	r2, #5414	@ 0x1526
 800254c:	4293      	cmp	r3, r2
 800254e:	f300 824f 	bgt.w	80029f0 <tft_init+0x664>
 8002552:	f5b3 5fa9 	cmp.w	r3, #5408	@ 0x1520
 8002556:	f000 80bf 	beq.w	80026d8 <tft_init+0x34c>
 800255a:	f5b3 5fa9 	cmp.w	r3, #5408	@ 0x1520
 800255e:	f300 8247 	bgt.w	80029f0 <tft_init+0x664>
 8002562:	f241 5211 	movw	r2, #5393	@ 0x1511
 8002566:	4293      	cmp	r3, r2
 8002568:	f000 80a2 	beq.w	80026b0 <tft_init+0x324>
 800256c:	f241 5211 	movw	r2, #5393	@ 0x1511
 8002570:	4293      	cmp	r3, r2
 8002572:	f300 823d 	bgt.w	80029f0 <tft_init+0x664>
 8002576:	f241 5205 	movw	r2, #5381	@ 0x1505
 800257a:	4293      	cmp	r3, r2
 800257c:	f000 812f 	beq.w	80027de <tft_init+0x452>
 8002580:	f241 5205 	movw	r2, #5381	@ 0x1505
 8002584:	4293      	cmp	r3, r2
 8002586:	f300 8233 	bgt.w	80029f0 <tft_init+0x664>
 800258a:	2b01      	cmp	r3, #1
 800258c:	f000 811d 	beq.w	80027ca <tft_init+0x43e>
 8002590:	2b99      	cmp	r3, #153	@ 0x99
 8002592:	f000 8105 	beq.w	80027a0 <tft_init+0x414>
 8002596:	e22b      	b.n	80029f0 <tft_init+0x664>
 8002598:	f5a3 4313 	sub.w	r3, r3, #37632	@ 0x9300
 800259c:	3b02      	subs	r3, #2
 800259e:	2b40      	cmp	r3, #64	@ 0x40
 80025a0:	f200 8226 	bhi.w	80029f0 <tft_init+0x664>
 80025a4:	a201      	add	r2, pc, #4	@ (adr r2, 80025ac <tft_init+0x220>)
 80025a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025aa:	bf00      	nop
 80025ac:	0800286d 	.word	0x0800286d
 80025b0:	080029f1 	.word	0x080029f1
 80025b4:	080029f1 	.word	0x080029f1
 80025b8:	080029f1 	.word	0x080029f1
 80025bc:	080029f1 	.word	0x080029f1
 80025c0:	080029f1 	.word	0x080029f1
 80025c4:	080029f1 	.word	0x080029f1
 80025c8:	080029f1 	.word	0x080029f1
 80025cc:	080029f1 	.word	0x080029f1
 80025d0:	080029f1 	.word	0x080029f1
 80025d4:	080029f1 	.word	0x080029f1
 80025d8:	080029f1 	.word	0x080029f1
 80025dc:	080029f1 	.word	0x080029f1
 80025e0:	080029f1 	.word	0x080029f1
 80025e4:	080029f1 	.word	0x080029f1
 80025e8:	080029f1 	.word	0x080029f1
 80025ec:	080029f1 	.word	0x080029f1
 80025f0:	080029f1 	.word	0x080029f1
 80025f4:	080029f1 	.word	0x080029f1
 80025f8:	080029f1 	.word	0x080029f1
 80025fc:	080029f1 	.word	0x080029f1
 8002600:	080029f1 	.word	0x080029f1
 8002604:	080029f1 	.word	0x080029f1
 8002608:	080029f1 	.word	0x080029f1
 800260c:	080029f1 	.word	0x080029f1
 8002610:	080029f1 	.word	0x080029f1
 8002614:	080029f1 	.word	0x080029f1
 8002618:	080029f1 	.word	0x080029f1
 800261c:	080029f1 	.word	0x080029f1
 8002620:	080029f1 	.word	0x080029f1
 8002624:	080027df 	.word	0x080027df
 8002628:	080029f1 	.word	0x080029f1
 800262c:	080029f1 	.word	0x080029f1
 8002630:	080029f1 	.word	0x080029f1
 8002634:	080029f1 	.word	0x080029f1
 8002638:	080027ff 	.word	0x080027ff
 800263c:	080029f1 	.word	0x080029f1
 8002640:	0800281f 	.word	0x0800281f
 8002644:	080027ff 	.word	0x080027ff
 8002648:	08002881 	.word	0x08002881
 800264c:	080029f1 	.word	0x080029f1
 8002650:	080029f1 	.word	0x080029f1
 8002654:	080029f1 	.word	0x080029f1
 8002658:	080029f1 	.word	0x080029f1
 800265c:	080029f1 	.word	0x080029f1
 8002660:	080029f1 	.word	0x080029f1
 8002664:	080029f1 	.word	0x080029f1
 8002668:	08002809 	.word	0x08002809
 800266c:	080029f1 	.word	0x080029f1
 8002670:	080029f1 	.word	0x080029f1
 8002674:	080029f1 	.word	0x080029f1
 8002678:	08002809 	.word	0x08002809
 800267c:	080029f1 	.word	0x080029f1
 8002680:	080029f1 	.word	0x080029f1
 8002684:	08002877 	.word	0x08002877
 8002688:	080029f1 	.word	0x080029f1
 800268c:	080029f1 	.word	0x080029f1
 8002690:	080029f1 	.word	0x080029f1
 8002694:	080029f1 	.word	0x080029f1
 8002698:	080029f1 	.word	0x080029f1
 800269c:	080029f1 	.word	0x080029f1
 80026a0:	080029f1 	.word	0x080029f1
 80026a4:	08002897 	.word	0x08002897
 80026a8:	080028a1 	.word	0x080028a1
 80026ac:	080028b3 	.word	0x080028b3
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 80026b0:	4b10      	ldr	r3, [pc, #64]	@ (80026f4 <tft_init+0x368>)
 80026b2:	2203      	movs	r2, #3
 80026b4:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 80026b6:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <tft_init+0x36c>)
 80026b8:	61fb      	str	r3, [r7, #28]
 80026ba:	2303      	movs	r3, #3
 80026bc:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80026be:	4b0f      	ldr	r3, [pc, #60]	@ (80026fc <tft_init+0x370>)
 80026c0:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80026c8:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80026ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002700 <tft_init+0x374>)
 80026cc:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80026d4:	801a      	strh	r2, [r3, #0]
        break;
 80026d6:	e191      	b.n	80029fc <tft_init+0x670>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80026d8:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <tft_init+0x368>)
 80026da:	f240 4213 	movw	r2, #1043	@ 0x413
 80026de:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 80026e0:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <tft_init+0x378>)
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	2306      	movs	r3, #6
 80026e6:	837b      	strh	r3, [r7, #26]
        break;
 80026e8:	e188      	b.n	80029fc <tft_init+0x670>
 80026ea:	bf00      	nop
 80026ec:	2000015a 	.word	0x2000015a
 80026f0:	2000015e 	.word	0x2000015e
 80026f4:	2000015c 	.word	0x2000015c
 80026f8:	08041b50 	.word	0x08041b50
 80026fc:	080013cd 	.word	0x080013cd
 8002700:	080013b5 	.word	0x080013b5
 8002704:	08041b54 	.word	0x08041b54

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002708:	4b9a      	ldr	r3, [pc, #616]	@ (8002974 <tft_init+0x5e8>)
 800270a:	f240 4213 	movw	r2, #1043	@ 0x413
 800270e:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 8002710:	4b99      	ldr	r3, [pc, #612]	@ (8002978 <tft_init+0x5ec>)
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	230c      	movs	r3, #12
 8002716:	837b      	strh	r3, [r7, #26]
        break;
 8002718:	e170      	b.n	80029fc <tft_init+0x670>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 800271a:	4b96      	ldr	r3, [pc, #600]	@ (8002974 <tft_init+0x5e8>)
 800271c:	f640 6213 	movw	r2, #3603	@ 0xe13
 8002720:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 8002722:	4b96      	ldr	r3, [pc, #600]	@ (800297c <tft_init+0x5f0>)
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	2302      	movs	r3, #2
 8002728:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800272a:	4b95      	ldr	r3, [pc, #596]	@ (8002980 <tft_init+0x5f4>)
 800272c:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002734:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002736:	4b93      	ldr	r3, [pc, #588]	@ (8002984 <tft_init+0x5f8>)
 8002738:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002740:	801a      	strh	r2, [r3, #0]
        break;
 8002742:	e15b      	b.n	80029fc <tft_init+0x670>
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002744:	4b8b      	ldr	r3, [pc, #556]	@ (8002974 <tft_init+0x5e8>)
 8002746:	f240 4213 	movw	r2, #1043	@ 0x413
 800274a:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 800274c:	4b8e      	ldr	r3, [pc, #568]	@ (8002988 <tft_init+0x5fc>)
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	2341      	movs	r3, #65	@ 0x41
 8002752:	837b      	strh	r3, [r7, #26]
        break;
 8002754:	e152      	b.n	80029fc <tft_init+0x670>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8002756:	4b87      	ldr	r3, [pc, #540]	@ (8002974 <tft_init+0x5e8>)
 8002758:	f241 4213 	movw	r2, #5139	@ 0x1413
 800275c:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 800275e:	4b8b      	ldr	r3, [pc, #556]	@ (800298c <tft_init+0x600>)
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	2312      	movs	r3, #18
 8002764:	837b      	strh	r3, [r7, #26]
        break;
 8002766:	e149      	b.n	80029fc <tft_init+0x670>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 8002768:	4b82      	ldr	r3, [pc, #520]	@ (8002974 <tft_init+0x5e8>)
 800276a:	f241 4203 	movw	r2, #5123	@ 0x1403
 800276e:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 8002770:	e003      	b.n	800277a <tft_init+0x3ee>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8002772:	4b80      	ldr	r3, [pc, #512]	@ (8002974 <tft_init+0x5e8>)
 8002774:	f241 4213 	movw	r2, #5139	@ 0x1413
 8002778:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 800277a:	2301      	movs	r3, #1
 800277c:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 800277e:	4b84      	ldr	r3, [pc, #528]	@ (8002990 <tft_init+0x604>)
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	2302      	movs	r3, #2
 8002784:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002786:	4b7e      	ldr	r3, [pc, #504]	@ (8002980 <tft_init+0x5f4>)
 8002788:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002790:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002792:	4b7c      	ldr	r3, [pc, #496]	@ (8002984 <tft_init+0x5f8>)
 8002794:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800279c:	801a      	strh	r2, [r3, #0]
        break;
 800279e:	e12d      	b.n	80029fc <tft_init+0x670>

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 80027a0:	4b74      	ldr	r3, [pc, #464]	@ (8002974 <tft_init+0x5e8>)
 80027a2:	f241 4213 	movw	r2, #5139	@ 0x1413
 80027a6:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 80027a8:	4b7a      	ldr	r3, [pc, #488]	@ (8002994 <tft_init+0x608>)
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	231d      	movs	r3, #29
 80027ae:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80027b0:	4b73      	ldr	r3, [pc, #460]	@ (8002980 <tft_init+0x5f4>)
 80027b2:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80027ba:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80027bc:	4b71      	ldr	r3, [pc, #452]	@ (8002984 <tft_init+0x5f8>)
 80027be:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80027c6:	801a      	strh	r2, [r3, #0]
        break;
 80027c8:	e118      	b.n	80029fc <tft_init+0x670>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 80027ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002974 <tft_init+0x5e8>)
 80027cc:	f44f 5288 	mov.w	r2, #4352	@ 0x1100
 80027d0:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 80027d2:	e008      	b.n	80027e6 <tft_init+0x45a>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 80027d4:	4b67      	ldr	r3, [pc, #412]	@ (8002974 <tft_init+0x5e8>)
 80027d6:	f241 0204 	movw	r2, #4100	@ 0x1004
 80027da:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 80027dc:	e003      	b.n	80027e6 <tft_init+0x45a>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 80027de:	4b65      	ldr	r3, [pc, #404]	@ (8002974 <tft_init+0x5e8>)
 80027e0:	f241 0204 	movw	r2, #4100	@ 0x1004
 80027e4:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 80027e6:	2301      	movs	r3, #1
 80027e8:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 80027ea:	21d8      	movs	r1, #216	@ 0xd8
 80027ec:	486a      	ldr	r0, [pc, #424]	@ (8002998 <tft_init+0x60c>)
 80027ee:	f7ff fb6a 	bl	8001ec6 <init_table16>
        break;
 80027f2:	e103      	b.n	80029fc <tft_init+0x670>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 80027f4:	4b5f      	ldr	r3, [pc, #380]	@ (8002974 <tft_init+0x5e8>)
 80027f6:	f241 1202 	movw	r2, #4354	@ 0x1102
 80027fa:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 80027fc:	e008      	b.n	8002810 <tft_init+0x484>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 80027fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002974 <tft_init+0x5e8>)
 8002800:	f44f 5288 	mov.w	r2, #4352	@ 0x1100
 8002804:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8002806:	e003      	b.n	8002810 <tft_init+0x484>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 8002808:	4b5a      	ldr	r3, [pc, #360]	@ (8002974 <tft_init+0x5e8>)
 800280a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800280e:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 8002810:	2301      	movs	r3, #1
 8002812:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 8002814:	21cc      	movs	r1, #204	@ 0xcc
 8002816:	4861      	ldr	r0, [pc, #388]	@ (800299c <tft_init+0x610>)
 8002818:	f7ff fb55 	bl	8001ec6 <init_table16>
        break;
 800281c:	e0ee      	b.n	80029fc <tft_init+0x670>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 800281e:	4b55      	ldr	r3, [pc, #340]	@ (8002974 <tft_init+0x5e8>)
 8002820:	f240 4203 	movw	r2, #1027	@ 0x403
 8002824:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 8002826:	4b5e      	ldr	r3, [pc, #376]	@ (80029a0 <tft_init+0x614>)
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	231e      	movs	r3, #30
 800282c:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800282e:	4b54      	ldr	r3, [pc, #336]	@ (8002980 <tft_init+0x5f4>)
 8002830:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002838:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800283a:	4b52      	ldr	r3, [pc, #328]	@ (8002984 <tft_init+0x5f8>)
 800283c:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	22f0      	movs	r2, #240	@ 0xf0
 8002842:	801a      	strh	r2, [r3, #0]
        break;
 8002844:	e0da      	b.n	80029fc <tft_init+0x670>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 8002846:	4b4b      	ldr	r3, [pc, #300]	@ (8002974 <tft_init+0x5e8>)
 8002848:	f240 4203 	movw	r2, #1027	@ 0x403
 800284c:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 800284e:	4b55      	ldr	r3, [pc, #340]	@ (80029a4 <tft_init+0x618>)
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	2306      	movs	r3, #6
 8002854:	837b      	strh	r3, [r7, #26]
        break;
 8002856:	e0d1      	b.n	80029fc <tft_init+0x670>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 8002858:	4b46      	ldr	r3, [pc, #280]	@ (8002974 <tft_init+0x5e8>)
 800285a:	f241 4217 	movw	r2, #5143	@ 0x1417
 800285e:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8002860:	e012      	b.n	8002888 <tft_init+0x4fc>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 8002862:	4b44      	ldr	r3, [pc, #272]	@ (8002974 <tft_init+0x5e8>)
 8002864:	f241 4213 	movw	r2, #5139	@ 0x1413
 8002868:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 800286a:	e00d      	b.n	8002888 <tft_init+0x4fc>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 800286c:	4b41      	ldr	r3, [pc, #260]	@ (8002974 <tft_init+0x5e8>)
 800286e:	f240 4203 	movw	r2, #1027	@ 0x403
 8002872:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8002874:	e008      	b.n	8002888 <tft_init+0x4fc>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002876:	4b3f      	ldr	r3, [pc, #252]	@ (8002974 <tft_init+0x5e8>)
 8002878:	f240 4213 	movw	r2, #1043	@ 0x413
 800287c:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 800287e:	e003      	b.n	8002888 <tft_init+0x4fc>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 8002880:	4b3c      	ldr	r3, [pc, #240]	@ (8002974 <tft_init+0x5e8>)
 8002882:	f241 6203 	movw	r2, #5635	@ 0x1603
 8002886:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 8002888:	2301      	movs	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 800288c:	4b46      	ldr	r3, [pc, #280]	@ (80029a8 <tft_init+0x61c>)
 800288e:	61fb      	str	r3, [r7, #28]
 8002890:	2303      	movs	r3, #3
 8002892:	837b      	strh	r3, [r7, #26]
        break;
 8002894:	e0b2      	b.n	80029fc <tft_init+0x670>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8002896:	4b37      	ldr	r3, [pc, #220]	@ (8002974 <tft_init+0x5e8>)
 8002898:	f241 4213 	movw	r2, #5139	@ 0x1413
 800289c:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 800289e:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80028a0:	4b34      	ldr	r3, [pc, #208]	@ (8002974 <tft_init+0x5e8>)
 80028a2:	f240 4213 	movw	r2, #1043	@ 0x413
 80028a6:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 80028a8:	4b40      	ldr	r3, [pc, #256]	@ (80029ac <tft_init+0x620>)
 80028aa:	61fb      	str	r3, [r7, #28]
 80028ac:	2365      	movs	r3, #101	@ 0x65
 80028ae:	837b      	strh	r3, [r7, #26]
        break;
 80028b0:	e0a4      	b.n	80029fc <tft_init+0x670>
#if defined(SUPPORT_9342)
    case 0x9342:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | INVERT_GS | REV_SCREEN;
 80028b2:	4b30      	ldr	r3, [pc, #192]	@ (8002974 <tft_init+0x5e8>)
 80028b4:	f241 5213 	movw	r2, #5395	@ 0x1513
 80028b8:	801a      	strh	r2, [r3, #0]
            (0xC7), 1, 0xA4,
            (0xB8), 1, 0x0B,
            (0xE0), 15, 0x0F, 0x24, 0x21, 0x0C, 0x0F, 0x06, 0x50, 0x75, 0x3F, 0x07, 0x12, 0x05, 0x11, 0x0B, 0x08,
            (0xE1), 15, 0x08, 0x1D, 0x20, 0x02, 0x0E, 0x04, 0x31, 0x24, 0x42, 0x03, 0x0B, 0x09, 0x30, 0x36, 0x0F,
        };
        table8_ads = ILI9342_regValues_CPT24, table_size = sizeof(ILI9342_regValues_CPT24);   //
 80028ba:	4b3d      	ldr	r3, [pc, #244]	@ (80029b0 <tft_init+0x624>)
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	2338      	movs	r3, #56	@ 0x38
 80028c0:	837b      	strh	r3, [r7, #26]
        //        table8_ads = ILI9342_regValues_Tianma23, table_size = sizeof(ILI9342_regValues_Tianma23);   //
        //        table8_ads = ILI9342_regValues_HSD23, table_size = sizeof(ILI9342_regValues_HSD23);   //
        p16 = (int16_t *) & height;
 80028c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002980 <tft_init+0x5f4>)
 80028c4:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	22f0      	movs	r2, #240	@ 0xf0
 80028ca:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80028cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002984 <tft_init+0x5f8>)
 80028ce:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80028d6:	801a      	strh	r2, [r3, #0]
        break;
 80028d8:	e090      	b.n	80029fc <tft_init+0x670>
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 80028da:	4b26      	ldr	r3, [pc, #152]	@ (8002974 <tft_init+0x5e8>)
 80028dc:	f240 4213 	movw	r2, #1043	@ 0x413
 80028e0:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 80028e2:	e003      	b.n	80028ec <tft_init+0x560>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 80028e4:	4b23      	ldr	r3, [pc, #140]	@ (8002974 <tft_init+0x5e8>)
 80028e6:	f240 4207 	movw	r2, #1031	@ 0x407
 80028ea:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 80028ec:	2301      	movs	r3, #1
 80028ee:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 80028f0:	4b30      	ldr	r3, [pc, #192]	@ (80029b4 <tft_init+0x628>)
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	2345      	movs	r3, #69	@ 0x45
 80028f6:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 80028f8:	4b21      	ldr	r3, [pc, #132]	@ (8002980 <tft_init+0x5f4>)
 80028fa:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002902:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002904:	4b1f      	ldr	r3, [pc, #124]	@ (8002984 <tft_init+0x5f8>)
 8002906:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800290e:	801a      	strh	r2, [r3, #0]
        break;
 8002910:	e074      	b.n	80029fc <tft_init+0x670>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 8002912:	4b18      	ldr	r3, [pc, #96]	@ (8002974 <tft_init+0x5e8>)
 8002914:	f240 4203 	movw	r2, #1027	@ 0x403
 8002918:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 800291a:	4b27      	ldr	r3, [pc, #156]	@ (80029b8 <tft_init+0x62c>)
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	233b      	movs	r3, #59	@ 0x3b
 8002920:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002922:	4b17      	ldr	r3, [pc, #92]	@ (8002980 <tft_init+0x5f4>)
 8002924:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800292c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800292e:	4b15      	ldr	r3, [pc, #84]	@ (8002984 <tft_init+0x5f8>)
 8002930:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002938:	801a      	strh	r2, [r3, #0]
        break;
 800293a:	e05f      	b.n	80029fc <tft_init+0x670>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 800293c:	4b0d      	ldr	r3, [pc, #52]	@ (8002974 <tft_init+0x5e8>)
 800293e:	f240 4203 	movw	r2, #1027	@ 0x403
 8002942:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 8002944:	e003      	b.n	800294e <tft_init+0x5c2>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002946:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <tft_init+0x5e8>)
 8002948:	f240 4213 	movw	r2, #1043	@ 0x413
 800294c:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 800294e:	2301      	movs	r3, #1
 8002950:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 8002952:	4b1a      	ldr	r3, [pc, #104]	@ (80029bc <tft_init+0x630>)
 8002954:	61fb      	str	r3, [r7, #28]
 8002956:	232b      	movs	r3, #43	@ 0x2b
 8002958:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800295a:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <tft_init+0x5f4>)
 800295c:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002964:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002966:	4b07      	ldr	r3, [pc, #28]	@ (8002984 <tft_init+0x5f8>)
 8002968:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002970:	801a      	strh	r2, [r3, #0]
        break;
 8002972:	e043      	b.n	80029fc <tft_init+0x670>
 8002974:	2000015c 	.word	0x2000015c
 8002978:	08041b5c 	.word	0x08041b5c
 800297c:	08041b68 	.word	0x08041b68
 8002980:	080013cd 	.word	0x080013cd
 8002984:	080013b5 	.word	0x080013b5
 8002988:	08041b6c 	.word	0x08041b6c
 800298c:	08041bb0 	.word	0x08041bb0
 8002990:	08041bc4 	.word	0x08041bc4
 8002994:	08041bc8 	.word	0x08041bc8
 8002998:	08041be8 	.word	0x08041be8
 800299c:	08041cc0 	.word	0x08041cc0
 80029a0:	08041d8c 	.word	0x08041d8c
 80029a4:	08041dac 	.word	0x08041dac
 80029a8:	08041db4 	.word	0x08041db4
 80029ac:	08041db8 	.word	0x08041db8
 80029b0:	08041e20 	.word	0x08041e20
 80029b4:	08041e58 	.word	0x08041e58
 80029b8:	08041ea0 	.word	0x08041ea0
 80029bc:	08041edc 	.word	0x08041edc
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 80029c0:	4b38      	ldr	r3, [pc, #224]	@ (8002aa4 <tft_init+0x718>)
 80029c2:	f241 0208 	movw	r2, #4104	@ 0x1008
 80029c6:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 80029c8:	21b0      	movs	r1, #176	@ 0xb0
 80029ca:	4837      	ldr	r0, [pc, #220]	@ (8002aa8 <tft_init+0x71c>)
 80029cc:	f7ff fa7b 	bl	8001ec6 <init_table16>
        break;
 80029d0:	e014      	b.n	80029fc <tft_init+0x670>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 80029d2:	4b34      	ldr	r3, [pc, #208]	@ (8002aa4 <tft_init+0x718>)
 80029d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029d8:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 80029da:	21c0      	movs	r1, #192	@ 0xc0
 80029dc:	4833      	ldr	r0, [pc, #204]	@ (8002aac <tft_init+0x720>)
 80029de:	f7ff fa72 	bl	8001ec6 <init_table16>
        p16 = (int16_t *) & height;
 80029e2:	4b33      	ldr	r3, [pc, #204]	@ (8002ab0 <tft_init+0x724>)
 80029e4:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80029ec:	801a      	strh	r2, [r3, #0]
        break;
 80029ee:	e005      	b.n	80029fc <tft_init+0x670>
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 80029f0:	4b30      	ldr	r3, [pc, #192]	@ (8002ab4 <tft_init+0x728>)
 80029f2:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	2200      	movs	r2, #0
 80029f8:	801a      	strh	r2, [r3, #0]
        break;
 80029fa:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 80029fc:	4b29      	ldr	r3, [pc, #164]	@ (8002aa4 <tft_init+0x718>)
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf14      	ite	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	2300      	moveq	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4b29      	ldr	r3, [pc, #164]	@ (8002ab8 <tft_init+0x72c>)
 8002a12:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00d      	beq.n	8002a36 <tft_init+0x6aa>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 8002a1a:	2109      	movs	r1, #9
 8002a1c:	4827      	ldr	r0, [pc, #156]	@ (8002abc <tft_init+0x730>)
 8002a1e:	f7ff f9f9 	bl	8001e14 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8002a22:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a26:	4619      	mov	r1, r3
 8002a28:	69f8      	ldr	r0, [r7, #28]
 8002a2a:	f7ff f9f3 	bl	8001e14 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 8002a2e:	2106      	movs	r1, #6
 8002a30:	4823      	ldr	r0, [pc, #140]	@ (8002ac0 <tft_init+0x734>)
 8002a32:	f7ff f9ef 	bl	8001e14 <init_table>
    }
    setRotation(0);             //PORTRAIT
 8002a36:	2000      	movs	r0, #0
 8002a38:	f000 fef2 	bl	8003820 <setRotation>
    invertDisplay(false);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f001 fcd1 	bl	80043e4 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 8002a42:	4b20      	ldr	r3, [pc, #128]	@ (8002ac4 <tft_init+0x738>)
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	f249 4288 	movw	r2, #38024	@ 0x9488
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d125      	bne.n	8002a9a <tft_init+0x70e>
		is555 = 0;
 8002a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac8 <tft_init+0x73c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 8002a54:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002a58:	2100      	movs	r1, #0
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f001 f968 	bl	8003d30 <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 8002a60:	2100      	movs	r1, #0
 8002a62:	2000      	movs	r0, #0
 8002a64:	f7fe fd55 	bl	8001512 <readPixel>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d112      	bne.n	8002a9a <tft_init+0x70e>
			uint8_t pixfmt = 0x06;
 8002a74:	2306      	movs	r3, #6
 8002a76:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 8002a78:	f107 030f 	add.w	r3, r7, #15
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	4619      	mov	r1, r3
 8002a80:	203a      	movs	r0, #58	@ 0x3a
 8002a82:	f7fe fd70 	bl	8001566 <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 8002a86:	4b07      	ldr	r3, [pc, #28]	@ (8002aa4 <tft_init+0x718>)
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	f023 0310 	bic.w	r3, r3, #16
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	4b04      	ldr	r3, [pc, #16]	@ (8002aa4 <tft_init+0x718>)
 8002a92:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 8002a94:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <tft_init+0x73c>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 8002a9a:	bf00      	nop
 8002a9c:	3720      	adds	r7, #32
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	2000015c 	.word	0x2000015c
 8002aa8:	08041f08 	.word	0x08041f08
 8002aac:	08041fb8 	.word	0x08041fb8
 8002ab0:	080013cd 	.word	0x080013cd
 8002ab4:	080013b5 	.word	0x080013b5
 8002ab8:	20000160 	.word	0x20000160
 8002abc:	08042078 	.word	0x08042078
 8002ac0:	08042084 	.word	0x08042084
 8002ac4:	2000015e 	.word	0x2000015e
 8002ac8:	20000157 	.word	0x20000157

08002acc <readID>:




uint16_t readID(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7ff fb4b 	bl	8002170 <readReg>
 8002ada:	4603      	mov	r3, r0
 8002adc:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 8002ade:	89fb      	ldrh	r3, [r7, #14]
 8002ae0:	f245 4208 	movw	r2, #21512	@ 0x5408
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d102      	bne.n	8002aee <readID+0x22>
        return 0x5408;
 8002ae8:	f245 4308 	movw	r3, #21512	@ 0x5408
 8002aec:	e128      	b.n	8002d40 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 8002aee:	89fb      	ldrh	r3, [r7, #14]
 8002af0:	f245 4220 	movw	r2, #21536	@ 0x5420
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d102      	bne.n	8002afe <readID+0x32>
        return 0x5420;
 8002af8:	f245 4320 	movw	r3, #21536	@ 0x5420
 8002afc:	e120      	b.n	8002d40 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 8002afe:	89fb      	ldrh	r3, [r7, #14]
 8002b00:	f648 1289 	movw	r2, #35209	@ 0x8989
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d102      	bne.n	8002b0e <readID+0x42>
        return 0x1289;
 8002b08:	f241 2389 	movw	r3, #4745	@ 0x1289
 8002b0c:	e118      	b.n	8002d40 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 8002b0e:	2100      	movs	r1, #0
 8002b10:	2067      	movs	r0, #103	@ 0x67
 8002b12:	f7ff fb2d 	bl	8002170 <readReg>
 8002b16:	4603      	mov	r3, r0
 8002b18:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 8002b1a:	89fb      	ldrh	r3, [r7, #14]
 8002b1c:	f244 7247 	movw	r2, #18247	@ 0x4747
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d102      	bne.n	8002b2a <readID+0x5e>
        return 0x8347;
 8002b24:	f248 3347 	movw	r3, #33607	@ 0x8347
 8002b28:	e10a      	b.n	8002d40 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 8002b2a:	20a1      	movs	r0, #161	@ 0xa1
 8002b2c:	f7ff fbec 	bl	8002308 <readReg32>
 8002b30:	4603      	mov	r3, r0
 8002b32:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 8002b34:	89fb      	ldrh	r3, [r7, #14]
 8002b36:	f246 1201 	movw	r2, #24833	@ 0x6101
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d102      	bne.n	8002b44 <readID+0x78>
        return 0x1963;
 8002b3e:	f641 1363 	movw	r3, #6499	@ 0x1963
 8002b42:	e0fd      	b.n	8002d40 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 8002b44:	89fb      	ldrh	r3, [r7, #14]
 8002b46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d102      	bne.n	8002b54 <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 8002b4e:	f241 5326 	movw	r3, #5414	@ 0x1526
 8002b52:	e0f5      	b.n	8002d40 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 8002b54:	20bf      	movs	r0, #191	@ 0xbf
 8002b56:	f7ff fbf2 	bl	800233e <readReg40>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 8002b5e:	89fb      	ldrh	r3, [r7, #14]
 8002b60:	f248 3257 	movw	r2, #33623	@ 0x8357
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d102      	bne.n	8002b6e <readID+0xa2>
        return 0x8357;
 8002b68:	f248 3357 	movw	r3, #33623	@ 0x8357
 8002b6c:	e0e8      	b.n	8002d40 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 8002b6e:	89fb      	ldrh	r3, [r7, #14]
 8002b70:	f249 4281 	movw	r2, #38017	@ 0x9481
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d102      	bne.n	8002b7e <readID+0xb2>
        return 0x9481;
 8002b78:	f249 4381 	movw	r3, #38017	@ 0x9481
 8002b7c:	e0e0      	b.n	8002d40 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8002b7e:	89fb      	ldrh	r3, [r7, #14]
 8002b80:	f241 5211 	movw	r2, #5393	@ 0x1511
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d102      	bne.n	8002b8e <readID+0xc2>
        return 0x1511;
 8002b88:	f241 5311 	movw	r3, #5393	@ 0x1511
 8002b8c:	e0d8      	b.n	8002d40 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8002b8e:	89fb      	ldrh	r3, [r7, #14]
 8002b90:	f5b3 5fa9 	cmp.w	r3, #5408	@ 0x1520
 8002b94:	d102      	bne.n	8002b9c <readID+0xd0>
        return 0x1520;
 8002b96:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 8002b9a:	e0d1      	b.n	8002d40 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8002b9c:	89fb      	ldrh	r3, [r7, #14]
 8002b9e:	f241 5226 	movw	r2, #5414	@ 0x1526
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d102      	bne.n	8002bac <readID+0xe0>
        return 0x1526;
 8002ba6:	f241 5326 	movw	r3, #5414	@ 0x1526
 8002baa:	e0c9      	b.n	8002d40 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8002bac:	89fb      	ldrh	r3, [r7, #14]
 8002bae:	f241 5281 	movw	r2, #5505	@ 0x1581
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d102      	bne.n	8002bbc <readID+0xf0>
        return 0x1581;
 8002bb6:	f241 5381 	movw	r3, #5505	@ 0x1581
 8002bba:	e0c1      	b.n	8002d40 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8002bbc:	89fb      	ldrh	r3, [r7, #14]
 8002bbe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002bc2:	d102      	bne.n	8002bca <readID+0xfe>
        return 0x6814;
 8002bc4:	f646 0314 	movw	r3, #26644	@ 0x6814
 8002bc8:	e0ba      	b.n	8002d40 <readID+0x274>
    ret = readReg32(0xD4);
 8002bca:	20d4      	movs	r0, #212	@ 0xd4
 8002bcc:	f7ff fb9c 	bl	8002308 <readReg32>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8002bd4:	89fb      	ldrh	r3, [r7, #14]
 8002bd6:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d102      	bne.n	8002be4 <readID+0x118>
        return 0x5310;
 8002bde:	f245 3310 	movw	r3, #21264	@ 0x5310
 8002be2:	e0ad      	b.n	8002d40 <readID+0x274>
    ret = readReg32(0xD7);
 8002be4:	20d7      	movs	r0, #215	@ 0xd7
 8002be6:	f7ff fb8f 	bl	8002308 <readReg32>
 8002bea:	4603      	mov	r3, r0
 8002bec:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8002bee:	89fb      	ldrh	r3, [r7, #14]
 8002bf0:	f248 0231 	movw	r2, #32817	@ 0x8031
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d102      	bne.n	8002bfe <readID+0x132>
        return 0x8031;
 8002bf8:	f248 0331 	movw	r3, #32817	@ 0x8031
 8002bfc:	e0a0      	b.n	8002d40 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8002bfe:	20ef      	movs	r0, #239	@ 0xef
 8002c00:	f7ff fb9d 	bl	800233e <readReg40>
 8002c04:	4603      	mov	r3, r0
 8002c06:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 8002c08:	89fb      	ldrh	r3, [r7, #14]
 8002c0a:	f249 3227 	movw	r2, #37671	@ 0x9327
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d102      	bne.n	8002c18 <readID+0x14c>
        return 0x9327;
 8002c12:	f249 3327 	movw	r3, #37671	@ 0x9327
 8002c16:	e093      	b.n	8002d40 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8002c18:	20fe      	movs	r0, #254	@ 0xfe
 8002c1a:	f7ff fb75 	bl	8002308 <readReg32>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	0a1b      	lsrs	r3, r3, #8
 8002c22:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8002c24:	89fb      	ldrh	r3, [r7, #14]
 8002c26:	f242 0253 	movw	r2, #8275	@ 0x2053
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d102      	bne.n	8002c34 <readID+0x168>
        return 0x2053;
 8002c2e:	f242 0353 	movw	r3, #8275	@ 0x2053
 8002c32:	e085      	b.n	8002d40 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8002c34:	2004      	movs	r0, #4
 8002c36:	f7ff fb67 	bl	8002308 <readReg32>
 8002c3a:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	0c1b      	lsrs	r3, r3, #16
 8002c40:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d122      	bne.n	8002c92 <readID+0x1c6>
 8002c4c:	89fb      	ldrh	r3, [r7, #14]
 8002c4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c52:	d11e      	bne.n	8002c92 <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8002c54:	4a3c      	ldr	r2, [pc, #240]	@ (8002d48 <readID+0x27c>)
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	8019      	strh	r1, [r3, #0]
 8002c5e:	3302      	adds	r3, #2
 8002c60:	0c12      	lsrs	r2, r2, #16
 8002c62:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 8002c64:	1d3b      	adds	r3, r7, #4
 8002c66:	2203      	movs	r2, #3
 8002c68:	4619      	mov	r1, r3
 8002c6a:	20b9      	movs	r0, #185	@ 0xb9
 8002c6c:	f7fe fc7b 	bl	8001566 <pushCommand>
        msb = readReg(0xD0,0);
 8002c70:	2100      	movs	r1, #0
 8002c72:	20d0      	movs	r0, #208	@ 0xd0
 8002c74:	f7ff fa7c 	bl	8002170 <readReg>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	2b99      	cmp	r3, #153	@ 0x99
 8002c80:	d101      	bne.n	8002c86 <readID+0x1ba>
 8002c82:	2399      	movs	r3, #153	@ 0x99
 8002c84:	e05c      	b.n	8002d40 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	2b90      	cmp	r3, #144	@ 0x90
 8002c8a:	d102      	bne.n	8002c92 <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8002c8c:	f249 0390 	movw	r3, #37008	@ 0x9090
 8002c90:	e056      	b.n	8002d40 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8002c92:	89fb      	ldrh	r3, [r7, #14]
 8002c94:	f241 5226 	movw	r2, #5414	@ 0x1526
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d102      	bne.n	8002ca2 <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 8002c9c:	f241 5326 	movw	r3, #5414	@ 0x1526
 8002ca0:	e04e      	b.n	8002d40 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 8002ca2:	89fb      	ldrh	r3, [r7, #14]
 8002ca4:	f648 12f0 	movw	r2, #35312	@ 0x89f0
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d102      	bne.n	8002cb2 <readID+0x1e6>
        return 0x7735;
 8002cac:	f247 7335 	movw	r3, #30517	@ 0x7735
 8002cb0:	e046      	b.n	8002d40 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 8002cb2:	89fb      	ldrh	r3, [r7, #14]
 8002cb4:	f248 5252 	movw	r2, #34130	@ 0x8552
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d102      	bne.n	8002cc2 <readID+0x1f6>
        return 0x7789;
 8002cbc:	f247 7389 	movw	r3, #30601	@ 0x7789
 8002cc0:	e03e      	b.n	8002d40 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 8002cc2:	89fb      	ldrh	r3, [r7, #14]
 8002cc4:	f64a 4211 	movw	r2, #44049	@ 0xac11
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d102      	bne.n	8002cd2 <readID+0x206>
        return 0xAC11;
 8002ccc:	f64a 4311 	movw	r3, #44049	@ 0xac11
 8002cd0:	e036      	b.n	8002d40 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 8002cd2:	20d3      	movs	r0, #211	@ 0xd3
 8002cd4:	f7ff fb18 	bl	8002308 <readReg32>
 8002cd8:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	0a1b      	lsrs	r3, r3, #8
 8002cde:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 8002ce0:	89fb      	ldrh	r3, [r7, #14]
 8002ce2:	f249 1263 	movw	r2, #37219	@ 0x9163
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d101      	bne.n	8002cee <readID+0x222>
 8002cea:	89fb      	ldrh	r3, [r7, #14]
 8002cec:	e028      	b.n	8002d40 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 8002cee:	20d3      	movs	r0, #211	@ 0xd3
 8002cf0:	f7ff fb0a 	bl	8002308 <readReg32>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 8002cf8:	89fb      	ldrh	r3, [r7, #14]
 8002cfa:	0a1b      	lsrs	r3, r3, #8
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	2b93      	cmp	r3, #147	@ 0x93
 8002d04:	d00b      	beq.n	8002d1e <readID+0x252>
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	2b94      	cmp	r3, #148	@ 0x94
 8002d0a:	d008      	beq.n	8002d1e <readID+0x252>
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	2b98      	cmp	r3, #152	@ 0x98
 8002d10:	d005      	beq.n	8002d1e <readID+0x252>
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	2b77      	cmp	r3, #119	@ 0x77
 8002d16:	d002      	beq.n	8002d1e <readID+0x252>
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	2b16      	cmp	r3, #22
 8002d1c:	d101      	bne.n	8002d22 <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 8002d1e:	89fb      	ldrh	r3, [r7, #14]
 8002d20:	e00e      	b.n	8002d40 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 8002d22:	89fb      	ldrh	r3, [r7, #14]
 8002d24:	2bd3      	cmp	r3, #211	@ 0xd3
 8002d26:	d004      	beq.n	8002d32 <readID+0x266>
 8002d28:	89fb      	ldrh	r3, [r7, #14]
 8002d2a:	f24d 32d3 	movw	r2, #54227	@ 0xd3d3
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d101      	bne.n	8002d36 <readID+0x26a>
        return ret;             //16-bit write-only bus
 8002d32:	89fb      	ldrh	r3, [r7, #14]
 8002d34:	e004      	b.n	8002d40 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 8002d36:	2100      	movs	r1, #0
 8002d38:	2000      	movs	r0, #0
 8002d3a:	f7ff fa19 	bl	8002170 <readReg>
 8002d3e:	4603      	mov	r3, r0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	080073e4 	.word	0x080073e4

08002d4c <readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b08b      	sub	sp, #44	@ 0x2c
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60ba      	str	r2, [r7, #8]
 8002d54:	461a      	mov	r2, r3
 8002d56:	4603      	mov	r3, r0
 8002d58:	81fb      	strh	r3, [r7, #14]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	81bb      	strh	r3, [r7, #12]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 8002d62:	4baf      	ldr	r3, [pc, #700]	@ (8003020 <readGRAM+0x2d4>)
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	84bb      	strh	r3, [r7, #36]	@ 0x24
    int16_t n = w * h, row = 0, col = 0;
 8002d68:	88fa      	ldrh	r2, [r7, #6]
 8002d6a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002d6c:	fb12 f303 	smulbb	r3, r2, r3
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002d74:	2300      	movs	r3, #0
 8002d76:	843b      	strh	r3, [r7, #32]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8002d7c:	4ba9      	ldr	r3, [pc, #676]	@ (8003024 <readGRAM+0x2d8>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d107      	bne.n	8002d94 <readGRAM+0x48>
 8002d84:	4ba8      	ldr	r3, [pc, #672]	@ (8003028 <readGRAM+0x2dc>)
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <readGRAM+0x48>
        _MR = 0x2E;
 8002d90:	232e      	movs	r3, #46	@ 0x2e
 8002d92:	84bb      	strh	r3, [r7, #36]	@ 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 8002d94:	4ba5      	ldr	r3, [pc, #660]	@ (800302c <readGRAM+0x2e0>)
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	f241 6202 	movw	r2, #5634	@ 0x1602
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d101      	bne.n	8002da4 <readGRAM+0x58>
 8002da0:	232e      	movs	r3, #46	@ 0x2e
 8002da2:	84bb      	strh	r3, [r7, #36]	@ 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8002da4:	89fa      	ldrh	r2, [r7, #14]
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	4413      	add	r3, r2
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	b21c      	sxth	r4, r3
 8002db2:	89ba      	ldrh	r2, [r7, #12]
 8002db4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002db6:	4413      	add	r3, r2
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	b21b      	sxth	r3, r3
 8002dc0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002dc4:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002dc8:	4622      	mov	r2, r4
 8002dca:	f001 f8a7 	bl	8003f1c <setAddrWindow>
    while (n > 0) {
 8002dce:	f000 bcfc 	b.w	80037ca <readGRAM+0xa7e>
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 8002dd2:	4b95      	ldr	r3, [pc, #596]	@ (8003028 <readGRAM+0x2dc>)
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d111      	bne.n	8002e02 <readGRAM+0xb6>
            WriteCmdData(_MC, x + col);
 8002dde:	4b94      	ldr	r3, [pc, #592]	@ (8003030 <readGRAM+0x2e4>)
 8002de0:	8818      	ldrh	r0, [r3, #0]
 8002de2:	89fa      	ldrh	r2, [r7, #14]
 8002de4:	8bfb      	ldrh	r3, [r7, #30]
 8002de6:	4413      	add	r3, r2
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	4619      	mov	r1, r3
 8002dec:	f7fe fba9 	bl	8001542 <WriteCmdData>
            WriteCmdData(_MP, y + row);
 8002df0:	4b90      	ldr	r3, [pc, #576]	@ (8003034 <readGRAM+0x2e8>)
 8002df2:	8818      	ldrh	r0, [r3, #0]
 8002df4:	89ba      	ldrh	r2, [r7, #12]
 8002df6:	8c3b      	ldrh	r3, [r7, #32]
 8002df8:	4413      	add	r3, r2
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f7fe fba0 	bl	8001542 <WriteCmdData>
        }
        CS_ACTIVE;
 8002e02:	2101      	movs	r1, #1
 8002e04:	488c      	ldr	r0, [pc, #560]	@ (8003038 <readGRAM+0x2ec>)
 8002e06:	f7fe fa87 	bl	8001318 <PIN_LOW>
        WriteCmd(_MR);
 8002e0a:	2110      	movs	r1, #16
 8002e0c:	488b      	ldr	r0, [pc, #556]	@ (800303c <readGRAM+0x2f0>)
 8002e0e:	f7fe fa83 	bl	8001318 <PIN_LOW>
 8002e12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e14:	0a1b      	lsrs	r3, r3, #8
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	777b      	strb	r3, [r7, #29]
 8002e1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e1c:	773b      	strb	r3, [r7, #28]
 8002e1e:	4b87      	ldr	r3, [pc, #540]	@ (800303c <readGRAM+0x2f0>)
 8002e20:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8002e24:	619a      	str	r2, [r3, #24]
 8002e26:	4b84      	ldr	r3, [pc, #528]	@ (8003038 <readGRAM+0x2ec>)
 8002e28:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8002e2c:	619a      	str	r2, [r3, #24]
 8002e2e:	4b84      	ldr	r3, [pc, #528]	@ (8003040 <readGRAM+0x2f4>)
 8002e30:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e34:	619a      	str	r2, [r3, #24]
 8002e36:	7f7b      	ldrb	r3, [r7, #29]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8002e3e:	7f7b      	ldrb	r3, [r7, #29]
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e46:	431a      	orrs	r2, r3
 8002e48:	7f7b      	ldrb	r3, [r7, #29]
 8002e4a:	025b      	lsls	r3, r3, #9
 8002e4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e50:	431a      	orrs	r2, r3
 8002e52:	4b7a      	ldr	r3, [pc, #488]	@ (800303c <readGRAM+0x2f0>)
 8002e54:	619a      	str	r2, [r3, #24]
 8002e56:	7f7b      	ldrb	r3, [r7, #29]
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8002e5e:	7f7b      	ldrb	r3, [r7, #29]
 8002e60:	105b      	asrs	r3, r3, #1
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	431a      	orrs	r2, r3
 8002e68:	7f7b      	ldrb	r3, [r7, #29]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	431a      	orrs	r2, r3
 8002e72:	7f7b      	ldrb	r3, [r7, #29]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	4b6f      	ldr	r3, [pc, #444]	@ (8003038 <readGRAM+0x2ec>)
 8002e7c:	619a      	str	r2, [r3, #24]
 8002e7e:	7f7b      	ldrb	r3, [r7, #29]
 8002e80:	019b      	lsls	r3, r3, #6
 8002e82:	4a6f      	ldr	r2, [pc, #444]	@ (8003040 <readGRAM+0x2f4>)
 8002e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e88:	6193      	str	r3, [r2, #24]
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	486b      	ldr	r0, [pc, #428]	@ (800303c <readGRAM+0x2f0>)
 8002e8e:	f7fe fa43 	bl	8001318 <PIN_LOW>
 8002e92:	2102      	movs	r1, #2
 8002e94:	4869      	ldr	r0, [pc, #420]	@ (800303c <readGRAM+0x2f0>)
 8002e96:	f7fe fa4f 	bl	8001338 <PIN_HIGH>
 8002e9a:	2102      	movs	r1, #2
 8002e9c:	4867      	ldr	r0, [pc, #412]	@ (800303c <readGRAM+0x2f0>)
 8002e9e:	f7fe fa4b 	bl	8001338 <PIN_HIGH>
 8002ea2:	4b66      	ldr	r3, [pc, #408]	@ (800303c <readGRAM+0x2f0>)
 8002ea4:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8002ea8:	619a      	str	r2, [r3, #24]
 8002eaa:	4b63      	ldr	r3, [pc, #396]	@ (8003038 <readGRAM+0x2ec>)
 8002eac:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8002eb0:	619a      	str	r2, [r3, #24]
 8002eb2:	4b63      	ldr	r3, [pc, #396]	@ (8003040 <readGRAM+0x2f4>)
 8002eb4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002eb8:	619a      	str	r2, [r3, #24]
 8002eba:	7f3b      	ldrb	r3, [r7, #28]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8002ec2:	7f3b      	ldrb	r3, [r7, #28]
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	7f3b      	ldrb	r3, [r7, #28]
 8002ece:	025b      	lsls	r3, r3, #9
 8002ed0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	4b59      	ldr	r3, [pc, #356]	@ (800303c <readGRAM+0x2f0>)
 8002ed8:	619a      	str	r2, [r3, #24]
 8002eda:	7f3b      	ldrb	r3, [r7, #28]
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8002ee2:	7f3b      	ldrb	r3, [r7, #28]
 8002ee4:	105b      	asrs	r3, r3, #1
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	431a      	orrs	r2, r3
 8002eec:	7f3b      	ldrb	r3, [r7, #28]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	f003 0320 	and.w	r3, r3, #32
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	7f3b      	ldrb	r3, [r7, #28]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	431a      	orrs	r2, r3
 8002efe:	4b4e      	ldr	r3, [pc, #312]	@ (8003038 <readGRAM+0x2ec>)
 8002f00:	619a      	str	r2, [r3, #24]
 8002f02:	7f3b      	ldrb	r3, [r7, #28]
 8002f04:	019b      	lsls	r3, r3, #6
 8002f06:	4a4e      	ldr	r2, [pc, #312]	@ (8003040 <readGRAM+0x2f4>)
 8002f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0c:	6193      	str	r3, [r2, #24]
 8002f0e:	2102      	movs	r1, #2
 8002f10:	484a      	ldr	r0, [pc, #296]	@ (800303c <readGRAM+0x2f0>)
 8002f12:	f7fe fa01 	bl	8001318 <PIN_LOW>
 8002f16:	2102      	movs	r1, #2
 8002f18:	4848      	ldr	r0, [pc, #288]	@ (800303c <readGRAM+0x2f0>)
 8002f1a:	f7fe fa0d 	bl	8001338 <PIN_HIGH>
 8002f1e:	2102      	movs	r1, #2
 8002f20:	4846      	ldr	r0, [pc, #280]	@ (800303c <readGRAM+0x2f0>)
 8002f22:	f7fe fa09 	bl	8001338 <PIN_HIGH>
 8002f26:	2110      	movs	r1, #16
 8002f28:	4844      	ldr	r0, [pc, #272]	@ (800303c <readGRAM+0x2f0>)
 8002f2a:	f7fe fa05 	bl	8001338 <PIN_HIGH>
        setReadDir();
 8002f2e:	f7fe fb2d 	bl	800158c <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 8002f32:	4b3d      	ldr	r3, [pc, #244]	@ (8003028 <readGRAM+0x2dc>)
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f040 814e 	bne.w	80031dc <readGRAM+0x490>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 8002f40:	4b39      	ldr	r3, [pc, #228]	@ (8003028 <readGRAM+0x2dc>)
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d105      	bne.n	8002f58 <readGRAM+0x20c>
 8002f4c:	4b37      	ldr	r3, [pc, #220]	@ (800302c <readGRAM+0x2e0>)
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	f241 2289 	movw	r2, #4745	@ 0x1289
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d175      	bne.n	8003044 <readGRAM+0x2f8>
            READ_8(r);
 8002f58:	2101      	movs	r1, #1
 8002f5a:	4838      	ldr	r0, [pc, #224]	@ (800303c <readGRAM+0x2f0>)
 8002f5c:	f7fe f9ec 	bl	8001338 <PIN_HIGH>
 8002f60:	2101      	movs	r1, #1
 8002f62:	4836      	ldr	r0, [pc, #216]	@ (800303c <readGRAM+0x2f0>)
 8002f64:	f7fe f9d8 	bl	8001318 <PIN_LOW>
 8002f68:	2101      	movs	r1, #1
 8002f6a:	4834      	ldr	r0, [pc, #208]	@ (800303c <readGRAM+0x2f0>)
 8002f6c:	f7fe f9d4 	bl	8001318 <PIN_LOW>
 8002f70:	2101      	movs	r1, #1
 8002f72:	4832      	ldr	r0, [pc, #200]	@ (800303c <readGRAM+0x2f0>)
 8002f74:	f7fe f9d0 	bl	8001318 <PIN_LOW>
 8002f78:	2101      	movs	r1, #1
 8002f7a:	4830      	ldr	r0, [pc, #192]	@ (800303c <readGRAM+0x2f0>)
 8002f7c:	f7fe f9cc 	bl	8001318 <PIN_LOW>
 8002f80:	4b2e      	ldr	r3, [pc, #184]	@ (800303c <readGRAM+0x2f0>)
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	085b      	lsrs	r3, r3, #1
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800303c <readGRAM+0x2f0>)
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	0a5b      	lsrs	r3, r3, #9
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	4b26      	ldr	r3, [pc, #152]	@ (800303c <readGRAM+0x2f0>)
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	0a1b      	lsrs	r3, r3, #8
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4b21      	ldr	r3, [pc, #132]	@ (8003038 <readGRAM+0x2ec>)
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003038 <readGRAM+0x2ec>)
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4b18      	ldr	r3, [pc, #96]	@ (8003038 <readGRAM+0x2ec>)
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	085b      	lsrs	r3, r3, #1
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	4b13      	ldr	r3, [pc, #76]	@ (8003038 <readGRAM+0x2ec>)
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	4b11      	ldr	r3, [pc, #68]	@ (8003040 <readGRAM+0x2f4>)
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	099b      	lsrs	r3, r3, #6
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	b2db      	uxtb	r3, r3
 8003008:	4313      	orrs	r3, r2
 800300a:	75fb      	strb	r3, [r7, #23]
 800300c:	2101      	movs	r1, #1
 800300e:	480b      	ldr	r0, [pc, #44]	@ (800303c <readGRAM+0x2f0>)
 8003010:	f7fe f992 	bl	8001338 <PIN_HIGH>
 8003014:	2101      	movs	r1, #1
 8003016:	4809      	ldr	r0, [pc, #36]	@ (800303c <readGRAM+0x2f0>)
 8003018:	f7fe f98e 	bl	8001338 <PIN_HIGH>
 800301c:	e0de      	b.n	80031dc <readGRAM+0x490>
 800301e:	bf00      	nop
 8003020:	20000168 	.word	0x20000168
 8003024:	20000156 	.word	0x20000156
 8003028:	2000015c 	.word	0x2000015c
 800302c:	2000015e 	.word	0x2000015e
 8003030:	20000164 	.word	0x20000164
 8003034:	20000166 	.word	0x20000166
 8003038:	40020400 	.word	0x40020400
 800303c:	40020000 	.word	0x40020000
 8003040:	40020800 	.word	0x40020800
        } else {
            READ_16(dummy);
 8003044:	2101      	movs	r1, #1
 8003046:	489a      	ldr	r0, [pc, #616]	@ (80032b0 <readGRAM+0x564>)
 8003048:	f7fe f976 	bl	8001338 <PIN_HIGH>
 800304c:	2101      	movs	r1, #1
 800304e:	4898      	ldr	r0, [pc, #608]	@ (80032b0 <readGRAM+0x564>)
 8003050:	f7fe f962 	bl	8001318 <PIN_LOW>
 8003054:	2101      	movs	r1, #1
 8003056:	4896      	ldr	r0, [pc, #600]	@ (80032b0 <readGRAM+0x564>)
 8003058:	f7fe f95e 	bl	8001318 <PIN_LOW>
 800305c:	2101      	movs	r1, #1
 800305e:	4894      	ldr	r0, [pc, #592]	@ (80032b0 <readGRAM+0x564>)
 8003060:	f7fe f95a 	bl	8001318 <PIN_LOW>
 8003064:	2101      	movs	r1, #1
 8003066:	4892      	ldr	r0, [pc, #584]	@ (80032b0 <readGRAM+0x564>)
 8003068:	f7fe f956 	bl	8001318 <PIN_LOW>
 800306c:	4b90      	ldr	r3, [pc, #576]	@ (80032b0 <readGRAM+0x564>)
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	085b      	lsrs	r3, r3, #1
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003078:	b2da      	uxtb	r2, r3
 800307a:	4b8d      	ldr	r3, [pc, #564]	@ (80032b0 <readGRAM+0x564>)
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	0a5b      	lsrs	r3, r3, #9
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	b2db      	uxtb	r3, r3
 8003088:	4313      	orrs	r3, r2
 800308a:	b2da      	uxtb	r2, r3
 800308c:	4b88      	ldr	r3, [pc, #544]	@ (80032b0 <readGRAM+0x564>)
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	0a1b      	lsrs	r3, r3, #8
 8003092:	b2db      	uxtb	r3, r3
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	b2db      	uxtb	r3, r3
 800309a:	4313      	orrs	r3, r2
 800309c:	b2da      	uxtb	r2, r3
 800309e:	4b85      	ldr	r3, [pc, #532]	@ (80032b4 <readGRAM+0x568>)
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	4313      	orrs	r3, r2
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	4b81      	ldr	r3, [pc, #516]	@ (80032b4 <readGRAM+0x568>)
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	4313      	orrs	r3, r2
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	4b7c      	ldr	r3, [pc, #496]	@ (80032b4 <readGRAM+0x568>)
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	4313      	orrs	r3, r2
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	4b77      	ldr	r3, [pc, #476]	@ (80032b4 <readGRAM+0x568>)
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	4313      	orrs	r3, r2
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	4b74      	ldr	r3, [pc, #464]	@ (80032b8 <readGRAM+0x56c>)
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	099b      	lsrs	r3, r3, #6
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	4313      	orrs	r3, r2
 80030f6:	76fb      	strb	r3, [r7, #27]
 80030f8:	2101      	movs	r1, #1
 80030fa:	486d      	ldr	r0, [pc, #436]	@ (80032b0 <readGRAM+0x564>)
 80030fc:	f7fe f91c 	bl	8001338 <PIN_HIGH>
 8003100:	2101      	movs	r1, #1
 8003102:	486b      	ldr	r0, [pc, #428]	@ (80032b0 <readGRAM+0x564>)
 8003104:	f7fe f918 	bl	8001338 <PIN_HIGH>
 8003108:	2101      	movs	r1, #1
 800310a:	4869      	ldr	r0, [pc, #420]	@ (80032b0 <readGRAM+0x564>)
 800310c:	f7fe f914 	bl	8001338 <PIN_HIGH>
 8003110:	2101      	movs	r1, #1
 8003112:	4867      	ldr	r0, [pc, #412]	@ (80032b0 <readGRAM+0x564>)
 8003114:	f7fe f900 	bl	8001318 <PIN_LOW>
 8003118:	2101      	movs	r1, #1
 800311a:	4865      	ldr	r0, [pc, #404]	@ (80032b0 <readGRAM+0x564>)
 800311c:	f7fe f8fc 	bl	8001318 <PIN_LOW>
 8003120:	2101      	movs	r1, #1
 8003122:	4863      	ldr	r0, [pc, #396]	@ (80032b0 <readGRAM+0x564>)
 8003124:	f7fe f8f8 	bl	8001318 <PIN_LOW>
 8003128:	2101      	movs	r1, #1
 800312a:	4861      	ldr	r0, [pc, #388]	@ (80032b0 <readGRAM+0x564>)
 800312c:	f7fe f8f4 	bl	8001318 <PIN_LOW>
 8003130:	4b5f      	ldr	r3, [pc, #380]	@ (80032b0 <readGRAM+0x564>)
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	085b      	lsrs	r3, r3, #1
 8003136:	b29b      	uxth	r3, r3
 8003138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800313c:	b29a      	uxth	r2, r3
 800313e:	4b5c      	ldr	r3, [pc, #368]	@ (80032b0 <readGRAM+0x564>)
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	0a5b      	lsrs	r3, r3, #9
 8003144:	b29b      	uxth	r3, r3
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	b29b      	uxth	r3, r3
 800314c:	4313      	orrs	r3, r2
 800314e:	b29a      	uxth	r2, r3
 8003150:	4b57      	ldr	r3, [pc, #348]	@ (80032b0 <readGRAM+0x564>)
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	0a1b      	lsrs	r3, r3, #8
 8003156:	b29b      	uxth	r3, r3
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	b29b      	uxth	r3, r3
 800315e:	4313      	orrs	r3, r2
 8003160:	b29a      	uxth	r2, r3
 8003162:	4b54      	ldr	r3, [pc, #336]	@ (80032b4 <readGRAM+0x568>)
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	b29b      	uxth	r3, r3
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	b29b      	uxth	r3, r3
 800316e:	4313      	orrs	r3, r2
 8003170:	b29a      	uxth	r2, r3
 8003172:	4b50      	ldr	r3, [pc, #320]	@ (80032b4 <readGRAM+0x568>)
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	b29b      	uxth	r3, r3
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	b29b      	uxth	r3, r3
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	b29b      	uxth	r3, r3
 8003182:	4313      	orrs	r3, r2
 8003184:	b29a      	uxth	r2, r3
 8003186:	4b4b      	ldr	r3, [pc, #300]	@ (80032b4 <readGRAM+0x568>)
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	b29b      	uxth	r3, r3
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	b29b      	uxth	r3, r3
 8003194:	4313      	orrs	r3, r2
 8003196:	b29a      	uxth	r2, r3
 8003198:	4b46      	ldr	r3, [pc, #280]	@ (80032b4 <readGRAM+0x568>)
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	091b      	lsrs	r3, r3, #4
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	4313      	orrs	r3, r2
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	4b43      	ldr	r3, [pc, #268]	@ (80032b8 <readGRAM+0x56c>)
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	099b      	lsrs	r3, r3, #6
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	4313      	orrs	r3, r2
 80031ba:	833b      	strh	r3, [r7, #24]
 80031bc:	2101      	movs	r1, #1
 80031be:	483c      	ldr	r0, [pc, #240]	@ (80032b0 <readGRAM+0x564>)
 80031c0:	f7fe f8ba 	bl	8001338 <PIN_HIGH>
 80031c4:	2101      	movs	r1, #1
 80031c6:	483a      	ldr	r0, [pc, #232]	@ (80032b0 <readGRAM+0x564>)
 80031c8:	f7fe f8b6 	bl	8001338 <PIN_HIGH>
 80031cc:	7efb      	ldrb	r3, [r7, #27]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	b21a      	sxth	r2, r3
 80031d2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	b21b      	sxth	r3, r3
 80031da:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 80031dc:	4b37      	ldr	r3, [pc, #220]	@ (80032bc <readGRAM+0x570>)
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	f241 5211 	movw	r2, #5393	@ 0x1511
 80031e4:	4293      	cmp	r3, r2
 80031e6:	f040 82c7 	bne.w	8003778 <readGRAM+0xa2c>
 80031ea:	2101      	movs	r1, #1
 80031ec:	4830      	ldr	r0, [pc, #192]	@ (80032b0 <readGRAM+0x564>)
 80031ee:	f7fe f8a3 	bl	8001338 <PIN_HIGH>
 80031f2:	2101      	movs	r1, #1
 80031f4:	482e      	ldr	r0, [pc, #184]	@ (80032b0 <readGRAM+0x564>)
 80031f6:	f7fe f88f 	bl	8001318 <PIN_LOW>
 80031fa:	2101      	movs	r1, #1
 80031fc:	482c      	ldr	r0, [pc, #176]	@ (80032b0 <readGRAM+0x564>)
 80031fe:	f7fe f88b 	bl	8001318 <PIN_LOW>
 8003202:	2101      	movs	r1, #1
 8003204:	482a      	ldr	r0, [pc, #168]	@ (80032b0 <readGRAM+0x564>)
 8003206:	f7fe f887 	bl	8001318 <PIN_LOW>
 800320a:	2101      	movs	r1, #1
 800320c:	4828      	ldr	r0, [pc, #160]	@ (80032b0 <readGRAM+0x564>)
 800320e:	f7fe f883 	bl	8001318 <PIN_LOW>
 8003212:	4b27      	ldr	r3, [pc, #156]	@ (80032b0 <readGRAM+0x564>)
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800321e:	b2da      	uxtb	r2, r3
 8003220:	4b23      	ldr	r3, [pc, #140]	@ (80032b0 <readGRAM+0x564>)
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	0a5b      	lsrs	r3, r3, #9
 8003226:	b2db      	uxtb	r3, r3
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	b2db      	uxtb	r3, r3
 800322e:	4313      	orrs	r3, r2
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4b1f      	ldr	r3, [pc, #124]	@ (80032b0 <readGRAM+0x564>)
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	b2db      	uxtb	r3, r3
 8003240:	4313      	orrs	r3, r2
 8003242:	b2da      	uxtb	r2, r3
 8003244:	4b1b      	ldr	r3, [pc, #108]	@ (80032b4 <readGRAM+0x568>)
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	b2db      	uxtb	r3, r3
 8003250:	4313      	orrs	r3, r2
 8003252:	b2da      	uxtb	r2, r3
 8003254:	4b17      	ldr	r3, [pc, #92]	@ (80032b4 <readGRAM+0x568>)
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	b2db      	uxtb	r3, r3
 8003264:	4313      	orrs	r3, r2
 8003266:	b2da      	uxtb	r2, r3
 8003268:	4b12      	ldr	r3, [pc, #72]	@ (80032b4 <readGRAM+0x568>)
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	085b      	lsrs	r3, r3, #1
 800326e:	b2db      	uxtb	r3, r3
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	b2db      	uxtb	r3, r3
 8003276:	4313      	orrs	r3, r2
 8003278:	b2da      	uxtb	r2, r3
 800327a:	4b0e      	ldr	r3, [pc, #56]	@ (80032b4 <readGRAM+0x568>)
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003286:	b2db      	uxtb	r3, r3
 8003288:	4313      	orrs	r3, r2
 800328a:	b2da      	uxtb	r2, r3
 800328c:	4b0a      	ldr	r3, [pc, #40]	@ (80032b8 <readGRAM+0x56c>)
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	099b      	lsrs	r3, r3, #6
 8003292:	b2db      	uxtb	r3, r3
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	b2db      	uxtb	r3, r3
 800329a:	4313      	orrs	r3, r2
 800329c:	75fb      	strb	r3, [r7, #23]
 800329e:	2101      	movs	r1, #1
 80032a0:	4803      	ldr	r0, [pc, #12]	@ (80032b0 <readGRAM+0x564>)
 80032a2:	f7fe f849 	bl	8001338 <PIN_HIGH>
 80032a6:	2101      	movs	r1, #1
 80032a8:	4801      	ldr	r0, [pc, #4]	@ (80032b0 <readGRAM+0x564>)
 80032aa:	f7fe f845 	bl	8001338 <PIN_HIGH>
        while (n)
 80032ae:	e263      	b.n	8003778 <readGRAM+0xa2c>
 80032b0:	40020000 	.word	0x40020000
 80032b4:	40020400 	.word	0x40020400
 80032b8:	40020800 	.word	0x40020800
 80032bc:	2000015e 	.word	0x2000015e
        {
            if (_lcd_capable & READ_24BITS)
 80032c0:	4ba2      	ldr	r3, [pc, #648]	@ (800354c <readGRAM+0x800>)
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8147 	beq.w	800355c <readGRAM+0x810>
            {
                READ_8(r);
 80032ce:	2101      	movs	r1, #1
 80032d0:	489f      	ldr	r0, [pc, #636]	@ (8003550 <readGRAM+0x804>)
 80032d2:	f7fe f831 	bl	8001338 <PIN_HIGH>
 80032d6:	2101      	movs	r1, #1
 80032d8:	489d      	ldr	r0, [pc, #628]	@ (8003550 <readGRAM+0x804>)
 80032da:	f7fe f81d 	bl	8001318 <PIN_LOW>
 80032de:	2101      	movs	r1, #1
 80032e0:	489b      	ldr	r0, [pc, #620]	@ (8003550 <readGRAM+0x804>)
 80032e2:	f7fe f819 	bl	8001318 <PIN_LOW>
 80032e6:	2101      	movs	r1, #1
 80032e8:	4899      	ldr	r0, [pc, #612]	@ (8003550 <readGRAM+0x804>)
 80032ea:	f7fe f815 	bl	8001318 <PIN_LOW>
 80032ee:	2101      	movs	r1, #1
 80032f0:	4897      	ldr	r0, [pc, #604]	@ (8003550 <readGRAM+0x804>)
 80032f2:	f7fe f811 	bl	8001318 <PIN_LOW>
 80032f6:	4b96      	ldr	r3, [pc, #600]	@ (8003550 <readGRAM+0x804>)
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	085b      	lsrs	r3, r3, #1
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003302:	b2da      	uxtb	r2, r3
 8003304:	4b92      	ldr	r3, [pc, #584]	@ (8003550 <readGRAM+0x804>)
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	0a5b      	lsrs	r3, r3, #9
 800330a:	b2db      	uxtb	r3, r3
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	b2db      	uxtb	r3, r3
 8003312:	4313      	orrs	r3, r2
 8003314:	b2da      	uxtb	r2, r3
 8003316:	4b8e      	ldr	r3, [pc, #568]	@ (8003550 <readGRAM+0x804>)
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	0a1b      	lsrs	r3, r3, #8
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	b2db      	uxtb	r3, r3
 8003324:	4313      	orrs	r3, r2
 8003326:	b2da      	uxtb	r2, r3
 8003328:	4b8a      	ldr	r3, [pc, #552]	@ (8003554 <readGRAM+0x808>)
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	b2db      	uxtb	r3, r3
 8003334:	4313      	orrs	r3, r2
 8003336:	b2da      	uxtb	r2, r3
 8003338:	4b86      	ldr	r3, [pc, #536]	@ (8003554 <readGRAM+0x808>)
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	b2db      	uxtb	r3, r3
 8003348:	4313      	orrs	r3, r2
 800334a:	b2da      	uxtb	r2, r3
 800334c:	4b81      	ldr	r3, [pc, #516]	@ (8003554 <readGRAM+0x808>)
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	085b      	lsrs	r3, r3, #1
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	b2db      	uxtb	r3, r3
 800335a:	4313      	orrs	r3, r2
 800335c:	b2da      	uxtb	r2, r3
 800335e:	4b7d      	ldr	r3, [pc, #500]	@ (8003554 <readGRAM+0x808>)
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	091b      	lsrs	r3, r3, #4
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336a:	b2db      	uxtb	r3, r3
 800336c:	4313      	orrs	r3, r2
 800336e:	b2da      	uxtb	r2, r3
 8003370:	4b79      	ldr	r3, [pc, #484]	@ (8003558 <readGRAM+0x80c>)
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	099b      	lsrs	r3, r3, #6
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	b2db      	uxtb	r3, r3
 800337e:	4313      	orrs	r3, r2
 8003380:	75fb      	strb	r3, [r7, #23]
 8003382:	2101      	movs	r1, #1
 8003384:	4872      	ldr	r0, [pc, #456]	@ (8003550 <readGRAM+0x804>)
 8003386:	f7fd ffd7 	bl	8001338 <PIN_HIGH>
 800338a:	2101      	movs	r1, #1
 800338c:	4870      	ldr	r0, [pc, #448]	@ (8003550 <readGRAM+0x804>)
 800338e:	f7fd ffd3 	bl	8001338 <PIN_HIGH>
                READ_8(g);
 8003392:	2101      	movs	r1, #1
 8003394:	486e      	ldr	r0, [pc, #440]	@ (8003550 <readGRAM+0x804>)
 8003396:	f7fd ffcf 	bl	8001338 <PIN_HIGH>
 800339a:	2101      	movs	r1, #1
 800339c:	486c      	ldr	r0, [pc, #432]	@ (8003550 <readGRAM+0x804>)
 800339e:	f7fd ffbb 	bl	8001318 <PIN_LOW>
 80033a2:	2101      	movs	r1, #1
 80033a4:	486a      	ldr	r0, [pc, #424]	@ (8003550 <readGRAM+0x804>)
 80033a6:	f7fd ffb7 	bl	8001318 <PIN_LOW>
 80033aa:	2101      	movs	r1, #1
 80033ac:	4868      	ldr	r0, [pc, #416]	@ (8003550 <readGRAM+0x804>)
 80033ae:	f7fd ffb3 	bl	8001318 <PIN_LOW>
 80033b2:	2101      	movs	r1, #1
 80033b4:	4866      	ldr	r0, [pc, #408]	@ (8003550 <readGRAM+0x804>)
 80033b6:	f7fd ffaf 	bl	8001318 <PIN_LOW>
 80033ba:	4b65      	ldr	r3, [pc, #404]	@ (8003550 <readGRAM+0x804>)
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	085b      	lsrs	r3, r3, #1
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	4b61      	ldr	r3, [pc, #388]	@ (8003550 <readGRAM+0x804>)
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	0a5b      	lsrs	r3, r3, #9
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	4313      	orrs	r3, r2
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	4b5d      	ldr	r3, [pc, #372]	@ (8003550 <readGRAM+0x804>)
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	0a1b      	lsrs	r3, r3, #8
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	4313      	orrs	r3, r2
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	4b59      	ldr	r3, [pc, #356]	@ (8003554 <readGRAM+0x808>)
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	4313      	orrs	r3, r2
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	4b55      	ldr	r3, [pc, #340]	@ (8003554 <readGRAM+0x808>)
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f003 0320 	and.w	r3, r3, #32
 800340a:	b2db      	uxtb	r3, r3
 800340c:	4313      	orrs	r3, r2
 800340e:	b2da      	uxtb	r2, r3
 8003410:	4b50      	ldr	r3, [pc, #320]	@ (8003554 <readGRAM+0x808>)
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	b2db      	uxtb	r3, r3
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	b2db      	uxtb	r3, r3
 800341e:	4313      	orrs	r3, r2
 8003420:	b2da      	uxtb	r2, r3
 8003422:	4b4c      	ldr	r3, [pc, #304]	@ (8003554 <readGRAM+0x808>)
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	091b      	lsrs	r3, r3, #4
 8003428:	b2db      	uxtb	r3, r3
 800342a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800342e:	b2db      	uxtb	r3, r3
 8003430:	4313      	orrs	r3, r2
 8003432:	b2da      	uxtb	r2, r3
 8003434:	4b48      	ldr	r3, [pc, #288]	@ (8003558 <readGRAM+0x80c>)
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	099b      	lsrs	r3, r3, #6
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	b2db      	uxtb	r3, r3
 8003442:	4313      	orrs	r3, r2
 8003444:	757b      	strb	r3, [r7, #21]
 8003446:	2101      	movs	r1, #1
 8003448:	4841      	ldr	r0, [pc, #260]	@ (8003550 <readGRAM+0x804>)
 800344a:	f7fd ff75 	bl	8001338 <PIN_HIGH>
 800344e:	2101      	movs	r1, #1
 8003450:	483f      	ldr	r0, [pc, #252]	@ (8003550 <readGRAM+0x804>)
 8003452:	f7fd ff71 	bl	8001338 <PIN_HIGH>
                READ_8(b);
 8003456:	2101      	movs	r1, #1
 8003458:	483d      	ldr	r0, [pc, #244]	@ (8003550 <readGRAM+0x804>)
 800345a:	f7fd ff6d 	bl	8001338 <PIN_HIGH>
 800345e:	2101      	movs	r1, #1
 8003460:	483b      	ldr	r0, [pc, #236]	@ (8003550 <readGRAM+0x804>)
 8003462:	f7fd ff59 	bl	8001318 <PIN_LOW>
 8003466:	2101      	movs	r1, #1
 8003468:	4839      	ldr	r0, [pc, #228]	@ (8003550 <readGRAM+0x804>)
 800346a:	f7fd ff55 	bl	8001318 <PIN_LOW>
 800346e:	2101      	movs	r1, #1
 8003470:	4837      	ldr	r0, [pc, #220]	@ (8003550 <readGRAM+0x804>)
 8003472:	f7fd ff51 	bl	8001318 <PIN_LOW>
 8003476:	2101      	movs	r1, #1
 8003478:	4835      	ldr	r0, [pc, #212]	@ (8003550 <readGRAM+0x804>)
 800347a:	f7fd ff4d 	bl	8001318 <PIN_LOW>
 800347e:	4b34      	ldr	r3, [pc, #208]	@ (8003550 <readGRAM+0x804>)
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	085b      	lsrs	r3, r3, #1
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800348a:	b2da      	uxtb	r2, r3
 800348c:	4b30      	ldr	r3, [pc, #192]	@ (8003550 <readGRAM+0x804>)
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	0a5b      	lsrs	r3, r3, #9
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	4313      	orrs	r3, r2
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4b2c      	ldr	r3, [pc, #176]	@ (8003550 <readGRAM+0x804>)
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	4313      	orrs	r3, r2
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	4b28      	ldr	r3, [pc, #160]	@ (8003554 <readGRAM+0x808>)
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	4313      	orrs	r3, r2
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	4b24      	ldr	r3, [pc, #144]	@ (8003554 <readGRAM+0x808>)
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	4313      	orrs	r3, r2
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003554 <readGRAM+0x808>)
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	085b      	lsrs	r3, r3, #1
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	4313      	orrs	r3, r2
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003554 <readGRAM+0x808>)
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	091b      	lsrs	r3, r3, #4
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	4313      	orrs	r3, r2
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	4b17      	ldr	r3, [pc, #92]	@ (8003558 <readGRAM+0x80c>)
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	099b      	lsrs	r3, r3, #6
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	b2db      	uxtb	r3, r3
 8003506:	4313      	orrs	r3, r2
 8003508:	753b      	strb	r3, [r7, #20]
 800350a:	2101      	movs	r1, #1
 800350c:	4810      	ldr	r0, [pc, #64]	@ (8003550 <readGRAM+0x804>)
 800350e:	f7fd ff13 	bl	8001338 <PIN_HIGH>
 8003512:	2101      	movs	r1, #1
 8003514:	480e      	ldr	r0, [pc, #56]	@ (8003550 <readGRAM+0x804>)
 8003516:	f7fd ff0f 	bl	8001338 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 800351a:	4b0c      	ldr	r3, [pc, #48]	@ (800354c <readGRAM+0x800>)
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <readGRAM+0x7ec>
                    ret = color565(b, g, r);
 8003526:	7dfa      	ldrb	r2, [r7, #23]
 8003528:	7d79      	ldrb	r1, [r7, #21]
 800352a:	7d3b      	ldrb	r3, [r7, #20]
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd ffca 	bl	80014c6 <color565>
 8003532:	4603      	mov	r3, r0
 8003534:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003536:	e104      	b.n	8003742 <readGRAM+0x9f6>
                else
                    ret = color565(r, g, b);
 8003538:	7d3a      	ldrb	r2, [r7, #20]
 800353a:	7d79      	ldrb	r1, [r7, #21]
 800353c:	7dfb      	ldrb	r3, [r7, #23]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd ffc1 	bl	80014c6 <color565>
 8003544:	4603      	mov	r3, r0
 8003546:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003548:	e0fb      	b.n	8003742 <readGRAM+0x9f6>
 800354a:	bf00      	nop
 800354c:	2000015c 	.word	0x2000015c
 8003550:	40020000 	.word	0x40020000
 8003554:	40020400 	.word	0x40020400
 8003558:	40020800 	.word	0x40020800
            } else
            {
                READ_16(ret);
 800355c:	2101      	movs	r1, #1
 800355e:	48ab      	ldr	r0, [pc, #684]	@ (800380c <readGRAM+0xac0>)
 8003560:	f7fd feea 	bl	8001338 <PIN_HIGH>
 8003564:	2101      	movs	r1, #1
 8003566:	48a9      	ldr	r0, [pc, #676]	@ (800380c <readGRAM+0xac0>)
 8003568:	f7fd fed6 	bl	8001318 <PIN_LOW>
 800356c:	2101      	movs	r1, #1
 800356e:	48a7      	ldr	r0, [pc, #668]	@ (800380c <readGRAM+0xac0>)
 8003570:	f7fd fed2 	bl	8001318 <PIN_LOW>
 8003574:	2101      	movs	r1, #1
 8003576:	48a5      	ldr	r0, [pc, #660]	@ (800380c <readGRAM+0xac0>)
 8003578:	f7fd fece 	bl	8001318 <PIN_LOW>
 800357c:	2101      	movs	r1, #1
 800357e:	48a3      	ldr	r0, [pc, #652]	@ (800380c <readGRAM+0xac0>)
 8003580:	f7fd feca 	bl	8001318 <PIN_LOW>
 8003584:	4ba1      	ldr	r3, [pc, #644]	@ (800380c <readGRAM+0xac0>)
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003590:	b2da      	uxtb	r2, r3
 8003592:	4b9e      	ldr	r3, [pc, #632]	@ (800380c <readGRAM+0xac0>)
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	0a5b      	lsrs	r3, r3, #9
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	4313      	orrs	r3, r2
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	4b99      	ldr	r3, [pc, #612]	@ (800380c <readGRAM+0xac0>)
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	4313      	orrs	r3, r2
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	4b96      	ldr	r3, [pc, #600]	@ (8003810 <readGRAM+0xac4>)
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	4313      	orrs	r3, r2
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	4b92      	ldr	r3, [pc, #584]	@ (8003810 <readGRAM+0xac4>)
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	4313      	orrs	r3, r2
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4b8d      	ldr	r3, [pc, #564]	@ (8003810 <readGRAM+0xac4>)
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	085b      	lsrs	r3, r3, #1
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	4313      	orrs	r3, r2
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	4b88      	ldr	r3, [pc, #544]	@ (8003810 <readGRAM+0xac4>)
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	091b      	lsrs	r3, r3, #4
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	4313      	orrs	r3, r2
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	4b85      	ldr	r3, [pc, #532]	@ (8003814 <readGRAM+0xac8>)
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	099b      	lsrs	r3, r3, #6
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	b2db      	uxtb	r3, r3
 800360c:	4313      	orrs	r3, r2
 800360e:	75bb      	strb	r3, [r7, #22]
 8003610:	2101      	movs	r1, #1
 8003612:	487e      	ldr	r0, [pc, #504]	@ (800380c <readGRAM+0xac0>)
 8003614:	f7fd fe90 	bl	8001338 <PIN_HIGH>
 8003618:	2101      	movs	r1, #1
 800361a:	487c      	ldr	r0, [pc, #496]	@ (800380c <readGRAM+0xac0>)
 800361c:	f7fd fe8c 	bl	8001338 <PIN_HIGH>
 8003620:	2101      	movs	r1, #1
 8003622:	487a      	ldr	r0, [pc, #488]	@ (800380c <readGRAM+0xac0>)
 8003624:	f7fd fe88 	bl	8001338 <PIN_HIGH>
 8003628:	2101      	movs	r1, #1
 800362a:	4878      	ldr	r0, [pc, #480]	@ (800380c <readGRAM+0xac0>)
 800362c:	f7fd fe74 	bl	8001318 <PIN_LOW>
 8003630:	2101      	movs	r1, #1
 8003632:	4876      	ldr	r0, [pc, #472]	@ (800380c <readGRAM+0xac0>)
 8003634:	f7fd fe70 	bl	8001318 <PIN_LOW>
 8003638:	2101      	movs	r1, #1
 800363a:	4874      	ldr	r0, [pc, #464]	@ (800380c <readGRAM+0xac0>)
 800363c:	f7fd fe6c 	bl	8001318 <PIN_LOW>
 8003640:	2101      	movs	r1, #1
 8003642:	4872      	ldr	r0, [pc, #456]	@ (800380c <readGRAM+0xac0>)
 8003644:	f7fd fe68 	bl	8001318 <PIN_LOW>
 8003648:	4b70      	ldr	r3, [pc, #448]	@ (800380c <readGRAM+0xac0>)
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	b29b      	uxth	r3, r3
 8003650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003654:	b29a      	uxth	r2, r3
 8003656:	4b6d      	ldr	r3, [pc, #436]	@ (800380c <readGRAM+0xac0>)
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	0a5b      	lsrs	r3, r3, #9
 800365c:	b29b      	uxth	r3, r3
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	b29b      	uxth	r3, r3
 8003664:	4313      	orrs	r3, r2
 8003666:	b29a      	uxth	r2, r3
 8003668:	4b68      	ldr	r3, [pc, #416]	@ (800380c <readGRAM+0xac0>)
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	0a1b      	lsrs	r3, r3, #8
 800366e:	b29b      	uxth	r3, r3
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	b29b      	uxth	r3, r3
 8003676:	4313      	orrs	r3, r2
 8003678:	b29a      	uxth	r2, r3
 800367a:	4b65      	ldr	r3, [pc, #404]	@ (8003810 <readGRAM+0xac4>)
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	b29b      	uxth	r3, r3
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	b29b      	uxth	r3, r3
 8003686:	4313      	orrs	r3, r2
 8003688:	b29a      	uxth	r2, r3
 800368a:	4b61      	ldr	r3, [pc, #388]	@ (8003810 <readGRAM+0xac4>)
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	b29b      	uxth	r3, r3
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	b29b      	uxth	r3, r3
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	b29b      	uxth	r3, r3
 800369a:	4313      	orrs	r3, r2
 800369c:	b29a      	uxth	r2, r3
 800369e:	4b5c      	ldr	r3, [pc, #368]	@ (8003810 <readGRAM+0xac4>)
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	085b      	lsrs	r3, r3, #1
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	f003 0310 	and.w	r3, r3, #16
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	4313      	orrs	r3, r2
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	4b57      	ldr	r3, [pc, #348]	@ (8003810 <readGRAM+0xac4>)
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036bc:	b29b      	uxth	r3, r3
 80036be:	4313      	orrs	r3, r2
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	4b54      	ldr	r3, [pc, #336]	@ (8003814 <readGRAM+0xac8>)
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	099b      	lsrs	r3, r3, #6
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	4313      	orrs	r3, r2
 80036d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80036d4:	2101      	movs	r1, #1
 80036d6:	484d      	ldr	r0, [pc, #308]	@ (800380c <readGRAM+0xac0>)
 80036d8:	f7fd fe2e 	bl	8001338 <PIN_HIGH>
 80036dc:	2101      	movs	r1, #1
 80036de:	484b      	ldr	r0, [pc, #300]	@ (800380c <readGRAM+0xac0>)
 80036e0:	f7fd fe2a 	bl	8001338 <PIN_HIGH>
 80036e4:	7dbb      	ldrb	r3, [r7, #22]
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	b21a      	sxth	r2, r3
 80036ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80036ee:	4313      	orrs	r3, r2
 80036f0:	b21b      	sxth	r3, r3
 80036f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (_lcd_capable & READ_LOWHIGH)
 80036f4:	4b48      	ldr	r3, [pc, #288]	@ (8003818 <readGRAM+0xacc>)
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d009      	beq.n	8003714 <readGRAM+0x9c8>
                    ret = (ret >> 8) | (ret << 8);
 8003700:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003702:	0a1b      	lsrs	r3, r3, #8
 8003704:	b29b      	uxth	r3, r3
 8003706:	b21a      	sxth	r2, r3
 8003708:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	b21b      	sxth	r3, r3
 800370e:	4313      	orrs	r3, r2
 8003710:	b21b      	sxth	r3, r3
 8003712:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (_lcd_capable & READ_BGR)
 8003714:	4b40      	ldr	r3, [pc, #256]	@ (8003818 <readGRAM+0xacc>)
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d010      	beq.n	8003742 <readGRAM+0x9f6>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 8003720:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003724:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8003728:	b21a      	sxth	r2, r3
 800372a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800372c:	0adb      	lsrs	r3, r3, #11
 800372e:	b29b      	uxth	r3, r3
 8003730:	b21b      	sxth	r3, r3
 8003732:	4313      	orrs	r3, r2
 8003734:	b21a      	sxth	r2, r3
 8003736:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003738:	02db      	lsls	r3, r3, #11
 800373a:	b21b      	sxth	r3, r3
 800373c:	4313      	orrs	r3, r2
 800373e:	b21b      	sxth	r3, r3
 8003740:	84fb      	strh	r3, [r7, #38]	@ 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 8003742:	4b36      	ldr	r3, [pc, #216]	@ (800381c <readGRAM+0xad0>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <readGRAM+0xa0a>
 800374a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800374c:	4618      	mov	r0, r3
 800374e:	f7fd fe69 	bl	8001424 <color555_to_565>
 8003752:	4603      	mov	r3, r0
 8003754:	84fb      	strh	r3, [r7, #38]	@ 0x26
#endif
            *block++ = ret;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	1c9a      	adds	r2, r3, #2
 800375a:	60ba      	str	r2, [r7, #8]
 800375c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800375e:	801a      	strh	r2, [r3, #0]
            n--;
 8003760:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29b      	uxth	r3, r3
 800376a:	847b      	strh	r3, [r7, #34]	@ 0x22
            if (!(_lcd_capable & AUTO_READINC))
 800376c:	4b2a      	ldr	r3, [pc, #168]	@ (8003818 <readGRAM+0xacc>)
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <readGRAM+0xa38>
        while (n)
 8003778:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800377c:	2b00      	cmp	r3, #0
 800377e:	f47f ad9f 	bne.w	80032c0 <readGRAM+0x574>
 8003782:	e000      	b.n	8003786 <readGRAM+0xa3a>
                break;
 8003784:	bf00      	nop
        }
        if (++col >= w) {
 8003786:	8bfb      	ldrh	r3, [r7, #30]
 8003788:	3301      	adds	r3, #1
 800378a:	b29b      	uxth	r3, r3
 800378c:	83fb      	strh	r3, [r7, #30]
 800378e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003796:	429a      	cmp	r2, r3
 8003798:	db0d      	blt.n	80037b6 <readGRAM+0xa6a>
            col = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 800379e:	8c3b      	ldrh	r3, [r7, #32]
 80037a0:	3301      	adds	r3, #1
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	843b      	strh	r3, [r7, #32]
 80037a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80037aa:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 80037ae:	429a      	cmp	r2, r3
 80037b0:	db01      	blt.n	80037b6 <readGRAM+0xa6a>
                row = 0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 80037b6:	2101      	movs	r1, #1
 80037b8:	4814      	ldr	r0, [pc, #80]	@ (800380c <readGRAM+0xac0>)
 80037ba:	f7fd fdbd 	bl	8001338 <PIN_HIGH>
        CS_IDLE;
 80037be:	2101      	movs	r1, #1
 80037c0:	4813      	ldr	r0, [pc, #76]	@ (8003810 <readGRAM+0xac4>)
 80037c2:	f7fd fdb9 	bl	8001338 <PIN_HIGH>
        setWriteDir();
 80037c6:	f7fd ff0f 	bl	80015e8 <setWriteDir>
    while (n > 0) {
 80037ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f73f aaff 	bgt.w	8002dd2 <readGRAM+0x86>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 80037d4:	4b10      	ldr	r3, [pc, #64]	@ (8003818 <readGRAM+0xacc>)
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d110      	bne.n	8003802 <readGRAM+0xab6>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 80037e0:	f7fd fde8 	bl	80013b4 <width>
 80037e4:	4603      	mov	r3, r0
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	b21c      	sxth	r4, r3
 80037ec:	f7fd fdee 	bl	80013cc <height>
 80037f0:	4603      	mov	r3, r0
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	b21b      	sxth	r3, r3
 80037f8:	4622      	mov	r2, r4
 80037fa:	2100      	movs	r1, #0
 80037fc:	2000      	movs	r0, #0
 80037fe:	f000 fb8d 	bl	8003f1c <setAddrWindow>
    return 0;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	372c      	adds	r7, #44	@ 0x2c
 8003808:	46bd      	mov	sp, r7
 800380a:	bd90      	pop	{r4, r7, pc}
 800380c:	40020000 	.word	0x40020000
 8003810:	40020400 	.word	0x40020400
 8003814:	40020800 	.word	0x40020800
 8003818:	2000015c 	.word	0x2000015c
 800381c:	20000157 	.word	0x20000157

08003820 <setRotation>:

void setRotation(uint8_t r)
{
 8003820:	b590      	push	{r4, r7, lr}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 800382a:	4b9c      	ldr	r3, [pc, #624]	@ (8003a9c <setRotation+0x27c>)
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	b2da      	uxtb	r2, r3
 8003838:	4b99      	ldr	r3, [pc, #612]	@ (8003aa0 <setRotation+0x280>)
 800383a:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 800383c:	4b98      	ldr	r3, [pc, #608]	@ (8003aa0 <setRotation+0x280>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <setRotation+0x2e>
 8003848:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800384c:	e000      	b.n	8003850 <setRotation+0x30>
 800384e:	22f0      	movs	r2, #240	@ 0xf0
 8003850:	4b94      	ldr	r3, [pc, #592]	@ (8003aa4 <setRotation+0x284>)
 8003852:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 8003854:	4b92      	ldr	r3, [pc, #584]	@ (8003aa0 <setRotation+0x280>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <setRotation+0x44>
 8003860:	22f0      	movs	r2, #240	@ 0xf0
 8003862:	e001      	b.n	8003868 <setRotation+0x48>
 8003864:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003868:	4b8f      	ldr	r3, [pc, #572]	@ (8003aa8 <setRotation+0x288>)
 800386a:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 800386c:	4b8c      	ldr	r3, [pc, #560]	@ (8003aa0 <setRotation+0x280>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b03      	cmp	r3, #3
 8003872:	d817      	bhi.n	80038a4 <setRotation+0x84>
 8003874:	a201      	add	r2, pc, #4	@ (adr r2, 800387c <setRotation+0x5c>)
 8003876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387a:	bf00      	nop
 800387c:	0800388d 	.word	0x0800388d
 8003880:	08003893 	.word	0x08003893
 8003884:	08003899 	.word	0x08003899
 8003888:	0800389f 	.word	0x0800389f
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 800388c:	2348      	movs	r3, #72	@ 0x48
 800388e:	72fb      	strb	r3, [r7, #11]
       break;
 8003890:	e008      	b.n	80038a4 <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8003892:	2328      	movs	r3, #40	@ 0x28
 8003894:	72fb      	strb	r3, [r7, #11]
       break;
 8003896:	e005      	b.n	80038a4 <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8003898:	2398      	movs	r3, #152	@ 0x98
 800389a:	72fb      	strb	r3, [r7, #11]
       break;
 800389c:	e002      	b.n	80038a4 <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 800389e:	23f8      	movs	r3, #248	@ 0xf8
 80038a0:	72fb      	strb	r3, [r7, #11]
       break;
 80038a2:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 80038a4:	4b81      	ldr	r3, [pc, #516]	@ (8003aac <setRotation+0x28c>)
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <setRotation+0x9c>
       val ^= 0x80;
 80038b0:	7afb      	ldrb	r3, [r7, #11]
 80038b2:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 80038b6:	43db      	mvns	r3, r3
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 80038bc:	4b7b      	ldr	r3, [pc, #492]	@ (8003aac <setRotation+0x28c>)
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d004      	beq.n	80038d2 <setRotation+0xb2>
       val ^= 0x40;
 80038c8:	7afb      	ldrb	r3, [r7, #11]
 80038ca:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 80038d2:	4b76      	ldr	r3, [pc, #472]	@ (8003aac <setRotation+0x28c>)
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d004      	beq.n	80038e8 <setRotation+0xc8>
       val ^= 0x08;
 80038de:	7afb      	ldrb	r3, [r7, #11]
 80038e0:	f083 0308 	eor.w	r3, r3, #8
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 80038e8:	4b70      	ldr	r3, [pc, #448]	@ (8003aac <setRotation+0x28c>)
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 8119 	beq.w	8003b28 <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 80038f6:	4b6e      	ldr	r3, [pc, #440]	@ (8003ab0 <setRotation+0x290>)
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	f646 0214 	movw	r2, #26644	@ 0x6814
 80038fe:	4293      	cmp	r3, r2
 8003900:	d128      	bne.n	8003954 <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 8003902:	7afb      	ldrb	r3, [r7, #11]
 8003904:	b25b      	sxtb	r3, r3
 8003906:	105b      	asrs	r3, r3, #1
 8003908:	b25b      	sxtb	r3, r3
 800390a:	b29b      	uxth	r3, r3
 800390c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003910:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 8003912:	7afb      	ldrb	r3, [r7, #11]
 8003914:	105b      	asrs	r3, r3, #1
 8003916:	b29b      	uxth	r3, r3
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 800391e:	7afb      	ldrb	r3, [r7, #11]
 8003920:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003924:	b2db      	uxtb	r3, r3
 8003926:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 800392c:	8a3b      	ldrh	r3, [r7, #16]
 800392e:	b2da      	uxtb	r2, r3
 8003930:	89fb      	ldrh	r3, [r7, #14]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	4313      	orrs	r3, r2
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f043 0302 	orr.w	r3, r3, #2
 800393c:	b2db      	uxtb	r3, r3
 800393e:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 8003940:	233b      	movs	r3, #59	@ 0x3b
 8003942:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 8003944:	f107 0308 	add.w	r3, r7, #8
 8003948:	461a      	mov	r2, r3
 800394a:	2103      	movs	r1, #3
 800394c:	20b6      	movs	r0, #182	@ 0xb6
 800394e:	f7fe f897 	bl	8001a80 <WriteCmdParamN>
           goto common_MC;
 8003952:	e0c0      	b.n	8003ad6 <setRotation+0x2b6>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8003954:	4b56      	ldr	r3, [pc, #344]	@ (8003ab0 <setRotation+0x290>)
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	f641 1263 	movw	r2, #6499	@ 0x1963
 800395c:	4293      	cmp	r3, r2
 800395e:	d00b      	beq.n	8003978 <setRotation+0x158>
 8003960:	4b53      	ldr	r3, [pc, #332]	@ (8003ab0 <setRotation+0x290>)
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	f249 4281 	movw	r2, #38017	@ 0x9481
 8003968:	4293      	cmp	r3, r2
 800396a:	d005      	beq.n	8003978 <setRotation+0x158>
 800396c:	4b50      	ldr	r3, [pc, #320]	@ (8003ab0 <setRotation+0x290>)
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	f241 5211 	movw	r2, #5393	@ 0x1511
 8003974:	4293      	cmp	r3, r2
 8003976:	d139      	bne.n	80039ec <setRotation+0x1cc>
           if (val & 0x80)
 8003978:	7afb      	ldrb	r3, [r7, #11]
 800397a:	b25b      	sxtb	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	da04      	bge.n	800398a <setRotation+0x16a>
               val |= 0x01;    //GS
 8003980:	7afb      	ldrb	r3, [r7, #11]
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	b2db      	uxtb	r3, r3
 8003988:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 800398a:	7afb      	ldrb	r3, [r7, #11]
 800398c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d004      	beq.n	800399e <setRotation+0x17e>
               val |= 0x02;    //SS
 8003994:	7afb      	ldrb	r3, [r7, #11]
 8003996:	f043 0302 	orr.w	r3, r3, #2
 800399a:	b2db      	uxtb	r3, r3
 800399c:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 800399e:	4b44      	ldr	r3, [pc, #272]	@ (8003ab0 <setRotation+0x290>)
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	f641 1263 	movw	r2, #6499	@ 0x1963
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d104      	bne.n	80039b4 <setRotation+0x194>
 80039aa:	7afb      	ldrb	r3, [r7, #11]
 80039ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 80039b4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ab0 <setRotation+0x290>)
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	f249 4281 	movw	r2, #38017	@ 0x9481
 80039bc:	4293      	cmp	r3, r2
 80039be:	d104      	bne.n	80039ca <setRotation+0x1aa>
 80039c0:	7afb      	ldrb	r3, [r7, #11]
 80039c2:	f003 032f 	and.w	r3, r3, #47	@ 0x2f
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 80039ca:	4b39      	ldr	r3, [pc, #228]	@ (8003ab0 <setRotation+0x290>)
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	f241 5211 	movw	r2, #5393	@ 0x1511
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d160      	bne.n	8003a98 <setRotation+0x278>
               val &= ~0x10;   //remove ML
 80039d6:	7afb      	ldrb	r3, [r7, #11]
 80039d8:	f023 0310 	bic.w	r3, r3, #16
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 80039e0:	7afb      	ldrb	r3, [r7, #11]
 80039e2:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 80039ea:	e055      	b.n	8003a98 <setRotation+0x278>
      }
       else if (is8347) {
 80039ec:	4b31      	ldr	r3, [pc, #196]	@ (8003ab4 <setRotation+0x294>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d06f      	beq.n	8003ad4 <setRotation+0x2b4>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 80039f4:	4b30      	ldr	r3, [pc, #192]	@ (8003ab8 <setRotation+0x298>)
 80039f6:	2202      	movs	r2, #2
 80039f8:	801a      	strh	r2, [r3, #0]
 80039fa:	4b30      	ldr	r3, [pc, #192]	@ (8003abc <setRotation+0x29c>)
 80039fc:	2206      	movs	r2, #6
 80039fe:	801a      	strh	r2, [r3, #0]
 8003a00:	4b2f      	ldr	r3, [pc, #188]	@ (8003ac0 <setRotation+0x2a0>)
 8003a02:	2222      	movs	r2, #34	@ 0x22
 8003a04:	801a      	strh	r2, [r3, #0]
 8003a06:	4b2f      	ldr	r3, [pc, #188]	@ (8003ac4 <setRotation+0x2a4>)
 8003a08:	2202      	movs	r2, #2
 8003a0a:	801a      	strh	r2, [r3, #0]
 8003a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ac8 <setRotation+0x2a8>)
 8003a0e:	2204      	movs	r2, #4
 8003a10:	801a      	strh	r2, [r3, #0]
 8003a12:	4b2e      	ldr	r3, [pc, #184]	@ (8003acc <setRotation+0x2ac>)
 8003a14:	2206      	movs	r2, #6
 8003a16:	801a      	strh	r2, [r3, #0]
 8003a18:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad0 <setRotation+0x2b0>)
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 8003a1e:	4b24      	ldr	r3, [pc, #144]	@ (8003ab0 <setRotation+0x290>)
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	2b65      	cmp	r3, #101	@ 0x65
 8003a24:	d121      	bne.n	8003a6a <setRotation+0x24a>
               val |= 0x01;    //GS=1
 8003a26:	7afb      	ldrb	r3, [r7, #11]
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 8003a30:	7afb      	ldrb	r3, [r7, #11]
 8003a32:	f003 0310 	and.w	r3, r3, #16
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <setRotation+0x226>
 8003a3a:	7afb      	ldrb	r3, [r7, #11]
 8003a3c:	f083 032c 	eor.w	r3, r3, #44	@ 0x2c
 8003a40:	43db      	mvns	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d006      	beq.n	8003a5e <setRotation+0x23e>
 8003a50:	4b19      	ldr	r3, [pc, #100]	@ (8003ab8 <setRotation+0x298>)
 8003a52:	2282      	movs	r2, #130	@ 0x82
 8003a54:	801a      	strh	r2, [r3, #0]
 8003a56:	4b19      	ldr	r3, [pc, #100]	@ (8003abc <setRotation+0x29c>)
 8003a58:	2280      	movs	r2, #128	@ 0x80
 8003a5a:	801a      	strh	r2, [r3, #0]
 8003a5c:	e005      	b.n	8003a6a <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 8003a5e:	4b16      	ldr	r3, [pc, #88]	@ (8003ab8 <setRotation+0x298>)
 8003a60:	2280      	movs	r2, #128	@ 0x80
 8003a62:	801a      	strh	r2, [r3, #0]
 8003a64:	4b15      	ldr	r3, [pc, #84]	@ (8003abc <setRotation+0x29c>)
 8003a66:	2282      	movs	r2, #130	@ 0x82
 8003a68:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 8003a6a:	4b11      	ldr	r3, [pc, #68]	@ (8003ab0 <setRotation+0x290>)
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	f245 2252 	movw	r2, #21074	@ 0x5252
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d145      	bne.n	8003b02 <setRotation+0x2e2>
               val |= 0x02;   //VERT_SCROLLON
 8003a76:	7afb      	ldrb	r3, [r7, #11]
 8003a78:	f043 0302 	orr.w	r3, r3, #2
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 8003a80:	7afb      	ldrb	r3, [r7, #11]
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d03b      	beq.n	8003b02 <setRotation+0x2e2>
 8003a8a:	7afb      	ldrb	r3, [r7, #11]
 8003a8c:	f083 032b 	eor.w	r3, r3, #43	@ 0x2b
 8003a90:	43db      	mvns	r3, r3
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 8003a96:	e034      	b.n	8003b02 <setRotation+0x2e2>
           goto common_MC;
 8003a98:	bf00      	nop
 8003a9a:	e01c      	b.n	8003ad6 <setRotation+0x2b6>
 8003a9c:	20000160 	.word	0x20000160
 8003aa0:	20000159 	.word	0x20000159
 8003aa4:	2000003c 	.word	0x2000003c
 8003aa8:	2000003e 	.word	0x2000003e
 8003aac:	2000015c 	.word	0x2000015c
 8003ab0:	2000015e 	.word	0x2000015e
 8003ab4:	20000156 	.word	0x20000156
 8003ab8:	20000164 	.word	0x20000164
 8003abc:	20000166 	.word	0x20000166
 8003ac0:	20000168 	.word	0x20000168
 8003ac4:	2000016a 	.word	0x2000016a
 8003ac8:	2000016c 	.word	0x2000016c
 8003acc:	2000016e 	.word	0x2000016e
 8003ad0:	20000170 	.word	0x20000170
       }
     common_MC:
 8003ad4:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 8003ad6:	4b8a      	ldr	r3, [pc, #552]	@ (8003d00 <setRotation+0x4e0>)
 8003ad8:	222a      	movs	r2, #42	@ 0x2a
 8003ada:	801a      	strh	r2, [r3, #0]
 8003adc:	4b89      	ldr	r3, [pc, #548]	@ (8003d04 <setRotation+0x4e4>)
 8003ade:	222b      	movs	r2, #43	@ 0x2b
 8003ae0:	801a      	strh	r2, [r3, #0]
 8003ae2:	4b89      	ldr	r3, [pc, #548]	@ (8003d08 <setRotation+0x4e8>)
 8003ae4:	222c      	movs	r2, #44	@ 0x2c
 8003ae6:	801a      	strh	r2, [r3, #0]
 8003ae8:	4b88      	ldr	r3, [pc, #544]	@ (8003d0c <setRotation+0x4ec>)
 8003aea:	222a      	movs	r2, #42	@ 0x2a
 8003aec:	801a      	strh	r2, [r3, #0]
 8003aee:	4b88      	ldr	r3, [pc, #544]	@ (8003d10 <setRotation+0x4f0>)
 8003af0:	222a      	movs	r2, #42	@ 0x2a
 8003af2:	801a      	strh	r2, [r3, #0]
 8003af4:	4b87      	ldr	r3, [pc, #540]	@ (8003d14 <setRotation+0x4f4>)
 8003af6:	222b      	movs	r2, #43	@ 0x2b
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	4b87      	ldr	r3, [pc, #540]	@ (8003d18 <setRotation+0x4f8>)
 8003afc:	222b      	movs	r2, #43	@ 0x2b
 8003afe:	801a      	strh	r2, [r3, #0]
 8003b00:	e000      	b.n	8003b04 <setRotation+0x2e4>
			goto common_BGR;
 8003b02:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8003b04:	4b85      	ldr	r3, [pc, #532]	@ (8003d1c <setRotation+0x4fc>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <setRotation+0x2f0>
 8003b0c:	2316      	movs	r3, #22
 8003b0e:	e000      	b.n	8003b12 <setRotation+0x2f2>
 8003b10:	2336      	movs	r3, #54	@ 0x36
 8003b12:	f107 020b 	add.w	r2, r7, #11
 8003b16:	2101      	movs	r1, #1
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fd ffb1 	bl	8001a80 <WriteCmdParamN>
       _lcd_madctl = val;
 8003b1e:	7afb      	ldrb	r3, [r7, #11]
 8003b20:	461a      	mov	r2, r3
 8003b22:	4b7f      	ldr	r3, [pc, #508]	@ (8003d20 <setRotation+0x500>)
 8003b24:	801a      	strh	r2, [r3, #0]
 8003b26:	e0a5      	b.n	8003c74 <setRotation+0x454>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 8003b28:	4b7e      	ldr	r3, [pc, #504]	@ (8003d24 <setRotation+0x504>)
 8003b2a:	881b      	ldrh	r3, [r3, #0]
 8003b2c:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d013      	beq.n	8003b5c <setRotation+0x33c>
 8003b34:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	dc4f      	bgt.n	8003bdc <setRotation+0x3bc>
 8003b3c:	f249 3226 	movw	r2, #37670	@ 0x9326
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00b      	beq.n	8003b5c <setRotation+0x33c>
 8003b44:	f249 3226 	movw	r2, #37670	@ 0x9326
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	dc47      	bgt.n	8003bdc <setRotation+0x3bc>
 8003b4c:	f245 4220 	movw	r2, #21536	@ 0x5420
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d003      	beq.n	8003b5c <setRotation+0x33c>
 8003b54:	f247 7293 	movw	r2, #30611	@ 0x7793
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d13f      	bne.n	8003bdc <setRotation+0x3bc>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 8003b5c:	4b68      	ldr	r3, [pc, #416]	@ (8003d00 <setRotation+0x4e0>)
 8003b5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b62:	801a      	strh	r2, [r3, #0]
 8003b64:	4b67      	ldr	r3, [pc, #412]	@ (8003d04 <setRotation+0x4e4>)
 8003b66:	f240 2201 	movw	r2, #513	@ 0x201
 8003b6a:	801a      	strh	r2, [r3, #0]
 8003b6c:	4b66      	ldr	r3, [pc, #408]	@ (8003d08 <setRotation+0x4e8>)
 8003b6e:	f240 2202 	movw	r2, #514	@ 0x202
 8003b72:	801a      	strh	r2, [r3, #0]
 8003b74:	4b65      	ldr	r3, [pc, #404]	@ (8003d0c <setRotation+0x4ec>)
 8003b76:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8003b7a:	801a      	strh	r2, [r3, #0]
 8003b7c:	4b64      	ldr	r3, [pc, #400]	@ (8003d10 <setRotation+0x4f0>)
 8003b7e:	f240 2211 	movw	r2, #529	@ 0x211
 8003b82:	801a      	strh	r2, [r3, #0]
 8003b84:	4b63      	ldr	r3, [pc, #396]	@ (8003d14 <setRotation+0x4f4>)
 8003b86:	f240 2212 	movw	r2, #530	@ 0x212
 8003b8a:	801a      	strh	r2, [r3, #0]
 8003b8c:	4b62      	ldr	r3, [pc, #392]	@ (8003d18 <setRotation+0x4f8>)
 8003b8e:	f240 2213 	movw	r2, #531	@ 0x213
 8003b92:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8003b94:	7afb      	ldrb	r3, [r7, #11]
 8003b96:	b25b      	sxtb	r3, r3
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003b9e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003ba2:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 8003ba4:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8003ba8:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 8003baa:	4b5e      	ldr	r3, [pc, #376]	@ (8003d24 <setRotation+0x504>)
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	f249 3226 	movw	r2, #37670	@ 0x9326
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d005      	beq.n	8003bc2 <setRotation+0x3a2>
 8003bb6:	4b5b      	ldr	r3, [pc, #364]	@ (8003d24 <setRotation+0x504>)
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	f245 4220 	movw	r2, #21536	@ 0x5420
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d102      	bne.n	8003bc8 <setRotation+0x3a8>
 8003bc2:	8abb      	ldrh	r3, [r7, #20]
 8003bc4:	085b      	lsrs	r3, r3, #1
 8003bc6:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 8003bc8:	8a3a      	ldrh	r2, [r7, #16]
 8003bca:	8abb      	ldrh	r3, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003bd6:	f7fd fcb4 	bl	8001542 <WriteCmdData>
           goto common_SS;
 8003bda:	e024      	b.n	8003c26 <setRotation+0x406>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8003bdc:	4b48      	ldr	r3, [pc, #288]	@ (8003d00 <setRotation+0x4e0>)
 8003bde:	2220      	movs	r2, #32
 8003be0:	801a      	strh	r2, [r3, #0]
 8003be2:	4b48      	ldr	r3, [pc, #288]	@ (8003d04 <setRotation+0x4e4>)
 8003be4:	2221      	movs	r2, #33	@ 0x21
 8003be6:	801a      	strh	r2, [r3, #0]
 8003be8:	4b47      	ldr	r3, [pc, #284]	@ (8003d08 <setRotation+0x4e8>)
 8003bea:	2222      	movs	r2, #34	@ 0x22
 8003bec:	801a      	strh	r2, [r3, #0]
 8003bee:	4b47      	ldr	r3, [pc, #284]	@ (8003d0c <setRotation+0x4ec>)
 8003bf0:	2250      	movs	r2, #80	@ 0x50
 8003bf2:	801a      	strh	r2, [r3, #0]
 8003bf4:	4b46      	ldr	r3, [pc, #280]	@ (8003d10 <setRotation+0x4f0>)
 8003bf6:	2251      	movs	r2, #81	@ 0x51
 8003bf8:	801a      	strh	r2, [r3, #0]
 8003bfa:	4b46      	ldr	r3, [pc, #280]	@ (8003d14 <setRotation+0x4f4>)
 8003bfc:	2252      	movs	r2, #82	@ 0x52
 8003bfe:	801a      	strh	r2, [r3, #0]
 8003c00:	4b45      	ldr	r3, [pc, #276]	@ (8003d18 <setRotation+0x4f8>)
 8003c02:	2253      	movs	r2, #83	@ 0x53
 8003c04:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8003c06:	7afb      	ldrb	r3, [r7, #11]
 8003c08:	b25b      	sxtb	r3, r3
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003c10:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003c14:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 8003c16:	8a3b      	ldrh	r3, [r7, #16]
 8003c18:	f443 531c 	orr.w	r3, r3, #9984	@ 0x2700
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	4619      	mov	r1, r3
 8003c20:	2060      	movs	r0, #96	@ 0x60
 8003c22:	f7fd fc8e 	bl	8001542 <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 8003c26:	7afb      	ldrb	r3, [r7, #11]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c30:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8003c32:	89fb      	ldrh	r3, [r7, #14]
 8003c34:	4619      	mov	r1, r3
 8003c36:	2001      	movs	r0, #1
 8003c38:	f7fd fc83 	bl	8001542 <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 8003c3c:	7afb      	ldrb	r3, [r7, #11]
 8003c3e:	109b      	asrs	r3, r3, #2
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 8003c48:	7afb      	ldrb	r3, [r7, #11]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <setRotation+0x43a>
               ORG |= 0x1000;  //BGR
 8003c52:	8afb      	ldrh	r3, [r7, #22]
 8003c54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c58:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 8003c5a:	8afb      	ldrh	r3, [r7, #22]
 8003c5c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	4b2f      	ldr	r3, [pc, #188]	@ (8003d20 <setRotation+0x500>)
 8003c64:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 8003c66:	4b2e      	ldr	r3, [pc, #184]	@ (8003d20 <setRotation+0x500>)
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	2003      	movs	r0, #3
 8003c6e:	f7fd fc68 	bl	8001542 <WriteCmdData>
           break;
 8003c72:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8003c74:	4b2c      	ldr	r3, [pc, #176]	@ (8003d28 <setRotation+0x508>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d023      	beq.n	8003cc8 <setRotation+0x4a8>
 8003c80:	4b2a      	ldr	r3, [pc, #168]	@ (8003d2c <setRotation+0x50c>)
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d11d      	bne.n	8003cc8 <setRotation+0x4a8>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 8003c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8003d00 <setRotation+0x4e0>)
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	81bb      	strh	r3, [r7, #12]
 8003c92:	4b1c      	ldr	r3, [pc, #112]	@ (8003d04 <setRotation+0x4e4>)
 8003c94:	881a      	ldrh	r2, [r3, #0]
 8003c96:	4b1a      	ldr	r3, [pc, #104]	@ (8003d00 <setRotation+0x4e0>)
 8003c98:	801a      	strh	r2, [r3, #0]
 8003c9a:	4a1a      	ldr	r2, [pc, #104]	@ (8003d04 <setRotation+0x4e4>)
 8003c9c:	89bb      	ldrh	r3, [r7, #12]
 8003c9e:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8003ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d0c <setRotation+0x4ec>)
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	81bb      	strh	r3, [r7, #12]
 8003ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d14 <setRotation+0x4f4>)
 8003ca8:	881a      	ldrh	r2, [r3, #0]
 8003caa:	4b18      	ldr	r3, [pc, #96]	@ (8003d0c <setRotation+0x4ec>)
 8003cac:	801a      	strh	r2, [r3, #0]
 8003cae:	4a19      	ldr	r2, [pc, #100]	@ (8003d14 <setRotation+0x4f4>)
 8003cb0:	89bb      	ldrh	r3, [r7, #12]
 8003cb2:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8003cb4:	4b16      	ldr	r3, [pc, #88]	@ (8003d10 <setRotation+0x4f0>)
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	81bb      	strh	r3, [r7, #12]
 8003cba:	4b17      	ldr	r3, [pc, #92]	@ (8003d18 <setRotation+0x4f8>)
 8003cbc:	881a      	ldrh	r2, [r3, #0]
 8003cbe:	4b14      	ldr	r3, [pc, #80]	@ (8003d10 <setRotation+0x4f0>)
 8003cc0:	801a      	strh	r2, [r3, #0]
 8003cc2:	4a15      	ldr	r2, [pc, #84]	@ (8003d18 <setRotation+0x4f8>)
 8003cc4:	89bb      	ldrh	r3, [r7, #12]
 8003cc6:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 8003cc8:	f7fd fb74 	bl	80013b4 <width>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	b21c      	sxth	r4, r3
 8003cd4:	f7fd fb7a 	bl	80013cc <height>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	b21b      	sxth	r3, r3
 8003ce0:	4622      	mov	r2, r4
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	f000 f919 	bl	8003f1c <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8003cea:	2200      	movs	r2, #0
 8003cec:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	f000 fa37 	bl	8004164 <vertScroll>
}
 8003cf6:	bf00      	nop
 8003cf8:	371c      	adds	r7, #28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd90      	pop	{r4, r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000164 	.word	0x20000164
 8003d04:	20000166 	.word	0x20000166
 8003d08:	20000168 	.word	0x20000168
 8003d0c:	2000016a 	.word	0x2000016a
 8003d10:	2000016c 	.word	0x2000016c
 8003d14:	2000016e 	.word	0x2000016e
 8003d18:	20000170 	.word	0x20000170
 8003d1c:	20000156 	.word	0x20000156
 8003d20:	20000162 	.word	0x20000162
 8003d24:	2000015e 	.word	0x2000015e
 8003d28:	20000159 	.word	0x20000159
 8003d2c:	2000015c 	.word	0x2000015c

08003d30 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	80fb      	strh	r3, [r7, #6]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	80bb      	strh	r3, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 8003d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f2c0 80d7 	blt.w	8003efa <drawPixel+0x1ca>
 8003d4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f2c0 80d2 	blt.w	8003efa <drawPixel+0x1ca>
 8003d56:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8003d5a:	f7fd fb2b 	bl	80013b4 <width>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	429c      	cmp	r4, r3
 8003d62:	f280 80ca 	bge.w	8003efa <drawPixel+0x1ca>
 8003d66:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003d6a:	f7fd fb2f 	bl	80013cc <height>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	429c      	cmp	r4, r3
 8003d72:	f280 80c2 	bge.w	8003efa <drawPixel+0x1ca>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 8003d76:	4b63      	ldr	r3, [pc, #396]	@ (8003f04 <drawPixel+0x1d4>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d005      	beq.n	8003d8a <drawPixel+0x5a>
 8003d7e:	887b      	ldrh	r3, [r7, #2]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fd fb2f 	bl	80013e4 <color565_to_555>
 8003d86:	4603      	mov	r3, r0
 8003d88:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 8003d8a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d92:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003d96:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003d9a:	f000 f8bf 	bl	8003f1c <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 8003d9e:	4b5a      	ldr	r3, [pc, #360]	@ (8003f08 <drawPixel+0x1d8>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80a1 	beq.w	8003eea <drawPixel+0x1ba>
 8003da8:	2101      	movs	r1, #1
 8003daa:	4858      	ldr	r0, [pc, #352]	@ (8003f0c <drawPixel+0x1dc>)
 8003dac:	f7fd fab4 	bl	8001318 <PIN_LOW>
 8003db0:	2110      	movs	r1, #16
 8003db2:	4857      	ldr	r0, [pc, #348]	@ (8003f10 <drawPixel+0x1e0>)
 8003db4:	f7fd fab0 	bl	8001318 <PIN_LOW>
 8003db8:	4b56      	ldr	r3, [pc, #344]	@ (8003f14 <drawPixel+0x1e4>)
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	0a1b      	lsrs	r3, r3, #8
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	73fb      	strb	r3, [r7, #15]
 8003dc2:	4b54      	ldr	r3, [pc, #336]	@ (8003f14 <drawPixel+0x1e4>)
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	73bb      	strb	r3, [r7, #14]
 8003dc8:	4b51      	ldr	r3, [pc, #324]	@ (8003f10 <drawPixel+0x1e0>)
 8003dca:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8003dce:	619a      	str	r2, [r3, #24]
 8003dd0:	4b4e      	ldr	r3, [pc, #312]	@ (8003f0c <drawPixel+0x1dc>)
 8003dd2:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8003dd6:	619a      	str	r2, [r3, #24]
 8003dd8:	4b4f      	ldr	r3, [pc, #316]	@ (8003f18 <drawPixel+0x1e8>)
 8003dda:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003dde:	619a      	str	r2, [r3, #24]
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df0:	431a      	orrs	r2, r3
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	025b      	lsls	r3, r3, #9
 8003df6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	4b44      	ldr	r3, [pc, #272]	@ (8003f10 <drawPixel+0x1e0>)
 8003dfe:	619a      	str	r2, [r3, #24]
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	105b      	asrs	r3, r3, #1
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	431a      	orrs	r2, r3
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	431a      	orrs	r2, r3
 8003e24:	4b39      	ldr	r3, [pc, #228]	@ (8003f0c <drawPixel+0x1dc>)
 8003e26:	619a      	str	r2, [r3, #24]
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
 8003e2a:	019b      	lsls	r3, r3, #6
 8003e2c:	4a3a      	ldr	r2, [pc, #232]	@ (8003f18 <drawPixel+0x1e8>)
 8003e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e32:	6193      	str	r3, [r2, #24]
 8003e34:	2102      	movs	r1, #2
 8003e36:	4836      	ldr	r0, [pc, #216]	@ (8003f10 <drawPixel+0x1e0>)
 8003e38:	f7fd fa6e 	bl	8001318 <PIN_LOW>
 8003e3c:	2102      	movs	r1, #2
 8003e3e:	4834      	ldr	r0, [pc, #208]	@ (8003f10 <drawPixel+0x1e0>)
 8003e40:	f7fd fa7a 	bl	8001338 <PIN_HIGH>
 8003e44:	2102      	movs	r1, #2
 8003e46:	4832      	ldr	r0, [pc, #200]	@ (8003f10 <drawPixel+0x1e0>)
 8003e48:	f7fd fa76 	bl	8001338 <PIN_HIGH>
 8003e4c:	4b30      	ldr	r3, [pc, #192]	@ (8003f10 <drawPixel+0x1e0>)
 8003e4e:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8003e52:	619a      	str	r2, [r3, #24]
 8003e54:	4b2d      	ldr	r3, [pc, #180]	@ (8003f0c <drawPixel+0x1dc>)
 8003e56:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8003e5a:	619a      	str	r2, [r3, #24]
 8003e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003f18 <drawPixel+0x1e8>)
 8003e5e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003e62:	619a      	str	r2, [r3, #24]
 8003e64:	7bbb      	ldrb	r3, [r7, #14]
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8003e6c:	7bbb      	ldrb	r3, [r7, #14]
 8003e6e:	021b      	lsls	r3, r3, #8
 8003e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e74:	431a      	orrs	r2, r3
 8003e76:	7bbb      	ldrb	r3, [r7, #14]
 8003e78:	025b      	lsls	r3, r3, #9
 8003e7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	4b23      	ldr	r3, [pc, #140]	@ (8003f10 <drawPixel+0x1e0>)
 8003e82:	619a      	str	r2, [r3, #24]
 8003e84:	7bbb      	ldrb	r3, [r7, #14]
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8003e8c:	7bbb      	ldrb	r3, [r7, #14]
 8003e8e:	105b      	asrs	r3, r3, #1
 8003e90:	f003 0310 	and.w	r3, r3, #16
 8003e94:	431a      	orrs	r2, r3
 8003e96:	7bbb      	ldrb	r3, [r7, #14]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	7bbb      	ldrb	r3, [r7, #14]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	4b18      	ldr	r3, [pc, #96]	@ (8003f0c <drawPixel+0x1dc>)
 8003eaa:	619a      	str	r2, [r3, #24]
 8003eac:	7bbb      	ldrb	r3, [r7, #14]
 8003eae:	019b      	lsls	r3, r3, #6
 8003eb0:	4a19      	ldr	r2, [pc, #100]	@ (8003f18 <drawPixel+0x1e8>)
 8003eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb6:	6193      	str	r3, [r2, #24]
 8003eb8:	2102      	movs	r1, #2
 8003eba:	4815      	ldr	r0, [pc, #84]	@ (8003f10 <drawPixel+0x1e0>)
 8003ebc:	f7fd fa2c 	bl	8001318 <PIN_LOW>
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	4813      	ldr	r0, [pc, #76]	@ (8003f10 <drawPixel+0x1e0>)
 8003ec4:	f7fd fa38 	bl	8001338 <PIN_HIGH>
 8003ec8:	2102      	movs	r1, #2
 8003eca:	4811      	ldr	r0, [pc, #68]	@ (8003f10 <drawPixel+0x1e0>)
 8003ecc:	f7fd fa34 	bl	8001338 <PIN_HIGH>
 8003ed0:	2110      	movs	r1, #16
 8003ed2:	480f      	ldr	r0, [pc, #60]	@ (8003f10 <drawPixel+0x1e0>)
 8003ed4:	f7fd fa30 	bl	8001338 <PIN_HIGH>
 8003ed8:	887b      	ldrh	r3, [r7, #2]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fd fbb2 	bl	8001644 <write24>
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	480a      	ldr	r0, [pc, #40]	@ (8003f0c <drawPixel+0x1dc>)
 8003ee4:	f7fd fa28 	bl	8001338 <PIN_HIGH>
 8003ee8:	e008      	b.n	8003efc <drawPixel+0x1cc>
   WriteCmdData(_MW, color);
 8003eea:	4b0a      	ldr	r3, [pc, #40]	@ (8003f14 <drawPixel+0x1e4>)
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	887a      	ldrh	r2, [r7, #2]
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fd fb25 	bl	8001542 <WriteCmdData>
 8003ef8:	e000      	b.n	8003efc <drawPixel+0x1cc>
       return;
 8003efa:	bf00      	nop
}
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd90      	pop	{r4, r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000157 	.word	0x20000157
 8003f08:	20000158 	.word	0x20000158
 8003f0c:	40020400 	.word	0x40020400
 8003f10:	40020000 	.word	0x40020000
 8003f14:	20000168 	.word	0x20000168
 8003f18:	40020800 	.word	0x40020800

08003f1c <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8003f1c:	b590      	push	{r4, r7, lr}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	4604      	mov	r4, r0
 8003f24:	4608      	mov	r0, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4623      	mov	r3, r4
 8003f2c:	80fb      	strh	r3, [r7, #6]
 8003f2e:	4603      	mov	r3, r0
 8003f30:	80bb      	strh	r3, [r7, #4]
 8003f32:	460b      	mov	r3, r1
 8003f34:	807b      	strh	r3, [r7, #2]
 8003f36:	4613      	mov	r3, r2
 8003f38:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8003f3a:	4b80      	ldr	r3, [pc, #512]	@ (800413c <setAddrWindow+0x220>)
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	f249 3227 	movw	r2, #37671	@ 0x9327
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d117      	bne.n	8003f76 <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 8003f46:	4b7e      	ldr	r3, [pc, #504]	@ (8004140 <setAddrWindow+0x224>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d107      	bne.n	8003f5e <setAddrWindow+0x42>
 8003f4e:	88bb      	ldrh	r3, [r7, #4]
 8003f50:	3320      	adds	r3, #32
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	80bb      	strh	r3, [r7, #4]
 8003f56:	883b      	ldrh	r3, [r7, #0]
 8003f58:	3320      	adds	r3, #32
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 8003f5e:	4b78      	ldr	r3, [pc, #480]	@ (8004140 <setAddrWindow+0x224>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d107      	bne.n	8003f76 <setAddrWindow+0x5a>
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	3320      	adds	r3, #32
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	80fb      	strh	r3, [r7, #6]
 8003f6e:	887b      	ldrh	r3, [r7, #2]
 8003f70:	3320      	adds	r3, #32
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 8003f76:	4b71      	ldr	r3, [pc, #452]	@ (800413c <setAddrWindow+0x220>)
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	f241 5226 	movw	r2, #5414	@ 0x1526
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d128      	bne.n	8003fd4 <setAddrWindow+0xb8>
 8003f82:	4b6f      	ldr	r3, [pc, #444]	@ (8004140 <setAddrWindow+0x224>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d022      	beq.n	8003fd4 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8003f8e:	887a      	ldrh	r2, [r7, #2]
 8003f90:	88fb      	ldrh	r3, [r7, #6]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	81fb      	strh	r3, [r7, #14]
 8003f98:	883a      	ldrh	r2, [r7, #0]
 8003f9a:	88bb      	ldrh	r3, [r7, #4]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8003fa2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <setAddrWindow+0x9c>
 8003faa:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	803b      	strh	r3, [r7, #0]
 8003fb6:	e00d      	b.n	8003fd4 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 8003fb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d109      	bne.n	8003fd4 <setAddrWindow+0xb8>
 8003fc0:	887a      	ldrh	r2, [r7, #2]
 8003fc2:	89bb      	ldrh	r3, [r7, #12]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	807b      	strh	r3, [r7, #2]
 8003fca:	883a      	ldrh	r2, [r7, #0]
 8003fcc:	89bb      	ldrh	r3, [r7, #12]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 8003fd4:	4b5b      	ldr	r3, [pc, #364]	@ (8004144 <setAddrWindow+0x228>)
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d054      	beq.n	800408a <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8003fe0:	4b59      	ldr	r3, [pc, #356]	@ (8004148 <setAddrWindow+0x22c>)
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	b2d8      	uxtb	r0, r3
 8003fe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fea:	121b      	asrs	r3, r3, #8
 8003fec:	b21b      	sxth	r3, r3
 8003fee:	b2d9      	uxtb	r1, r3
 8003ff0:	88fb      	ldrh	r3, [r7, #6]
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ff8:	121b      	asrs	r3, r3, #8
 8003ffa:	b21b      	sxth	r3, r3
 8003ffc:	b2dc      	uxtb	r4, r3
 8003ffe:	887b      	ldrh	r3, [r7, #2]
 8004000:	b2db      	uxtb	r3, r3
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	4623      	mov	r3, r4
 8004006:	f7fd fee1 	bl	8001dcc <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 800400a:	4b50      	ldr	r3, [pc, #320]	@ (800414c <setAddrWindow+0x230>)
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	b2d8      	uxtb	r0, r3
 8004010:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004014:	121b      	asrs	r3, r3, #8
 8004016:	b21b      	sxth	r3, r3
 8004018:	b2d9      	uxtb	r1, r3
 800401a:	88bb      	ldrh	r3, [r7, #4]
 800401c:	b2da      	uxtb	r2, r3
 800401e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004022:	121b      	asrs	r3, r3, #8
 8004024:	b21b      	sxth	r3, r3
 8004026:	b2dc      	uxtb	r4, r3
 8004028:	883b      	ldrh	r3, [r7, #0]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	4623      	mov	r3, r4
 8004030:	f7fd fecc 	bl	8001dcc <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8004034:	4b46      	ldr	r3, [pc, #280]	@ (8004150 <setAddrWindow+0x234>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d07b      	beq.n	8004134 <setAddrWindow+0x218>
 800403c:	4b3f      	ldr	r3, [pc, #252]	@ (800413c <setAddrWindow+0x220>)
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	2b65      	cmp	r3, #101	@ 0x65
 8004042:	d177      	bne.n	8004134 <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 8004044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004048:	121b      	asrs	r3, r3, #8
 800404a:	b21b      	sxth	r3, r3
 800404c:	b2db      	uxtb	r3, r3
 800404e:	723b      	strb	r3, [r7, #8]
 8004050:	88fb      	ldrh	r3, [r7, #6]
 8004052:	b2db      	uxtb	r3, r3
 8004054:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 8004056:	4b3f      	ldr	r3, [pc, #252]	@ (8004154 <setAddrWindow+0x238>)
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	f107 0208 	add.w	r2, r7, #8
 800405e:	2102      	movs	r1, #2
 8004060:	4618      	mov	r0, r3
 8004062:	f7fd fd0d 	bl	8001a80 <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 8004066:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800406a:	121b      	asrs	r3, r3, #8
 800406c:	b21b      	sxth	r3, r3
 800406e:	b2db      	uxtb	r3, r3
 8004070:	723b      	strb	r3, [r7, #8]
 8004072:	88bb      	ldrh	r3, [r7, #4]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 8004078:	4b37      	ldr	r3, [pc, #220]	@ (8004158 <setAddrWindow+0x23c>)
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	f107 0208 	add.w	r2, r7, #8
 8004080:	2102      	movs	r1, #2
 8004082:	4618      	mov	r0, r3
 8004084:	f7fd fcfc 	bl	8001a80 <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8004088:	e054      	b.n	8004134 <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 800408a:	4b32      	ldr	r3, [pc, #200]	@ (8004154 <setAddrWindow+0x238>)
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	88fa      	ldrh	r2, [r7, #6]
 8004090:	4611      	mov	r1, r2
 8004092:	4618      	mov	r0, r3
 8004094:	f7fd fa55 	bl	8001542 <WriteCmdData>
       WriteCmdData(_MP, y);
 8004098:	4b2f      	ldr	r3, [pc, #188]	@ (8004158 <setAddrWindow+0x23c>)
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	88ba      	ldrh	r2, [r7, #4]
 800409e:	4611      	mov	r1, r2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fd fa4e 	bl	8001542 <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 80040a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80040aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d105      	bne.n	80040be <setAddrWindow+0x1a2>
 80040b2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80040b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d03a      	beq.n	8004134 <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 80040be:	4b21      	ldr	r3, [pc, #132]	@ (8004144 <setAddrWindow+0x228>)
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d018      	beq.n	80040fc <setAddrWindow+0x1e0>
               if (rotation & 1)
 80040ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004140 <setAddrWindow+0x224>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d009      	beq.n	80040ea <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 80040d6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80040da:	021b      	lsls	r3, r3, #8
 80040dc:	b21a      	sxth	r2, r3
 80040de:	88bb      	ldrh	r3, [r7, #4]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	80bb      	strh	r3, [r7, #4]
 80040e4:	88bb      	ldrh	r3, [r7, #4]
 80040e6:	803b      	strh	r3, [r7, #0]
 80040e8:	e008      	b.n	80040fc <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 80040ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80040ee:	021b      	lsls	r3, r3, #8
 80040f0:	b21a      	sxth	r2, r3
 80040f2:	88fb      	ldrh	r3, [r7, #6]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	80fb      	strh	r3, [r7, #6]
 80040f8:	88fb      	ldrh	r3, [r7, #6]
 80040fa:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 80040fc:	4b12      	ldr	r3, [pc, #72]	@ (8004148 <setAddrWindow+0x22c>)
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	88fa      	ldrh	r2, [r7, #6]
 8004102:	4611      	mov	r1, r2
 8004104:	4618      	mov	r0, r3
 8004106:	f7fd fa1c 	bl	8001542 <WriteCmdData>
           WriteCmdData(_SP, y);
 800410a:	4b10      	ldr	r3, [pc, #64]	@ (800414c <setAddrWindow+0x230>)
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	88ba      	ldrh	r2, [r7, #4]
 8004110:	4611      	mov	r1, r2
 8004112:	4618      	mov	r0, r3
 8004114:	f7fd fa15 	bl	8001542 <WriteCmdData>
           WriteCmdData(_EC, x1);
 8004118:	4b10      	ldr	r3, [pc, #64]	@ (800415c <setAddrWindow+0x240>)
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	887a      	ldrh	r2, [r7, #2]
 800411e:	4611      	mov	r1, r2
 8004120:	4618      	mov	r0, r3
 8004122:	f7fd fa0e 	bl	8001542 <WriteCmdData>
           WriteCmdData(_EP, y1);
 8004126:	4b0e      	ldr	r3, [pc, #56]	@ (8004160 <setAddrWindow+0x244>)
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	883a      	ldrh	r2, [r7, #0]
 800412c:	4611      	mov	r1, r2
 800412e:	4618      	mov	r0, r3
 8004130:	f7fd fa07 	bl	8001542 <WriteCmdData>
}
 8004134:	bf00      	nop
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	bd90      	pop	{r4, r7, pc}
 800413c:	2000015e 	.word	0x2000015e
 8004140:	20000159 	.word	0x20000159
 8004144:	2000015c 	.word	0x2000015c
 8004148:	2000016a 	.word	0x2000016a
 800414c:	2000016e 	.word	0x2000016e
 8004150:	20000156 	.word	0x20000156
 8004154:	20000164 	.word	0x20000164
 8004158:	20000166 	.word	0x20000166
 800415c:	2000016c 	.word	0x2000016c
 8004160:	20000170 	.word	0x20000170

08004164 <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	80fb      	strh	r3, [r7, #6]
 800416e:	460b      	mov	r3, r1
 8004170:	80bb      	strh	r3, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8004176:	4b89      	ldr	r3, [pc, #548]	@ (800439c <vertScroll+0x238>)
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	f249 3227 	movw	r2, #37671	@ 0x9327
 800417e:	4293      	cmp	r3, r2
 8004180:	d10b      	bne.n	800419a <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8004182:	4b87      	ldr	r3, [pc, #540]	@ (80043a0 <vertScroll+0x23c>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b02      	cmp	r3, #2
 8004188:	d003      	beq.n	8004192 <vertScroll+0x2e>
 800418a:	4b85      	ldr	r3, [pc, #532]	@ (80043a0 <vertScroll+0x23c>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b03      	cmp	r3, #3
 8004190:	d103      	bne.n	800419a <vertScroll+0x36>
 8004192:	88fb      	ldrh	r3, [r7, #6]
 8004194:	3320      	adds	r3, #32
 8004196:	b29b      	uxth	r3, r3
 8004198:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 800419a:	88fa      	ldrh	r2, [r7, #6]
 800419c:	88bb      	ldrh	r3, [r7, #4]
 800419e:	4413      	add	r3, r2
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 80041ae:	4b7b      	ldr	r3, [pc, #492]	@ (800439c <vertScroll+0x238>)
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	f249 3227 	movw	r2, #37671	@ 0x9327
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d103      	bne.n	80041c2 <vertScroll+0x5e>
 80041ba:	8afb      	ldrh	r3, [r7, #22]
 80041bc:	3320      	adds	r3, #32
 80041be:	b29b      	uxth	r3, r3
 80041c0:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 80041c2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80041c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80041ca:	425b      	negs	r3, r3
 80041cc:	429a      	cmp	r2, r3
 80041ce:	dd05      	ble.n	80041dc <vertScroll+0x78>
 80041d0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80041d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80041d8:	429a      	cmp	r2, r3
 80041da:	db01      	blt.n	80041e0 <vertScroll+0x7c>
 80041dc:	2300      	movs	r3, #0
 80041de:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 80041e0:	88fa      	ldrh	r2, [r7, #6]
 80041e2:	887b      	ldrh	r3, [r7, #2]
 80041e4:	4413      	add	r3, r2
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 80041ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	da04      	bge.n	80041fc <vertScroll+0x98>
        vsp += scrollines;          //keep in unsigned range
 80041f2:	8aba      	ldrh	r2, [r7, #20]
 80041f4:	88bb      	ldrh	r3, [r7, #4]
 80041f6:	4413      	add	r3, r2
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 80041fc:	88fa      	ldrh	r2, [r7, #6]
 80041fe:	88bb      	ldrh	r3, [r7, #4]
 8004200:	4413      	add	r3, r2
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29b      	uxth	r3, r3
 8004208:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 800420a:	4b66      	ldr	r3, [pc, #408]	@ (80043a4 <vertScroll+0x240>)
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d071      	beq.n	80042fa <vertScroll+0x196>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 8004216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800421a:	121b      	asrs	r3, r3, #8
 800421c:	b21b      	sxth	r3, r3
 800421e:	b2db      	uxtb	r3, r3
 8004220:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 8004228:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800422c:	121b      	asrs	r3, r3, #8
 800422e:	b21b      	sxth	r3, r3
 8004230:	b2db      	uxtb	r3, r3
 8004232:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 8004234:	88bb      	ldrh	r3, [r7, #4]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 800423a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800423e:	121b      	asrs	r3, r3, #8
 8004240:	b21b      	sxth	r3, r3
 8004242:	b2db      	uxtb	r3, r3
 8004244:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 8004246:	8afb      	ldrh	r3, [r7, #22]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 800424c:	4b56      	ldr	r3, [pc, #344]	@ (80043a8 <vertScroll+0x244>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <vertScroll+0xf4>
 8004254:	230e      	movs	r3, #14
 8004256:	e000      	b.n	800425a <vertScroll+0xf6>
 8004258:	2333      	movs	r3, #51	@ 0x33
 800425a:	f107 020c 	add.w	r2, r7, #12
 800425e:	2106      	movs	r1, #6
 8004260:	4618      	mov	r0, r3
 8004262:	f7fd fc0d 	bl	8001a80 <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 8004266:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800426a:	121b      	asrs	r3, r3, #8
 800426c:	b21b      	sxth	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 8004272:	8abb      	ldrh	r3, [r7, #20]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 8004278:	4b4b      	ldr	r3, [pc, #300]	@ (80043a8 <vertScroll+0x244>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <vertScroll+0x120>
 8004280:	2314      	movs	r3, #20
 8004282:	e000      	b.n	8004286 <vertScroll+0x122>
 8004284:	2337      	movs	r3, #55	@ 0x37
 8004286:	f107 020c 	add.w	r2, r7, #12
 800428a:	2102      	movs	r1, #2
 800428c:	4618      	mov	r0, r3
 800428e:	f7fd fbf7 	bl	8001a80 <WriteCmdParamN>
		if (is8347) {
 8004292:	4b45      	ldr	r3, [pc, #276]	@ (80043a8 <vertScroll+0x244>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d01f      	beq.n	80042da <vertScroll+0x176>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 800429a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <vertScroll+0x152>
 80042a2:	4b3e      	ldr	r3, [pc, #248]	@ (800439c <vertScroll+0x238>)
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	f248 3247 	movw	r2, #33607	@ 0x8347
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d101      	bne.n	80042b2 <vertScroll+0x14e>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e002      	b.n	80042b8 <vertScroll+0x154>
 80042b2:	2308      	movs	r3, #8
 80042b4:	e000      	b.n	80042b8 <vertScroll+0x154>
 80042b6:	2300      	movs	r3, #0
 80042b8:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 80042ba:	4b38      	ldr	r3, [pc, #224]	@ (800439c <vertScroll+0x238>)
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	f248 3247 	movw	r2, #33607	@ 0x8347
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d101      	bne.n	80042ca <vertScroll+0x166>
 80042c6:	2318      	movs	r3, #24
 80042c8:	e000      	b.n	80042cc <vertScroll+0x168>
 80042ca:	2301      	movs	r3, #1
 80042cc:	f107 020c 	add.w	r2, r7, #12
 80042d0:	2101      	movs	r1, #1
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fd fbd4 	bl	8001a80 <WriteCmdParamN>
 80042d8:	e05d      	b.n	8004396 <vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 80042da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d159      	bne.n	8004396 <vertScroll+0x232>
 80042e2:	4b30      	ldr	r3, [pc, #192]	@ (80043a4 <vertScroll+0x240>)
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d053      	beq.n	8004396 <vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 80042ee:	2200      	movs	r2, #0
 80042f0:	2100      	movs	r1, #0
 80042f2:	2013      	movs	r0, #19
 80042f4:	f7fd fbc4 	bl	8001a80 <WriteCmdParamN>
 80042f8:	e04d      	b.n	8004396 <vertScroll+0x232>
		}
		return;
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 80042fa:	4b28      	ldr	r3, [pc, #160]	@ (800439c <vertScroll+0x238>)
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8004302:	4293      	cmp	r3, r2
 8004304:	d027      	beq.n	8004356 <vertScroll+0x1f2>
 8004306:	f24b 5209 	movw	r2, #46345	@ 0xb509
 800430a:	4293      	cmp	r3, r2
 800430c:	dc34      	bgt.n	8004378 <vertScroll+0x214>
 800430e:	f249 3226 	movw	r2, #37670	@ 0x9326
 8004312:	4293      	cmp	r3, r2
 8004314:	d01f      	beq.n	8004356 <vertScroll+0x1f2>
 8004316:	f249 3226 	movw	r2, #37670	@ 0x9326
 800431a:	4293      	cmp	r3, r2
 800431c:	dc2c      	bgt.n	8004378 <vertScroll+0x214>
 800431e:	f247 7293 	movw	r2, #30611	@ 0x7793
 8004322:	4293      	cmp	r3, r2
 8004324:	d017      	beq.n	8004356 <vertScroll+0x1f2>
 8004326:	f247 7293 	movw	r2, #30611	@ 0x7793
 800432a:	4293      	cmp	r3, r2
 800432c:	dc24      	bgt.n	8004378 <vertScroll+0x214>
 800432e:	f245 4220 	movw	r2, #21536	@ 0x5420
 8004332:	4293      	cmp	r3, r2
 8004334:	d00f      	beq.n	8004356 <vertScroll+0x1f2>
 8004336:	f247 7283 	movw	r2, #30595	@ 0x7783
 800433a:	4293      	cmp	r3, r2
 800433c:	d11c      	bne.n	8004378 <vertScroll+0x214>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 800433e:	4b1b      	ldr	r3, [pc, #108]	@ (80043ac <vertScroll+0x248>)
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	4619      	mov	r1, r3
 8004344:	2061      	movs	r0, #97	@ 0x61
 8004346:	f7fd f8fc 	bl	8001542 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 800434a:	8abb      	ldrh	r3, [r7, #20]
 800434c:	4619      	mov	r1, r3
 800434e:	206a      	movs	r0, #106	@ 0x6a
 8004350:	f7fd f8f7 	bl	8001542 <WriteCmdData>
        break;
 8004354:	e01f      	b.n	8004396 <vertScroll+0x232>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 8004356:	4b15      	ldr	r3, [pc, #84]	@ (80043ac <vertScroll+0x248>)
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	f043 0302 	orr.w	r3, r3, #2
 800435e:	b29b      	uxth	r3, r3
 8004360:	4619      	mov	r1, r3
 8004362:	f240 4001 	movw	r0, #1025	@ 0x401
 8004366:	f7fd f8ec 	bl	8001542 <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 800436a:	8abb      	ldrh	r3, [r7, #20]
 800436c:	4619      	mov	r1, r3
 800436e:	f240 4004 	movw	r0, #1028	@ 0x404
 8004372:	f7fd f8e6 	bl	8001542 <WriteCmdData>
        break;
 8004376:	e00e      	b.n	8004396 <vertScroll+0x232>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8004378:	4b0c      	ldr	r3, [pc, #48]	@ (80043ac <vertScroll+0x248>)
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	f043 0302 	orr.w	r3, r3, #2
 8004380:	b29b      	uxth	r3, r3
 8004382:	4619      	mov	r1, r3
 8004384:	2061      	movs	r0, #97	@ 0x61
 8004386:	f7fd f8dc 	bl	8001542 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 800438a:	8abb      	ldrh	r3, [r7, #20]
 800438c:	4619      	mov	r1, r3
 800438e:	206a      	movs	r0, #106	@ 0x6a
 8004390:	f7fd f8d7 	bl	8001542 <WriteCmdData>
        break;
 8004394:	bf00      	nop
    }
}
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	2000015e 	.word	0x2000015e
 80043a0:	20000159 	.word	0x20000159
 80043a4:	2000015c 	.word	0x2000015c
 80043a8:	20000156 	.word	0x20000156
 80043ac:	20000160 	.word	0x20000160

080043b0 <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	4603      	mov	r3, r0
 80043b8:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80043ba:	4b08      	ldr	r3, [pc, #32]	@ (80043dc <fillScreen+0x2c>)
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	b21a      	sxth	r2, r3
 80043c0:	4b07      	ldr	r3, [pc, #28]	@ (80043e0 <fillScreen+0x30>)
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	b219      	sxth	r1, r3
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	460b      	mov	r3, r1
 80043cc:	2100      	movs	r1, #0
 80043ce:	2000      	movs	r0, #0
 80043d0:	f000 f8ae 	bl	8004530 <fillRect>
}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	2000003c 	.word	0x2000003c
 80043e0:	2000003e 	.word	0x2000003e

080043e4 <invertDisplay>:

void invertDisplay(uint8_t i)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 80043ee:	4b4c      	ldr	r3, [pc, #304]	@ (8004520 <invertDisplay+0x13c>)
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	bf14      	ite	ne
 80043fa:	2301      	movne	r3, #1
 80043fc:	2300      	moveq	r3, #0
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	b21a      	sxth	r2, r3
 8004402:	79fb      	ldrb	r3, [r7, #7]
 8004404:	b21b      	sxth	r3, r3
 8004406:	4053      	eors	r3, r2
 8004408:	b21b      	sxth	r3, r3
 800440a:	b29a      	uxth	r2, r3
 800440c:	4b45      	ldr	r3, [pc, #276]	@ (8004524 <invertDisplay+0x140>)
 800440e:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8004410:	4b43      	ldr	r3, [pc, #268]	@ (8004520 <invertDisplay+0x13c>)
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d035      	beq.n	8004488 <invertDisplay+0xa4>
        if (is8347) {
 800441c:	4b42      	ldr	r3, [pc, #264]	@ (8004528 <invertDisplay+0x144>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d024      	beq.n	800446e <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 8004424:	4b41      	ldr	r3, [pc, #260]	@ (800452c <invertDisplay+0x148>)
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	f248 3247 	movw	r2, #33607	@ 0x8347
 800442c:	4293      	cmp	r3, r2
 800442e:	d005      	beq.n	800443c <invertDisplay+0x58>
 8004430:	4b3e      	ldr	r3, [pc, #248]	@ (800452c <invertDisplay+0x148>)
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	f245 2252 	movw	r2, #21074	@ 0x5252
 8004438:	4293      	cmp	r3, r2
 800443a:	d108      	bne.n	800444e <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 800443c:	4b39      	ldr	r3, [pc, #228]	@ (8004524 <invertDisplay+0x140>)
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <invertDisplay+0x64>
 8004444:	2306      	movs	r3, #6
 8004446:	e000      	b.n	800444a <invertDisplay+0x66>
 8004448:	2302      	movs	r3, #2
 800444a:	73fb      	strb	r3, [r7, #15]
 800444c:	e007      	b.n	800445e <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 800444e:	4b35      	ldr	r3, [pc, #212]	@ (8004524 <invertDisplay+0x140>)
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <invertDisplay+0x76>
 8004456:	2308      	movs	r3, #8
 8004458:	e000      	b.n	800445c <invertDisplay+0x78>
 800445a:	230a      	movs	r3, #10
 800445c:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 800445e:	f107 030f 	add.w	r3, r7, #15
 8004462:	461a      	mov	r2, r3
 8004464:	2101      	movs	r1, #1
 8004466:	2001      	movs	r0, #1
 8004468:	f7fd fb0a 	bl	8001a80 <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 800446c:	e055      	b.n	800451a <invertDisplay+0x136>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 800446e:	4b2d      	ldr	r3, [pc, #180]	@ (8004524 <invertDisplay+0x140>)
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <invertDisplay+0x96>
 8004476:	2321      	movs	r3, #33	@ 0x21
 8004478:	e000      	b.n	800447c <invertDisplay+0x98>
 800447a:	2320      	movs	r3, #32
 800447c:	2200      	movs	r2, #0
 800447e:	2100      	movs	r1, #0
 8004480:	4618      	mov	r0, r3
 8004482:	f7fd fafd 	bl	8001a80 <WriteCmdParamN>
 8004486:	e048      	b.n	800451a <invertDisplay+0x136>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8004488:	4b28      	ldr	r3, [pc, #160]	@ (800452c <invertDisplay+0x148>)
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8004490:	4293      	cmp	r3, r2
 8004492:	d030      	beq.n	80044f6 <invertDisplay+0x112>
 8004494:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8004498:	4293      	cmp	r3, r2
 800449a:	dc37      	bgt.n	800450c <invertDisplay+0x128>
 800449c:	f249 3226 	movw	r2, #37670	@ 0x9326
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d028      	beq.n	80044f6 <invertDisplay+0x112>
 80044a4:	f249 3226 	movw	r2, #37670	@ 0x9326
 80044a8:	4293      	cmp	r3, r2
 80044aa:	dc2f      	bgt.n	800450c <invertDisplay+0x128>
 80044ac:	f249 2225 	movw	r2, #37413	@ 0x9225
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d013      	beq.n	80044dc <invertDisplay+0xf8>
 80044b4:	f249 2225 	movw	r2, #37413	@ 0x9225
 80044b8:	4293      	cmp	r3, r2
 80044ba:	dc27      	bgt.n	800450c <invertDisplay+0x128>
 80044bc:	f247 7293 	movw	r2, #30611	@ 0x7793
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d018      	beq.n	80044f6 <invertDisplay+0x112>
 80044c4:	f247 7293 	movw	r2, #30611	@ 0x7793
 80044c8:	4293      	cmp	r3, r2
 80044ca:	dc1f      	bgt.n	800450c <invertDisplay+0x128>
 80044cc:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 80044d0:	d004      	beq.n	80044dc <invertDisplay+0xf8>
 80044d2:	f245 4220 	movw	r2, #21536	@ 0x5420
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00d      	beq.n	80044f6 <invertDisplay+0x112>
 80044da:	e017      	b.n	800450c <invertDisplay+0x128>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 80044dc:	4b11      	ldr	r3, [pc, #68]	@ (8004524 <invertDisplay+0x140>)
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	b21b      	sxth	r3, r3
 80044e4:	f043 0313 	orr.w	r3, r3, #19
 80044e8:	b21b      	sxth	r3, r3
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	4619      	mov	r1, r3
 80044ee:	2007      	movs	r0, #7
 80044f0:	f7fd f827 	bl	8001542 <WriteCmdData>
        break;
 80044f4:	e011      	b.n	800451a <invertDisplay+0x136>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 80044f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004524 <invertDisplay+0x140>)
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	f043 0302 	orr.w	r3, r3, #2
 80044fe:	b29b      	uxth	r3, r3
 8004500:	4619      	mov	r1, r3
 8004502:	f240 4001 	movw	r0, #1025	@ 0x401
 8004506:	f7fd f81c 	bl	8001542 <WriteCmdData>
        break;
 800450a:	e006      	b.n	800451a <invertDisplay+0x136>
    default:
        WriteCmdData(0x61, _lcd_rev);
 800450c:	4b05      	ldr	r3, [pc, #20]	@ (8004524 <invertDisplay+0x140>)
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	4619      	mov	r1, r3
 8004512:	2061      	movs	r0, #97	@ 0x61
 8004514:	f7fd f815 	bl	8001542 <WriteCmdData>
        break;
 8004518:	bf00      	nop
    }
}
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	2000015c 	.word	0x2000015c
 8004524:	20000160 	.word	0x20000160
 8004528:	20000156 	.word	0x20000156
 800452c:	2000015e 	.word	0x2000015e

08004530 <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8004530:	b590      	push	{r4, r7, lr}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	4604      	mov	r4, r0
 8004538:	4608      	mov	r0, r1
 800453a:	4611      	mov	r1, r2
 800453c:	461a      	mov	r2, r3
 800453e:	4623      	mov	r3, r4
 8004540:	80fb      	strh	r3, [r7, #6]
 8004542:	4603      	mov	r3, r0
 8004544:	80bb      	strh	r3, [r7, #4]
 8004546:	460b      	mov	r3, r1
 8004548:	807b      	strh	r3, [r7, #2]
 800454a:	4613      	mov	r3, r2
 800454c:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 800454e:	4b8d      	ldr	r3, [pc, #564]	@ (8004784 <fillRect+0x254>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <fillRect+0x32>
 8004556:	8c3b      	ldrh	r3, [r7, #32]
 8004558:	4618      	mov	r0, r3
 800455a:	f7fc ff43 	bl	80013e4 <color565_to_555>
 800455e:	4603      	mov	r3, r0
 8004560:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 8004562:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004566:	2b00      	cmp	r3, #0
 8004568:	da08      	bge.n	800457c <fillRect+0x4c>
        w = -w;
 800456a:	887b      	ldrh	r3, [r7, #2]
 800456c:	425b      	negs	r3, r3
 800456e:	b29b      	uxth	r3, r3
 8004570:	807b      	strh	r3, [r7, #2]
        x -= w;
 8004572:	88fa      	ldrh	r2, [r7, #6]
 8004574:	887b      	ldrh	r3, [r7, #2]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	b29b      	uxth	r3, r3
 800457a:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 800457c:	88fa      	ldrh	r2, [r7, #6]
 800457e:	887b      	ldrh	r3, [r7, #2]
 8004580:	4413      	add	r3, r2
 8004582:	b29b      	uxth	r3, r3
 8004584:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 8004586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800458a:	2b00      	cmp	r3, #0
 800458c:	da01      	bge.n	8004592 <fillRect+0x62>
        x = 0;
 800458e:	2300      	movs	r3, #0
 8004590:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 8004592:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8004596:	f7fc ff0d 	bl	80013b4 <width>
 800459a:	4603      	mov	r3, r0
 800459c:	429c      	cmp	r4, r3
 800459e:	dd03      	ble.n	80045a8 <fillRect+0x78>
        end = width();
 80045a0:	f7fc ff08 	bl	80013b4 <width>
 80045a4:	4603      	mov	r3, r0
 80045a6:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 80045a8:	89fa      	ldrh	r2, [r7, #14]
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 80045b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	da08      	bge.n	80045cc <fillRect+0x9c>
        h = -h;
 80045ba:	883b      	ldrh	r3, [r7, #0]
 80045bc:	425b      	negs	r3, r3
 80045be:	b29b      	uxth	r3, r3
 80045c0:	803b      	strh	r3, [r7, #0]
        y -= h;
 80045c2:	88ba      	ldrh	r2, [r7, #4]
 80045c4:	883b      	ldrh	r3, [r7, #0]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 80045cc:	88ba      	ldrh	r2, [r7, #4]
 80045ce:	883b      	ldrh	r3, [r7, #0]
 80045d0:	4413      	add	r3, r2
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 80045d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	da01      	bge.n	80045e2 <fillRect+0xb2>
        y = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 80045e2:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80045e6:	f7fc fef1 	bl	80013cc <height>
 80045ea:	4603      	mov	r3, r0
 80045ec:	429c      	cmp	r4, r3
 80045ee:	dd03      	ble.n	80045f8 <fillRect+0xc8>
        end = height();
 80045f0:	f7fc feec 	bl	80013cc <height>
 80045f4:	4603      	mov	r3, r0
 80045f6:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 80045f8:	89fa      	ldrh	r2, [r7, #14]
 80045fa:	88bb      	ldrh	r3, [r7, #4]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	b29b      	uxth	r3, r3
 8004600:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8004602:	88fa      	ldrh	r2, [r7, #6]
 8004604:	887b      	ldrh	r3, [r7, #2]
 8004606:	4413      	add	r3, r2
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29b      	uxth	r3, r3
 800460e:	b21c      	sxth	r4, r3
 8004610:	88ba      	ldrh	r2, [r7, #4]
 8004612:	883b      	ldrh	r3, [r7, #0]
 8004614:	4413      	add	r3, r2
 8004616:	b29b      	uxth	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	b29b      	uxth	r3, r3
 800461c:	b21b      	sxth	r3, r3
 800461e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004622:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004626:	4622      	mov	r2, r4
 8004628:	f7ff fc78 	bl	8003f1c <setAddrWindow>
    CS_ACTIVE;
 800462c:	2101      	movs	r1, #1
 800462e:	4856      	ldr	r0, [pc, #344]	@ (8004788 <fillRect+0x258>)
 8004630:	f7fc fe72 	bl	8001318 <PIN_LOW>
    WriteCmd(_MW);
 8004634:	2110      	movs	r1, #16
 8004636:	4855      	ldr	r0, [pc, #340]	@ (800478c <fillRect+0x25c>)
 8004638:	f7fc fe6e 	bl	8001318 <PIN_LOW>
 800463c:	4b54      	ldr	r3, [pc, #336]	@ (8004790 <fillRect+0x260>)
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	0a1b      	lsrs	r3, r3, #8
 8004642:	b29b      	uxth	r3, r3
 8004644:	737b      	strb	r3, [r7, #13]
 8004646:	4b52      	ldr	r3, [pc, #328]	@ (8004790 <fillRect+0x260>)
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	733b      	strb	r3, [r7, #12]
 800464c:	4b4f      	ldr	r3, [pc, #316]	@ (800478c <fillRect+0x25c>)
 800464e:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8004652:	619a      	str	r2, [r3, #24]
 8004654:	4b4c      	ldr	r3, [pc, #304]	@ (8004788 <fillRect+0x258>)
 8004656:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 800465a:	619a      	str	r2, [r3, #24]
 800465c:	4b4d      	ldr	r3, [pc, #308]	@ (8004794 <fillRect+0x264>)
 800465e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004662:	619a      	str	r2, [r3, #24]
 8004664:	7b7b      	ldrb	r3, [r7, #13]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800466c:	7b7b      	ldrb	r3, [r7, #13]
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004674:	431a      	orrs	r2, r3
 8004676:	7b7b      	ldrb	r3, [r7, #13]
 8004678:	025b      	lsls	r3, r3, #9
 800467a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800467e:	431a      	orrs	r2, r3
 8004680:	4b42      	ldr	r3, [pc, #264]	@ (800478c <fillRect+0x25c>)
 8004682:	619a      	str	r2, [r3, #24]
 8004684:	7b7b      	ldrb	r3, [r7, #13]
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800468c:	7b7b      	ldrb	r3, [r7, #13]
 800468e:	105b      	asrs	r3, r3, #1
 8004690:	f003 0310 	and.w	r3, r3, #16
 8004694:	431a      	orrs	r2, r3
 8004696:	7b7b      	ldrb	r3, [r7, #13]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	431a      	orrs	r2, r3
 80046a0:	7b7b      	ldrb	r3, [r7, #13]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	431a      	orrs	r2, r3
 80046a8:	4b37      	ldr	r3, [pc, #220]	@ (8004788 <fillRect+0x258>)
 80046aa:	619a      	str	r2, [r3, #24]
 80046ac:	7b7b      	ldrb	r3, [r7, #13]
 80046ae:	019b      	lsls	r3, r3, #6
 80046b0:	4a38      	ldr	r2, [pc, #224]	@ (8004794 <fillRect+0x264>)
 80046b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b6:	6193      	str	r3, [r2, #24]
 80046b8:	2102      	movs	r1, #2
 80046ba:	4834      	ldr	r0, [pc, #208]	@ (800478c <fillRect+0x25c>)
 80046bc:	f7fc fe2c 	bl	8001318 <PIN_LOW>
 80046c0:	2102      	movs	r1, #2
 80046c2:	4832      	ldr	r0, [pc, #200]	@ (800478c <fillRect+0x25c>)
 80046c4:	f7fc fe38 	bl	8001338 <PIN_HIGH>
 80046c8:	2102      	movs	r1, #2
 80046ca:	4830      	ldr	r0, [pc, #192]	@ (800478c <fillRect+0x25c>)
 80046cc:	f7fc fe34 	bl	8001338 <PIN_HIGH>
 80046d0:	4b2e      	ldr	r3, [pc, #184]	@ (800478c <fillRect+0x25c>)
 80046d2:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80046d6:	619a      	str	r2, [r3, #24]
 80046d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004788 <fillRect+0x258>)
 80046da:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80046de:	619a      	str	r2, [r3, #24]
 80046e0:	4b2c      	ldr	r3, [pc, #176]	@ (8004794 <fillRect+0x264>)
 80046e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80046e6:	619a      	str	r2, [r3, #24]
 80046e8:	7b3b      	ldrb	r3, [r7, #12]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80046f0:	7b3b      	ldrb	r3, [r7, #12]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f8:	431a      	orrs	r2, r3
 80046fa:	7b3b      	ldrb	r3, [r7, #12]
 80046fc:	025b      	lsls	r3, r3, #9
 80046fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004702:	431a      	orrs	r2, r3
 8004704:	4b21      	ldr	r3, [pc, #132]	@ (800478c <fillRect+0x25c>)
 8004706:	619a      	str	r2, [r3, #24]
 8004708:	7b3b      	ldrb	r3, [r7, #12]
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8004710:	7b3b      	ldrb	r3, [r7, #12]
 8004712:	105b      	asrs	r3, r3, #1
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	431a      	orrs	r2, r3
 800471a:	7b3b      	ldrb	r3, [r7, #12]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	431a      	orrs	r2, r3
 8004724:	7b3b      	ldrb	r3, [r7, #12]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	431a      	orrs	r2, r3
 800472c:	4b16      	ldr	r3, [pc, #88]	@ (8004788 <fillRect+0x258>)
 800472e:	619a      	str	r2, [r3, #24]
 8004730:	7b3b      	ldrb	r3, [r7, #12]
 8004732:	019b      	lsls	r3, r3, #6
 8004734:	4a17      	ldr	r2, [pc, #92]	@ (8004794 <fillRect+0x264>)
 8004736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473a:	6193      	str	r3, [r2, #24]
 800473c:	2102      	movs	r1, #2
 800473e:	4813      	ldr	r0, [pc, #76]	@ (800478c <fillRect+0x25c>)
 8004740:	f7fc fdea 	bl	8001318 <PIN_LOW>
 8004744:	2102      	movs	r1, #2
 8004746:	4811      	ldr	r0, [pc, #68]	@ (800478c <fillRect+0x25c>)
 8004748:	f7fc fdf6 	bl	8001338 <PIN_HIGH>
 800474c:	2102      	movs	r1, #2
 800474e:	480f      	ldr	r0, [pc, #60]	@ (800478c <fillRect+0x25c>)
 8004750:	f7fc fdf2 	bl	8001338 <PIN_HIGH>
 8004754:	2110      	movs	r1, #16
 8004756:	480d      	ldr	r0, [pc, #52]	@ (800478c <fillRect+0x25c>)
 8004758:	f7fc fdee 	bl	8001338 <PIN_HIGH>
    if (h > w) {
 800475c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004760:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004764:	429a      	cmp	r2, r3
 8004766:	dd05      	ble.n	8004774 <fillRect+0x244>
        end = h;
 8004768:	883b      	ldrh	r3, [r7, #0]
 800476a:	81fb      	strh	r3, [r7, #14]
        h = w;
 800476c:	887b      	ldrh	r3, [r7, #2]
 800476e:	803b      	strh	r3, [r7, #0]
        w = end;
 8004770:	89fb      	ldrh	r3, [r7, #14]
 8004772:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8004774:	8c3b      	ldrh	r3, [r7, #32]
 8004776:	0a1b      	lsrs	r3, r3, #8
 8004778:	b29b      	uxth	r3, r3
 800477a:	72fb      	strb	r3, [r7, #11]
 800477c:	8c3b      	ldrh	r3, [r7, #32]
 800477e:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 8004780:	e099      	b.n	80048b6 <fillRect+0x386>
 8004782:	bf00      	nop
 8004784:	20000157 	.word	0x20000157
 8004788:	40020400 	.word	0x40020400
 800478c:	40020000 	.word	0x40020000
 8004790:	20000168 	.word	0x20000168
 8004794:	40020800 	.word	0x40020800
        end = w;
 8004798:	887b      	ldrh	r3, [r7, #2]
 800479a:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 800479c:	4b60      	ldr	r3, [pc, #384]	@ (8004920 <fillRect+0x3f0>)
 800479e:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80047a2:	619a      	str	r2, [r3, #24]
 80047a4:	4b5f      	ldr	r3, [pc, #380]	@ (8004924 <fillRect+0x3f4>)
 80047a6:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80047aa:	619a      	str	r2, [r3, #24]
 80047ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004928 <fillRect+0x3f8>)
 80047ae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80047b2:	619a      	str	r2, [r3, #24]
 80047b4:	7afb      	ldrb	r3, [r7, #11]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80047bc:	7afb      	ldrb	r3, [r7, #11]
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047c4:	431a      	orrs	r2, r3
 80047c6:	7afb      	ldrb	r3, [r7, #11]
 80047c8:	025b      	lsls	r3, r3, #9
 80047ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047ce:	431a      	orrs	r2, r3
 80047d0:	4b53      	ldr	r3, [pc, #332]	@ (8004920 <fillRect+0x3f0>)
 80047d2:	619a      	str	r2, [r3, #24]
 80047d4:	7afb      	ldrb	r3, [r7, #11]
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80047dc:	7afb      	ldrb	r3, [r7, #11]
 80047de:	105b      	asrs	r3, r3, #1
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	431a      	orrs	r2, r3
 80047e6:	7afb      	ldrb	r3, [r7, #11]
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	431a      	orrs	r2, r3
 80047f0:	7afb      	ldrb	r3, [r7, #11]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	431a      	orrs	r2, r3
 80047f8:	4b4a      	ldr	r3, [pc, #296]	@ (8004924 <fillRect+0x3f4>)
 80047fa:	619a      	str	r2, [r3, #24]
 80047fc:	7afb      	ldrb	r3, [r7, #11]
 80047fe:	019b      	lsls	r3, r3, #6
 8004800:	4a49      	ldr	r2, [pc, #292]	@ (8004928 <fillRect+0x3f8>)
 8004802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004806:	6193      	str	r3, [r2, #24]
 8004808:	2102      	movs	r1, #2
 800480a:	4845      	ldr	r0, [pc, #276]	@ (8004920 <fillRect+0x3f0>)
 800480c:	f7fc fd84 	bl	8001318 <PIN_LOW>
 8004810:	2102      	movs	r1, #2
 8004812:	4843      	ldr	r0, [pc, #268]	@ (8004920 <fillRect+0x3f0>)
 8004814:	f7fc fd90 	bl	8001338 <PIN_HIGH>
 8004818:	2102      	movs	r1, #2
 800481a:	4841      	ldr	r0, [pc, #260]	@ (8004920 <fillRect+0x3f0>)
 800481c:	f7fc fd8c 	bl	8001338 <PIN_HIGH>
            write8(lo);
 8004820:	4b3f      	ldr	r3, [pc, #252]	@ (8004920 <fillRect+0x3f0>)
 8004822:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8004826:	619a      	str	r2, [r3, #24]
 8004828:	4b3e      	ldr	r3, [pc, #248]	@ (8004924 <fillRect+0x3f4>)
 800482a:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 800482e:	619a      	str	r2, [r3, #24]
 8004830:	4b3d      	ldr	r3, [pc, #244]	@ (8004928 <fillRect+0x3f8>)
 8004832:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004836:	619a      	str	r2, [r3, #24]
 8004838:	7abb      	ldrb	r3, [r7, #10]
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8004840:	7abb      	ldrb	r3, [r7, #10]
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004848:	431a      	orrs	r2, r3
 800484a:	7abb      	ldrb	r3, [r7, #10]
 800484c:	025b      	lsls	r3, r3, #9
 800484e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004852:	431a      	orrs	r2, r3
 8004854:	4b32      	ldr	r3, [pc, #200]	@ (8004920 <fillRect+0x3f0>)
 8004856:	619a      	str	r2, [r3, #24]
 8004858:	7abb      	ldrb	r3, [r7, #10]
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8004860:	7abb      	ldrb	r3, [r7, #10]
 8004862:	105b      	asrs	r3, r3, #1
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	431a      	orrs	r2, r3
 800486a:	7abb      	ldrb	r3, [r7, #10]
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	431a      	orrs	r2, r3
 8004874:	7abb      	ldrb	r3, [r7, #10]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	431a      	orrs	r2, r3
 800487c:	4b29      	ldr	r3, [pc, #164]	@ (8004924 <fillRect+0x3f4>)
 800487e:	619a      	str	r2, [r3, #24]
 8004880:	7abb      	ldrb	r3, [r7, #10]
 8004882:	019b      	lsls	r3, r3, #6
 8004884:	4a28      	ldr	r2, [pc, #160]	@ (8004928 <fillRect+0x3f8>)
 8004886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800488a:	6193      	str	r3, [r2, #24]
 800488c:	2102      	movs	r1, #2
 800488e:	4824      	ldr	r0, [pc, #144]	@ (8004920 <fillRect+0x3f0>)
 8004890:	f7fc fd42 	bl	8001318 <PIN_LOW>
 8004894:	2102      	movs	r1, #2
 8004896:	4822      	ldr	r0, [pc, #136]	@ (8004920 <fillRect+0x3f0>)
 8004898:	f7fc fd4e 	bl	8001338 <PIN_HIGH>
 800489c:	2102      	movs	r1, #2
 800489e:	4820      	ldr	r0, [pc, #128]	@ (8004920 <fillRect+0x3f0>)
 80048a0:	f7fc fd4a 	bl	8001338 <PIN_HIGH>
        } while (--end != 0);
 80048a4:	89fb      	ldrh	r3, [r7, #14]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	81fb      	strh	r3, [r7, #14]
 80048ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f47f af73 	bne.w	800479c <fillRect+0x26c>
    while (h-- > 0) {
 80048b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	3a01      	subs	r2, #1
 80048be:	b292      	uxth	r2, r2
 80048c0:	803a      	strh	r2, [r7, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f73f af68 	bgt.w	8004798 <fillRect+0x268>
#endif
    }
    CS_IDLE;
 80048c8:	2101      	movs	r1, #1
 80048ca:	4816      	ldr	r0, [pc, #88]	@ (8004924 <fillRect+0x3f4>)
 80048cc:	f7fc fd34 	bl	8001338 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 80048d0:	4b16      	ldr	r3, [pc, #88]	@ (800492c <fillRect+0x3fc>)
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00b      	beq.n	80048f4 <fillRect+0x3c4>
 80048dc:	4b14      	ldr	r3, [pc, #80]	@ (8004930 <fillRect+0x400>)
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	f241 5226 	movw	r2, #5414	@ 0x1526
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d116      	bne.n	8004916 <fillRect+0x3e6>
 80048e8:	4b12      	ldr	r3, [pc, #72]	@ (8004934 <fillRect+0x404>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d010      	beq.n	8004916 <fillRect+0x3e6>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 80048f4:	f7fc fd5e 	bl	80013b4 <width>
 80048f8:	4603      	mov	r3, r0
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	b21c      	sxth	r4, r3
 8004900:	f7fc fd64 	bl	80013cc <height>
 8004904:	4603      	mov	r3, r0
 8004906:	3b01      	subs	r3, #1
 8004908:	b29b      	uxth	r3, r3
 800490a:	b21b      	sxth	r3, r3
 800490c:	4622      	mov	r2, r4
 800490e:	2100      	movs	r1, #0
 8004910:	2000      	movs	r0, #0
 8004912:	f7ff fb03 	bl	8003f1c <setAddrWindow>
}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	bd90      	pop	{r4, r7, pc}
 800491e:	bf00      	nop
 8004920:	40020000 	.word	0x40020000
 8004924:	40020400 	.word	0x40020400
 8004928:	40020800 	.word	0x40020800
 800492c:	2000015c 	.word	0x2000015c
 8004930:	2000015e 	.word	0x2000015e
 8004934:	20000159 	.word	0x20000159

08004938 <drawRGBBitmapFast>:
	       drawPixel(x + i, y + j, color);
	     }
	   }
}

drawRGBBitmapFast(int x, int y, const uint16_t *bitmap, int imageWidth, int imageHeight) {
 8004938:	b580      	push	{r7, lr}
 800493a:	b08a      	sub	sp, #40	@ 0x28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
  int blockSize = 5; // Ajusta el tamaño del bloque según tu memoria y pantalla
 8004946:	2305      	movs	r3, #5
 8004948:	617b      	str	r3, [r7, #20]

  for (int j = 0; j < imageHeight; j += blockSize) {
 800494a:	2300      	movs	r3, #0
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24
 800494e:	e057      	b.n	8004a00 <drawRGBBitmapFast+0xc8>
    for (int i = 0; i < imageWidth; i += blockSize) {
 8004950:	2300      	movs	r3, #0
 8004952:	623b      	str	r3, [r7, #32]
 8004954:	e04c      	b.n	80049f0 <drawRGBBitmapFast+0xb8>
      // Dibuja un bloque de píxeles de blockSize x blockSize
      for (int bj = 0; bj < blockSize && (j + bj) < imageHeight; bj++) {
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	e03b      	b.n	80049d4 <drawRGBBitmapFast+0x9c>
        for (int bi = 0; bi < blockSize && (i + bi) < imageWidth; bi++) {
 800495c:	2300      	movs	r3, #0
 800495e:	61bb      	str	r3, [r7, #24]
 8004960:	e02b      	b.n	80049ba <drawRGBBitmapFast+0x82>
          uint16_t color = bitmap[(j + bj) * imageWidth + (i + bi)];
 8004962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	4413      	add	r3, r2
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	fb03 f202 	mul.w	r2, r3, r2
 800496e:	6a39      	ldr	r1, [r7, #32]
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	440b      	add	r3, r1
 8004974:	4413      	add	r3, r2
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	4413      	add	r3, r2
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	827b      	strh	r3, [r7, #18]
          drawPixel(x + i + bi, y + j + bj, color);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	b29a      	uxth	r2, r3
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	b29b      	uxth	r3, r3
 8004988:	4413      	add	r3, r2
 800498a:	b29a      	uxth	r2, r3
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	b29b      	uxth	r3, r3
 8004990:	4413      	add	r3, r2
 8004992:	b29b      	uxth	r3, r3
 8004994:	b218      	sxth	r0, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	b29a      	uxth	r2, r3
 800499a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499c:	b29b      	uxth	r3, r3
 800499e:	4413      	add	r3, r2
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	4413      	add	r3, r2
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	b21b      	sxth	r3, r3
 80049ac:	8a7a      	ldrh	r2, [r7, #18]
 80049ae:	4619      	mov	r1, r3
 80049b0:	f7ff f9be 	bl	8003d30 <drawPixel>
        for (int bi = 0; bi < blockSize && (i + bi) < imageWidth; bi++) {
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	3301      	adds	r3, #1
 80049b8:	61bb      	str	r3, [r7, #24]
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	429a      	cmp	r2, r3
 80049c0:	da05      	bge.n	80049ce <drawRGBBitmapFast+0x96>
 80049c2:	6a3a      	ldr	r2, [r7, #32]
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	4413      	add	r3, r2
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	dcc9      	bgt.n	8004962 <drawRGBBitmapFast+0x2a>
      for (int bj = 0; bj < blockSize && (j + bj) < imageHeight; bj++) {
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	3301      	adds	r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	429a      	cmp	r2, r3
 80049da:	da05      	bge.n	80049e8 <drawRGBBitmapFast+0xb0>
 80049dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	4413      	add	r3, r2
 80049e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049e4:	429a      	cmp	r2, r3
 80049e6:	dcb9      	bgt.n	800495c <drawRGBBitmapFast+0x24>
    for (int i = 0; i < imageWidth; i += blockSize) {
 80049e8:	6a3a      	ldr	r2, [r7, #32]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	4413      	add	r3, r2
 80049ee:	623b      	str	r3, [r7, #32]
 80049f0:	6a3a      	ldr	r2, [r7, #32]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	dbae      	blt.n	8004956 <drawRGBBitmapFast+0x1e>
  for (int j = 0; j < imageHeight; j += blockSize) {
 80049f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	4413      	add	r3, r2
 80049fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a04:	429a      	cmp	r2, r3
 8004a06:	dba3      	blt.n	8004950 <drawRGBBitmapFast+0x18>
        }
      }
    }
  }
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	3728      	adds	r7, #40	@ 0x28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <Reset_Handler>:
 8004a14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004a4c <LoopFillZerobss+0xe>
 8004a18:	f7fc fc6c 	bl	80012f4 <SystemInit>
 8004a1c:	480c      	ldr	r0, [pc, #48]	@ (8004a50 <LoopFillZerobss+0x12>)
 8004a1e:	490d      	ldr	r1, [pc, #52]	@ (8004a54 <LoopFillZerobss+0x16>)
 8004a20:	4a0d      	ldr	r2, [pc, #52]	@ (8004a58 <LoopFillZerobss+0x1a>)
 8004a22:	2300      	movs	r3, #0
 8004a24:	e002      	b.n	8004a2c <LoopCopyDataInit>

08004a26 <CopyDataInit>:
 8004a26:	58d4      	ldr	r4, [r2, r3]
 8004a28:	50c4      	str	r4, [r0, r3]
 8004a2a:	3304      	adds	r3, #4

08004a2c <LoopCopyDataInit>:
 8004a2c:	18c4      	adds	r4, r0, r3
 8004a2e:	428c      	cmp	r4, r1
 8004a30:	d3f9      	bcc.n	8004a26 <CopyDataInit>
 8004a32:	4a0a      	ldr	r2, [pc, #40]	@ (8004a5c <LoopFillZerobss+0x1e>)
 8004a34:	4c0a      	ldr	r4, [pc, #40]	@ (8004a60 <LoopFillZerobss+0x22>)
 8004a36:	2300      	movs	r3, #0
 8004a38:	e001      	b.n	8004a3e <LoopFillZerobss>

08004a3a <FillZerobss>:
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	3204      	adds	r2, #4

08004a3e <LoopFillZerobss>:
 8004a3e:	42a2      	cmp	r2, r4
 8004a40:	d3fb      	bcc.n	8004a3a <FillZerobss>
 8004a42:	f002 fc9f 	bl	8007384 <__libc_init_array>
 8004a46:	f7fb fd6d 	bl	8000524 <main>
 8004a4a:	4770      	bx	lr
 8004a4c:	20020000 	.word	0x20020000
 8004a50:	20000000 	.word	0x20000000
 8004a54:	20000048 	.word	0x20000048
 8004a58:	0804209c 	.word	0x0804209c
 8004a5c:	20000048 	.word	0x20000048
 8004a60:	20000178 	.word	0x20000178

08004a64 <ADC_IRQHandler>:
 8004a64:	e7fe      	b.n	8004a64 <ADC_IRQHandler>
	...

08004a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa8 <HAL_Init+0x40>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a0d      	ldr	r2, [pc, #52]	@ (8004aa8 <HAL_Init+0x40>)
 8004a72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a78:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa8 <HAL_Init+0x40>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8004aa8 <HAL_Init+0x40>)
 8004a7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a84:	4b08      	ldr	r3, [pc, #32]	@ (8004aa8 <HAL_Init+0x40>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a07      	ldr	r2, [pc, #28]	@ (8004aa8 <HAL_Init+0x40>)
 8004a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a90:	2003      	movs	r0, #3
 8004a92:	f000 f94f 	bl	8004d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a96:	200f      	movs	r0, #15
 8004a98:	f000 f808 	bl	8004aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a9c:	f7fc fb00 	bl	80010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40023c00 	.word	0x40023c00

08004aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ab4:	4b12      	ldr	r3, [pc, #72]	@ (8004b00 <HAL_InitTick+0x54>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	4b12      	ldr	r3, [pc, #72]	@ (8004b04 <HAL_InitTick+0x58>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	4619      	mov	r1, r3
 8004abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 f967 	bl	8004d9e <HAL_SYSTICK_Config>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e00e      	b.n	8004af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b0f      	cmp	r3, #15
 8004ade:	d80a      	bhi.n	8004af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae8:	f000 f92f 	bl	8004d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004aec:	4a06      	ldr	r2, [pc, #24]	@ (8004b08 <HAL_InitTick+0x5c>)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e000      	b.n	8004af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20000038 	.word	0x20000038
 8004b04:	20000044 	.word	0x20000044
 8004b08:	20000040 	.word	0x20000040

08004b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b10:	4b06      	ldr	r3, [pc, #24]	@ (8004b2c <HAL_IncTick+0x20>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	4b06      	ldr	r3, [pc, #24]	@ (8004b30 <HAL_IncTick+0x24>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	4a04      	ldr	r2, [pc, #16]	@ (8004b30 <HAL_IncTick+0x24>)
 8004b1e:	6013      	str	r3, [r2, #0]
}
 8004b20:	bf00      	nop
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20000044 	.word	0x20000044
 8004b30:	20000174 	.word	0x20000174

08004b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  return uwTick;
 8004b38:	4b03      	ldr	r3, [pc, #12]	@ (8004b48 <HAL_GetTick+0x14>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	20000174 	.word	0x20000174

08004b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b54:	f7ff ffee 	bl	8004b34 <HAL_GetTick>
 8004b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b64:	d005      	beq.n	8004b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b66:	4b0a      	ldr	r3, [pc, #40]	@ (8004b90 <HAL_Delay+0x44>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b72:	bf00      	nop
 8004b74:	f7ff ffde 	bl	8004b34 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d8f7      	bhi.n	8004b74 <HAL_Delay+0x28>
  {
  }
}
 8004b84:	bf00      	nop
 8004b86:	bf00      	nop
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000044 	.word	0x20000044

08004b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bc6:	4a04      	ldr	r2, [pc, #16]	@ (8004bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	60d3      	str	r3, [r2, #12]
}
 8004bcc:	bf00      	nop
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	e000ed00 	.word	0xe000ed00

08004bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004be0:	4b04      	ldr	r3, [pc, #16]	@ (8004bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	0a1b      	lsrs	r3, r3, #8
 8004be6:	f003 0307 	and.w	r3, r3, #7
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	e000ed00 	.word	0xe000ed00

08004bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	db0b      	blt.n	8004c22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c0a:	79fb      	ldrb	r3, [r7, #7]
 8004c0c:	f003 021f 	and.w	r2, r3, #31
 8004c10:	4907      	ldr	r1, [pc, #28]	@ (8004c30 <__NVIC_EnableIRQ+0x38>)
 8004c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	2001      	movs	r0, #1
 8004c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	e000e100 	.word	0xe000e100

08004c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	6039      	str	r1, [r7, #0]
 8004c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	db0a      	blt.n	8004c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	490c      	ldr	r1, [pc, #48]	@ (8004c80 <__NVIC_SetPriority+0x4c>)
 8004c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c52:	0112      	lsls	r2, r2, #4
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	440b      	add	r3, r1
 8004c58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c5c:	e00a      	b.n	8004c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	4908      	ldr	r1, [pc, #32]	@ (8004c84 <__NVIC_SetPriority+0x50>)
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	3b04      	subs	r3, #4
 8004c6c:	0112      	lsls	r2, r2, #4
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	440b      	add	r3, r1
 8004c72:	761a      	strb	r2, [r3, #24]
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	e000e100 	.word	0xe000e100
 8004c84:	e000ed00 	.word	0xe000ed00

08004c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b089      	sub	sp, #36	@ 0x24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	f1c3 0307 	rsb	r3, r3, #7
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	bf28      	it	cs
 8004ca6:	2304      	movcs	r3, #4
 8004ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	3304      	adds	r3, #4
 8004cae:	2b06      	cmp	r3, #6
 8004cb0:	d902      	bls.n	8004cb8 <NVIC_EncodePriority+0x30>
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	3b03      	subs	r3, #3
 8004cb6:	e000      	b.n	8004cba <NVIC_EncodePriority+0x32>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43da      	mvns	r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	401a      	ands	r2, r3
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cda:	43d9      	mvns	r1, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ce0:	4313      	orrs	r3, r2
         );
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3724      	adds	r7, #36	@ 0x24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d00:	d301      	bcc.n	8004d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d02:	2301      	movs	r3, #1
 8004d04:	e00f      	b.n	8004d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d06:	4a0a      	ldr	r2, [pc, #40]	@ (8004d30 <SysTick_Config+0x40>)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d0e:	210f      	movs	r1, #15
 8004d10:	f04f 30ff 	mov.w	r0, #4294967295
 8004d14:	f7ff ff8e 	bl	8004c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d18:	4b05      	ldr	r3, [pc, #20]	@ (8004d30 <SysTick_Config+0x40>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d1e:	4b04      	ldr	r3, [pc, #16]	@ (8004d30 <SysTick_Config+0x40>)
 8004d20:	2207      	movs	r2, #7
 8004d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	e000e010 	.word	0xe000e010

08004d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff ff29 	bl	8004b94 <__NVIC_SetPriorityGrouping>
}
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b086      	sub	sp, #24
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	4603      	mov	r3, r0
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	607a      	str	r2, [r7, #4]
 8004d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d5c:	f7ff ff3e 	bl	8004bdc <__NVIC_GetPriorityGrouping>
 8004d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	6978      	ldr	r0, [r7, #20]
 8004d68:	f7ff ff8e 	bl	8004c88 <NVIC_EncodePriority>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d72:	4611      	mov	r1, r2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff ff5d 	bl	8004c34 <__NVIC_SetPriority>
}
 8004d7a:	bf00      	nop
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	4603      	mov	r3, r0
 8004d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff ff31 	bl	8004bf8 <__NVIC_EnableIRQ>
}
 8004d96:	bf00      	nop
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7ff ffa2 	bl	8004cf0 <SysTick_Config>
 8004dac:	4603      	mov	r3, r0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004dc4:	f7ff feb6 	bl	8004b34 <HAL_GetTick>
 8004dc8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d008      	beq.n	8004de8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2280      	movs	r2, #128	@ 0x80
 8004dda:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e052      	b.n	8004e8e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0216 	bic.w	r2, r2, #22
 8004df6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695a      	ldr	r2, [r3, #20]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e06:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d103      	bne.n	8004e18 <HAL_DMA_Abort+0x62>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0208 	bic.w	r2, r2, #8
 8004e26:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0201 	bic.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e38:	e013      	b.n	8004e62 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e3a:	f7ff fe7b 	bl	8004b34 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b05      	cmp	r3, #5
 8004e46:	d90c      	bls.n	8004e62 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2203      	movs	r2, #3
 8004e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e015      	b.n	8004e8e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e4      	bne.n	8004e3a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e74:	223f      	movs	r2, #63	@ 0x3f
 8004e76:	409a      	lsls	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2280      	movs	r2, #128	@ 0x80
 8004eae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e00c      	b.n	8004ece <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2205      	movs	r2, #5
 8004eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0201 	bic.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
	...

08004edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b089      	sub	sp, #36	@ 0x24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
 8004ef6:	e165      	b.n	80051c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ef8:	2201      	movs	r2, #1
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	f040 8154 	bne.w	80051be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d005      	beq.n	8004f2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d130      	bne.n	8004f90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	2203      	movs	r2, #3
 8004f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3e:	43db      	mvns	r3, r3
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	4013      	ands	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f64:	2201      	movs	r2, #1
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	4013      	ands	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	091b      	lsrs	r3, r3, #4
 8004f7a:	f003 0201 	and.w	r2, r3, #1
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d017      	beq.n	8004fcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	2203      	movs	r2, #3
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	43db      	mvns	r3, r3
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f003 0303 	and.w	r3, r3, #3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d123      	bne.n	8005020 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	08da      	lsrs	r2, r3, #3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3208      	adds	r2, #8
 8004fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	220f      	movs	r2, #15
 8004ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	4313      	orrs	r3, r2
 8005010:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	08da      	lsrs	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3208      	adds	r2, #8
 800501a:	69b9      	ldr	r1, [r7, #24]
 800501c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	2203      	movs	r2, #3
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	43db      	mvns	r3, r3
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	4013      	ands	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f003 0203 	and.w	r2, r3, #3
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	4313      	orrs	r3, r2
 800504c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80ae 	beq.w	80051be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005062:	2300      	movs	r3, #0
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	4b5d      	ldr	r3, [pc, #372]	@ (80051dc <HAL_GPIO_Init+0x300>)
 8005068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506a:	4a5c      	ldr	r2, [pc, #368]	@ (80051dc <HAL_GPIO_Init+0x300>)
 800506c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005070:	6453      	str	r3, [r2, #68]	@ 0x44
 8005072:	4b5a      	ldr	r3, [pc, #360]	@ (80051dc <HAL_GPIO_Init+0x300>)
 8005074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800507e:	4a58      	ldr	r2, [pc, #352]	@ (80051e0 <HAL_GPIO_Init+0x304>)
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	089b      	lsrs	r3, r3, #2
 8005084:	3302      	adds	r3, #2
 8005086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	220f      	movs	r2, #15
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	43db      	mvns	r3, r3
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	4013      	ands	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a4f      	ldr	r2, [pc, #316]	@ (80051e4 <HAL_GPIO_Init+0x308>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d025      	beq.n	80050f6 <HAL_GPIO_Init+0x21a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a4e      	ldr	r2, [pc, #312]	@ (80051e8 <HAL_GPIO_Init+0x30c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01f      	beq.n	80050f2 <HAL_GPIO_Init+0x216>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a4d      	ldr	r2, [pc, #308]	@ (80051ec <HAL_GPIO_Init+0x310>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d019      	beq.n	80050ee <HAL_GPIO_Init+0x212>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a4c      	ldr	r2, [pc, #304]	@ (80051f0 <HAL_GPIO_Init+0x314>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d013      	beq.n	80050ea <HAL_GPIO_Init+0x20e>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a4b      	ldr	r2, [pc, #300]	@ (80051f4 <HAL_GPIO_Init+0x318>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00d      	beq.n	80050e6 <HAL_GPIO_Init+0x20a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a4a      	ldr	r2, [pc, #296]	@ (80051f8 <HAL_GPIO_Init+0x31c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d007      	beq.n	80050e2 <HAL_GPIO_Init+0x206>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a49      	ldr	r2, [pc, #292]	@ (80051fc <HAL_GPIO_Init+0x320>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d101      	bne.n	80050de <HAL_GPIO_Init+0x202>
 80050da:	2306      	movs	r3, #6
 80050dc:	e00c      	b.n	80050f8 <HAL_GPIO_Init+0x21c>
 80050de:	2307      	movs	r3, #7
 80050e0:	e00a      	b.n	80050f8 <HAL_GPIO_Init+0x21c>
 80050e2:	2305      	movs	r3, #5
 80050e4:	e008      	b.n	80050f8 <HAL_GPIO_Init+0x21c>
 80050e6:	2304      	movs	r3, #4
 80050e8:	e006      	b.n	80050f8 <HAL_GPIO_Init+0x21c>
 80050ea:	2303      	movs	r3, #3
 80050ec:	e004      	b.n	80050f8 <HAL_GPIO_Init+0x21c>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e002      	b.n	80050f8 <HAL_GPIO_Init+0x21c>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <HAL_GPIO_Init+0x21c>
 80050f6:	2300      	movs	r3, #0
 80050f8:	69fa      	ldr	r2, [r7, #28]
 80050fa:	f002 0203 	and.w	r2, r2, #3
 80050fe:	0092      	lsls	r2, r2, #2
 8005100:	4093      	lsls	r3, r2
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	4313      	orrs	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005108:	4935      	ldr	r1, [pc, #212]	@ (80051e0 <HAL_GPIO_Init+0x304>)
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	089b      	lsrs	r3, r3, #2
 800510e:	3302      	adds	r3, #2
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005116:	4b3a      	ldr	r3, [pc, #232]	@ (8005200 <HAL_GPIO_Init+0x324>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	43db      	mvns	r3, r3
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	4013      	ands	r3, r2
 8005124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800513a:	4a31      	ldr	r2, [pc, #196]	@ (8005200 <HAL_GPIO_Init+0x324>)
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005140:	4b2f      	ldr	r3, [pc, #188]	@ (8005200 <HAL_GPIO_Init+0x324>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	43db      	mvns	r3, r3
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	4013      	ands	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	4313      	orrs	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005164:	4a26      	ldr	r2, [pc, #152]	@ (8005200 <HAL_GPIO_Init+0x324>)
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800516a:	4b25      	ldr	r3, [pc, #148]	@ (8005200 <HAL_GPIO_Init+0x324>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	43db      	mvns	r3, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4013      	ands	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800518e:	4a1c      	ldr	r2, [pc, #112]	@ (8005200 <HAL_GPIO_Init+0x324>)
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005194:	4b1a      	ldr	r3, [pc, #104]	@ (8005200 <HAL_GPIO_Init+0x324>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	43db      	mvns	r3, r3
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4013      	ands	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051b8:	4a11      	ldr	r2, [pc, #68]	@ (8005200 <HAL_GPIO_Init+0x324>)
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	3301      	adds	r3, #1
 80051c2:	61fb      	str	r3, [r7, #28]
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	2b0f      	cmp	r3, #15
 80051c8:	f67f ae96 	bls.w	8004ef8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051cc:	bf00      	nop
 80051ce:	bf00      	nop
 80051d0:	3724      	adds	r7, #36	@ 0x24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40023800 	.word	0x40023800
 80051e0:	40013800 	.word	0x40013800
 80051e4:	40020000 	.word	0x40020000
 80051e8:	40020400 	.word	0x40020400
 80051ec:	40020800 	.word	0x40020800
 80051f0:	40020c00 	.word	0x40020c00
 80051f4:	40021000 	.word	0x40021000
 80051f8:	40021400 	.word	0x40021400
 80051fc:	40021800 	.word	0x40021800
 8005200:	40013c00 	.word	0x40013c00

08005204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	807b      	strh	r3, [r7, #2]
 8005210:	4613      	mov	r3, r2
 8005212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005214:	787b      	ldrb	r3, [r7, #1]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800521a:	887a      	ldrh	r2, [r7, #2]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005220:	e003      	b.n	800522a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005222:	887b      	ldrh	r3, [r7, #2]
 8005224:	041a      	lsls	r2, r3, #16
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	619a      	str	r2, [r3, #24]
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
	...

08005238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0cc      	b.n	80053e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800524c:	4b68      	ldr	r3, [pc, #416]	@ (80053f0 <HAL_RCC_ClockConfig+0x1b8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 030f 	and.w	r3, r3, #15
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d90c      	bls.n	8005274 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525a:	4b65      	ldr	r3, [pc, #404]	@ (80053f0 <HAL_RCC_ClockConfig+0x1b8>)
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005262:	4b63      	ldr	r3, [pc, #396]	@ (80053f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d001      	beq.n	8005274 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e0b8      	b.n	80053e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d020      	beq.n	80052c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d005      	beq.n	8005298 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800528c:	4b59      	ldr	r3, [pc, #356]	@ (80053f4 <HAL_RCC_ClockConfig+0x1bc>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	4a58      	ldr	r2, [pc, #352]	@ (80053f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005292:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005296:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d005      	beq.n	80052b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052a4:	4b53      	ldr	r3, [pc, #332]	@ (80053f4 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	4a52      	ldr	r2, [pc, #328]	@ (80053f4 <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052b0:	4b50      	ldr	r3, [pc, #320]	@ (80053f4 <HAL_RCC_ClockConfig+0x1bc>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	494d      	ldr	r1, [pc, #308]	@ (80053f4 <HAL_RCC_ClockConfig+0x1bc>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d044      	beq.n	8005358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d107      	bne.n	80052e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d6:	4b47      	ldr	r3, [pc, #284]	@ (80053f4 <HAL_RCC_ClockConfig+0x1bc>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d119      	bne.n	8005316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e07f      	b.n	80053e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d003      	beq.n	80052f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d107      	bne.n	8005306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052f6:	4b3f      	ldr	r3, [pc, #252]	@ (80053f4 <HAL_RCC_ClockConfig+0x1bc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d109      	bne.n	8005316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e06f      	b.n	80053e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005306:	4b3b      	ldr	r3, [pc, #236]	@ (80053f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e067      	b.n	80053e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005316:	4b37      	ldr	r3, [pc, #220]	@ (80053f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f023 0203 	bic.w	r2, r3, #3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	4934      	ldr	r1, [pc, #208]	@ (80053f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005324:	4313      	orrs	r3, r2
 8005326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005328:	f7ff fc04 	bl	8004b34 <HAL_GetTick>
 800532c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800532e:	e00a      	b.n	8005346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005330:	f7ff fc00 	bl	8004b34 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800533e:	4293      	cmp	r3, r2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e04f      	b.n	80053e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005346:	4b2b      	ldr	r3, [pc, #172]	@ (80053f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 020c 	and.w	r2, r3, #12
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	429a      	cmp	r2, r3
 8005356:	d1eb      	bne.n	8005330 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005358:	4b25      	ldr	r3, [pc, #148]	@ (80053f0 <HAL_RCC_ClockConfig+0x1b8>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 030f 	and.w	r3, r3, #15
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d20c      	bcs.n	8005380 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005366:	4b22      	ldr	r3, [pc, #136]	@ (80053f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800536e:	4b20      	ldr	r3, [pc, #128]	@ (80053f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d001      	beq.n	8005380 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e032      	b.n	80053e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d008      	beq.n	800539e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800538c:	4b19      	ldr	r3, [pc, #100]	@ (80053f4 <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	4916      	ldr	r1, [pc, #88]	@ (80053f4 <HAL_RCC_ClockConfig+0x1bc>)
 800539a:	4313      	orrs	r3, r2
 800539c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d009      	beq.n	80053be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053aa:	4b12      	ldr	r3, [pc, #72]	@ (80053f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	490e      	ldr	r1, [pc, #56]	@ (80053f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053be:	f000 f855 	bl	800546c <HAL_RCC_GetSysClockFreq>
 80053c2:	4602      	mov	r2, r0
 80053c4:	4b0b      	ldr	r3, [pc, #44]	@ (80053f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	091b      	lsrs	r3, r3, #4
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	490a      	ldr	r1, [pc, #40]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c0>)
 80053d0:	5ccb      	ldrb	r3, [r1, r3]
 80053d2:	fa22 f303 	lsr.w	r3, r2, r3
 80053d6:	4a09      	ldr	r2, [pc, #36]	@ (80053fc <HAL_RCC_ClockConfig+0x1c4>)
 80053d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80053da:	4b09      	ldr	r3, [pc, #36]	@ (8005400 <HAL_RCC_ClockConfig+0x1c8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f7ff fb64 	bl	8004aac <HAL_InitTick>

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	40023c00 	.word	0x40023c00
 80053f4:	40023800 	.word	0x40023800
 80053f8:	08041b38 	.word	0x08041b38
 80053fc:	20000038 	.word	0x20000038
 8005400:	20000040 	.word	0x20000040

08005404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005408:	4b03      	ldr	r3, [pc, #12]	@ (8005418 <HAL_RCC_GetHCLKFreq+0x14>)
 800540a:	681b      	ldr	r3, [r3, #0]
}
 800540c:	4618      	mov	r0, r3
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	20000038 	.word	0x20000038

0800541c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005420:	f7ff fff0 	bl	8005404 <HAL_RCC_GetHCLKFreq>
 8005424:	4602      	mov	r2, r0
 8005426:	4b05      	ldr	r3, [pc, #20]	@ (800543c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	0a9b      	lsrs	r3, r3, #10
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	4903      	ldr	r1, [pc, #12]	@ (8005440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005432:	5ccb      	ldrb	r3, [r1, r3]
 8005434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005438:	4618      	mov	r0, r3
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40023800 	.word	0x40023800
 8005440:	08041b48 	.word	0x08041b48

08005444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005448:	f7ff ffdc 	bl	8005404 <HAL_RCC_GetHCLKFreq>
 800544c:	4602      	mov	r2, r0
 800544e:	4b05      	ldr	r3, [pc, #20]	@ (8005464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	0b5b      	lsrs	r3, r3, #13
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	4903      	ldr	r1, [pc, #12]	@ (8005468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800545a:	5ccb      	ldrb	r3, [r1, r3]
 800545c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005460:	4618      	mov	r0, r3
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40023800 	.word	0x40023800
 8005468:	08041b48 	.word	0x08041b48

0800546c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800546c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005470:	b0ae      	sub	sp, #184	@ 0xb8
 8005472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005492:	4bcb      	ldr	r3, [pc, #812]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 030c 	and.w	r3, r3, #12
 800549a:	2b0c      	cmp	r3, #12
 800549c:	f200 8206 	bhi.w	80058ac <HAL_RCC_GetSysClockFreq+0x440>
 80054a0:	a201      	add	r2, pc, #4	@ (adr r2, 80054a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80054a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a6:	bf00      	nop
 80054a8:	080054dd 	.word	0x080054dd
 80054ac:	080058ad 	.word	0x080058ad
 80054b0:	080058ad 	.word	0x080058ad
 80054b4:	080058ad 	.word	0x080058ad
 80054b8:	080054e5 	.word	0x080054e5
 80054bc:	080058ad 	.word	0x080058ad
 80054c0:	080058ad 	.word	0x080058ad
 80054c4:	080058ad 	.word	0x080058ad
 80054c8:	080054ed 	.word	0x080054ed
 80054cc:	080058ad 	.word	0x080058ad
 80054d0:	080058ad 	.word	0x080058ad
 80054d4:	080058ad 	.word	0x080058ad
 80054d8:	080056dd 	.word	0x080056dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054dc:	4bb9      	ldr	r3, [pc, #740]	@ (80057c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80054de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80054e2:	e1e7      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054e4:	4bb8      	ldr	r3, [pc, #736]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80054e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80054ea:	e1e3      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054ec:	4bb4      	ldr	r3, [pc, #720]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054f8:	4bb1      	ldr	r3, [pc, #708]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d071      	beq.n	80055e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005504:	4bae      	ldr	r3, [pc, #696]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	099b      	lsrs	r3, r3, #6
 800550a:	2200      	movs	r2, #0
 800550c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005510:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005514:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800551c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005520:	2300      	movs	r3, #0
 8005522:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005526:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800552a:	4622      	mov	r2, r4
 800552c:	462b      	mov	r3, r5
 800552e:	f04f 0000 	mov.w	r0, #0
 8005532:	f04f 0100 	mov.w	r1, #0
 8005536:	0159      	lsls	r1, r3, #5
 8005538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800553c:	0150      	lsls	r0, r2, #5
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4621      	mov	r1, r4
 8005544:	1a51      	subs	r1, r2, r1
 8005546:	6439      	str	r1, [r7, #64]	@ 0x40
 8005548:	4629      	mov	r1, r5
 800554a:	eb63 0301 	sbc.w	r3, r3, r1
 800554e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800555c:	4649      	mov	r1, r9
 800555e:	018b      	lsls	r3, r1, #6
 8005560:	4641      	mov	r1, r8
 8005562:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005566:	4641      	mov	r1, r8
 8005568:	018a      	lsls	r2, r1, #6
 800556a:	4641      	mov	r1, r8
 800556c:	1a51      	subs	r1, r2, r1
 800556e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005570:	4649      	mov	r1, r9
 8005572:	eb63 0301 	sbc.w	r3, r3, r1
 8005576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	f04f 0300 	mov.w	r3, #0
 8005580:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005584:	4649      	mov	r1, r9
 8005586:	00cb      	lsls	r3, r1, #3
 8005588:	4641      	mov	r1, r8
 800558a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800558e:	4641      	mov	r1, r8
 8005590:	00ca      	lsls	r2, r1, #3
 8005592:	4610      	mov	r0, r2
 8005594:	4619      	mov	r1, r3
 8005596:	4603      	mov	r3, r0
 8005598:	4622      	mov	r2, r4
 800559a:	189b      	adds	r3, r3, r2
 800559c:	633b      	str	r3, [r7, #48]	@ 0x30
 800559e:	462b      	mov	r3, r5
 80055a0:	460a      	mov	r2, r1
 80055a2:	eb42 0303 	adc.w	r3, r2, r3
 80055a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80055b4:	4629      	mov	r1, r5
 80055b6:	024b      	lsls	r3, r1, #9
 80055b8:	4621      	mov	r1, r4
 80055ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055be:	4621      	mov	r1, r4
 80055c0:	024a      	lsls	r2, r1, #9
 80055c2:	4610      	mov	r0, r2
 80055c4:	4619      	mov	r1, r3
 80055c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80055d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80055d8:	f7fa fe14 	bl	8000204 <__aeabi_uldivmod>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	4613      	mov	r3, r2
 80055e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055e6:	e067      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055e8:	4b75      	ldr	r3, [pc, #468]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	099b      	lsrs	r3, r3, #6
 80055ee:	2200      	movs	r2, #0
 80055f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055f4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80055f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80055fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005600:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005602:	2300      	movs	r3, #0
 8005604:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005606:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800560a:	4622      	mov	r2, r4
 800560c:	462b      	mov	r3, r5
 800560e:	f04f 0000 	mov.w	r0, #0
 8005612:	f04f 0100 	mov.w	r1, #0
 8005616:	0159      	lsls	r1, r3, #5
 8005618:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800561c:	0150      	lsls	r0, r2, #5
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4621      	mov	r1, r4
 8005624:	1a51      	subs	r1, r2, r1
 8005626:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005628:	4629      	mov	r1, r5
 800562a:	eb63 0301 	sbc.w	r3, r3, r1
 800562e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	f04f 0300 	mov.w	r3, #0
 8005638:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800563c:	4649      	mov	r1, r9
 800563e:	018b      	lsls	r3, r1, #6
 8005640:	4641      	mov	r1, r8
 8005642:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005646:	4641      	mov	r1, r8
 8005648:	018a      	lsls	r2, r1, #6
 800564a:	4641      	mov	r1, r8
 800564c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005650:	4649      	mov	r1, r9
 8005652:	eb63 0b01 	sbc.w	fp, r3, r1
 8005656:	f04f 0200 	mov.w	r2, #0
 800565a:	f04f 0300 	mov.w	r3, #0
 800565e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005662:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005666:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800566a:	4692      	mov	sl, r2
 800566c:	469b      	mov	fp, r3
 800566e:	4623      	mov	r3, r4
 8005670:	eb1a 0303 	adds.w	r3, sl, r3
 8005674:	623b      	str	r3, [r7, #32]
 8005676:	462b      	mov	r3, r5
 8005678:	eb4b 0303 	adc.w	r3, fp, r3
 800567c:	627b      	str	r3, [r7, #36]	@ 0x24
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	f04f 0300 	mov.w	r3, #0
 8005686:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800568a:	4629      	mov	r1, r5
 800568c:	028b      	lsls	r3, r1, #10
 800568e:	4621      	mov	r1, r4
 8005690:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005694:	4621      	mov	r1, r4
 8005696:	028a      	lsls	r2, r1, #10
 8005698:	4610      	mov	r0, r2
 800569a:	4619      	mov	r1, r3
 800569c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056a0:	2200      	movs	r2, #0
 80056a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80056a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80056a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80056aa:	f7fa fdab 	bl	8000204 <__aeabi_uldivmod>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4613      	mov	r3, r2
 80056b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80056b8:	4b41      	ldr	r3, [pc, #260]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	0c1b      	lsrs	r3, r3, #16
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	3301      	adds	r3, #1
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80056ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80056da:	e0eb      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056dc:	4b38      	ldr	r3, [pc, #224]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056e8:	4b35      	ldr	r3, [pc, #212]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d06b      	beq.n	80057cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056f4:	4b32      	ldr	r3, [pc, #200]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	099b      	lsrs	r3, r3, #6
 80056fa:	2200      	movs	r2, #0
 80056fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005700:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005706:	663b      	str	r3, [r7, #96]	@ 0x60
 8005708:	2300      	movs	r3, #0
 800570a:	667b      	str	r3, [r7, #100]	@ 0x64
 800570c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005710:	4622      	mov	r2, r4
 8005712:	462b      	mov	r3, r5
 8005714:	f04f 0000 	mov.w	r0, #0
 8005718:	f04f 0100 	mov.w	r1, #0
 800571c:	0159      	lsls	r1, r3, #5
 800571e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005722:	0150      	lsls	r0, r2, #5
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4621      	mov	r1, r4
 800572a:	1a51      	subs	r1, r2, r1
 800572c:	61b9      	str	r1, [r7, #24]
 800572e:	4629      	mov	r1, r5
 8005730:	eb63 0301 	sbc.w	r3, r3, r1
 8005734:	61fb      	str	r3, [r7, #28]
 8005736:	f04f 0200 	mov.w	r2, #0
 800573a:	f04f 0300 	mov.w	r3, #0
 800573e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005742:	4659      	mov	r1, fp
 8005744:	018b      	lsls	r3, r1, #6
 8005746:	4651      	mov	r1, sl
 8005748:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800574c:	4651      	mov	r1, sl
 800574e:	018a      	lsls	r2, r1, #6
 8005750:	4651      	mov	r1, sl
 8005752:	ebb2 0801 	subs.w	r8, r2, r1
 8005756:	4659      	mov	r1, fp
 8005758:	eb63 0901 	sbc.w	r9, r3, r1
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005768:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800576c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005770:	4690      	mov	r8, r2
 8005772:	4699      	mov	r9, r3
 8005774:	4623      	mov	r3, r4
 8005776:	eb18 0303 	adds.w	r3, r8, r3
 800577a:	613b      	str	r3, [r7, #16]
 800577c:	462b      	mov	r3, r5
 800577e:	eb49 0303 	adc.w	r3, r9, r3
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005790:	4629      	mov	r1, r5
 8005792:	024b      	lsls	r3, r1, #9
 8005794:	4621      	mov	r1, r4
 8005796:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800579a:	4621      	mov	r1, r4
 800579c:	024a      	lsls	r2, r1, #9
 800579e:	4610      	mov	r0, r2
 80057a0:	4619      	mov	r1, r3
 80057a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057a6:	2200      	movs	r2, #0
 80057a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057aa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80057ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057b0:	f7fa fd28 	bl	8000204 <__aeabi_uldivmod>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4613      	mov	r3, r2
 80057ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057be:	e065      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x420>
 80057c0:	40023800 	.word	0x40023800
 80057c4:	00f42400 	.word	0x00f42400
 80057c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057cc:	4b3d      	ldr	r3, [pc, #244]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	099b      	lsrs	r3, r3, #6
 80057d2:	2200      	movs	r2, #0
 80057d4:	4618      	mov	r0, r3
 80057d6:	4611      	mov	r1, r2
 80057d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80057de:	2300      	movs	r3, #0
 80057e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80057e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80057e6:	4642      	mov	r2, r8
 80057e8:	464b      	mov	r3, r9
 80057ea:	f04f 0000 	mov.w	r0, #0
 80057ee:	f04f 0100 	mov.w	r1, #0
 80057f2:	0159      	lsls	r1, r3, #5
 80057f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057f8:	0150      	lsls	r0, r2, #5
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4641      	mov	r1, r8
 8005800:	1a51      	subs	r1, r2, r1
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	4649      	mov	r1, r9
 8005806:	eb63 0301 	sbc.w	r3, r3, r1
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005818:	4659      	mov	r1, fp
 800581a:	018b      	lsls	r3, r1, #6
 800581c:	4651      	mov	r1, sl
 800581e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005822:	4651      	mov	r1, sl
 8005824:	018a      	lsls	r2, r1, #6
 8005826:	4651      	mov	r1, sl
 8005828:	1a54      	subs	r4, r2, r1
 800582a:	4659      	mov	r1, fp
 800582c:	eb63 0501 	sbc.w	r5, r3, r1
 8005830:	f04f 0200 	mov.w	r2, #0
 8005834:	f04f 0300 	mov.w	r3, #0
 8005838:	00eb      	lsls	r3, r5, #3
 800583a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800583e:	00e2      	lsls	r2, r4, #3
 8005840:	4614      	mov	r4, r2
 8005842:	461d      	mov	r5, r3
 8005844:	4643      	mov	r3, r8
 8005846:	18e3      	adds	r3, r4, r3
 8005848:	603b      	str	r3, [r7, #0]
 800584a:	464b      	mov	r3, r9
 800584c:	eb45 0303 	adc.w	r3, r5, r3
 8005850:	607b      	str	r3, [r7, #4]
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800585e:	4629      	mov	r1, r5
 8005860:	028b      	lsls	r3, r1, #10
 8005862:	4621      	mov	r1, r4
 8005864:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005868:	4621      	mov	r1, r4
 800586a:	028a      	lsls	r2, r1, #10
 800586c:	4610      	mov	r0, r2
 800586e:	4619      	mov	r1, r3
 8005870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005874:	2200      	movs	r2, #0
 8005876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005878:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800587a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800587e:	f7fa fcc1 	bl	8000204 <__aeabi_uldivmod>
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	4613      	mov	r3, r2
 8005888:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800588c:	4b0d      	ldr	r3, [pc, #52]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	0f1b      	lsrs	r3, r3, #28
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800589a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800589e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80058a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80058aa:	e003      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058ac:	4b06      	ldr	r3, [pc, #24]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80058ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80058b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	37b8      	adds	r7, #184	@ 0xb8
 80058bc:	46bd      	mov	sp, r7
 80058be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058c2:	bf00      	nop
 80058c4:	40023800 	.word	0x40023800
 80058c8:	00f42400 	.word	0x00f42400

080058cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e28d      	b.n	8005dfa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 8083 	beq.w	80059f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80058ec:	4b94      	ldr	r3, [pc, #592]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 030c 	and.w	r3, r3, #12
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d019      	beq.n	800592c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80058f8:	4b91      	ldr	r3, [pc, #580]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f003 030c 	and.w	r3, r3, #12
        || \
 8005900:	2b08      	cmp	r3, #8
 8005902:	d106      	bne.n	8005912 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005904:	4b8e      	ldr	r3, [pc, #568]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800590c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005910:	d00c      	beq.n	800592c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005912:	4b8b      	ldr	r3, [pc, #556]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800591a:	2b0c      	cmp	r3, #12
 800591c:	d112      	bne.n	8005944 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800591e:	4b88      	ldr	r3, [pc, #544]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005926:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800592a:	d10b      	bne.n	8005944 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800592c:	4b84      	ldr	r3, [pc, #528]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d05b      	beq.n	80059f0 <HAL_RCC_OscConfig+0x124>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d157      	bne.n	80059f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e25a      	b.n	8005dfa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800594c:	d106      	bne.n	800595c <HAL_RCC_OscConfig+0x90>
 800594e:	4b7c      	ldr	r3, [pc, #496]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a7b      	ldr	r2, [pc, #492]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	e01d      	b.n	8005998 <HAL_RCC_OscConfig+0xcc>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005964:	d10c      	bne.n	8005980 <HAL_RCC_OscConfig+0xb4>
 8005966:	4b76      	ldr	r3, [pc, #472]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a75      	ldr	r2, [pc, #468]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 800596c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	4b73      	ldr	r3, [pc, #460]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a72      	ldr	r2, [pc, #456]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	e00b      	b.n	8005998 <HAL_RCC_OscConfig+0xcc>
 8005980:	4b6f      	ldr	r3, [pc, #444]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a6e      	ldr	r2, [pc, #440]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800598a:	6013      	str	r3, [r2, #0]
 800598c:	4b6c      	ldr	r3, [pc, #432]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a6b      	ldr	r2, [pc, #428]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d013      	beq.n	80059c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a0:	f7ff f8c8 	bl	8004b34 <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059a8:	f7ff f8c4 	bl	8004b34 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b64      	cmp	r3, #100	@ 0x64
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e21f      	b.n	8005dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ba:	4b61      	ldr	r3, [pc, #388]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0f0      	beq.n	80059a8 <HAL_RCC_OscConfig+0xdc>
 80059c6:	e014      	b.n	80059f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c8:	f7ff f8b4 	bl	8004b34 <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059d0:	f7ff f8b0 	bl	8004b34 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b64      	cmp	r3, #100	@ 0x64
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e20b      	b.n	8005dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059e2:	4b57      	ldr	r3, [pc, #348]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1f0      	bne.n	80059d0 <HAL_RCC_OscConfig+0x104>
 80059ee:	e000      	b.n	80059f2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d06f      	beq.n	8005ade <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059fe:	4b50      	ldr	r3, [pc, #320]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 030c 	and.w	r3, r3, #12
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d017      	beq.n	8005a3a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005a0a:	4b4d      	ldr	r3, [pc, #308]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 030c 	and.w	r3, r3, #12
        || \
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d105      	bne.n	8005a22 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005a16:	4b4a      	ldr	r3, [pc, #296]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00b      	beq.n	8005a3a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a22:	4b47      	ldr	r3, [pc, #284]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005a2a:	2b0c      	cmp	r3, #12
 8005a2c:	d11c      	bne.n	8005a68 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a2e:	4b44      	ldr	r3, [pc, #272]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d116      	bne.n	8005a68 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a3a:	4b41      	ldr	r3, [pc, #260]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d005      	beq.n	8005a52 <HAL_RCC_OscConfig+0x186>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d001      	beq.n	8005a52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e1d3      	b.n	8005dfa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a52:	4b3b      	ldr	r3, [pc, #236]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	4937      	ldr	r1, [pc, #220]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a66:	e03a      	b.n	8005ade <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d020      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a70:	4b34      	ldr	r3, [pc, #208]	@ (8005b44 <HAL_RCC_OscConfig+0x278>)
 8005a72:	2201      	movs	r2, #1
 8005a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a76:	f7ff f85d 	bl	8004b34 <HAL_GetTick>
 8005a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a7c:	e008      	b.n	8005a90 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a7e:	f7ff f859 	bl	8004b34 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e1b4      	b.n	8005dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a90:	4b2b      	ldr	r3, [pc, #172]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0f0      	beq.n	8005a7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a9c:	4b28      	ldr	r3, [pc, #160]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	4925      	ldr	r1, [pc, #148]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	600b      	str	r3, [r1, #0]
 8005ab0:	e015      	b.n	8005ade <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ab2:	4b24      	ldr	r3, [pc, #144]	@ (8005b44 <HAL_RCC_OscConfig+0x278>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab8:	f7ff f83c 	bl	8004b34 <HAL_GetTick>
 8005abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ac0:	f7ff f838 	bl	8004b34 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e193      	b.n	8005dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1f0      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0308 	and.w	r3, r3, #8
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d036      	beq.n	8005b58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d016      	beq.n	8005b20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005af2:	4b15      	ldr	r3, [pc, #84]	@ (8005b48 <HAL_RCC_OscConfig+0x27c>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af8:	f7ff f81c 	bl	8004b34 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b00:	f7ff f818 	bl	8004b34 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e173      	b.n	8005dfa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b12:	4b0b      	ldr	r3, [pc, #44]	@ (8005b40 <HAL_RCC_OscConfig+0x274>)
 8005b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0f0      	beq.n	8005b00 <HAL_RCC_OscConfig+0x234>
 8005b1e:	e01b      	b.n	8005b58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b20:	4b09      	ldr	r3, [pc, #36]	@ (8005b48 <HAL_RCC_OscConfig+0x27c>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b26:	f7ff f805 	bl	8004b34 <HAL_GetTick>
 8005b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b2c:	e00e      	b.n	8005b4c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b2e:	f7ff f801 	bl	8004b34 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d907      	bls.n	8005b4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e15c      	b.n	8005dfa <HAL_RCC_OscConfig+0x52e>
 8005b40:	40023800 	.word	0x40023800
 8005b44:	42470000 	.word	0x42470000
 8005b48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b4c:	4b8a      	ldr	r3, [pc, #552]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1ea      	bne.n	8005b2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 8097 	beq.w	8005c94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b66:	2300      	movs	r3, #0
 8005b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b6a:	4b83      	ldr	r3, [pc, #524]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10f      	bne.n	8005b96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b76:	2300      	movs	r3, #0
 8005b78:	60bb      	str	r3, [r7, #8]
 8005b7a:	4b7f      	ldr	r3, [pc, #508]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7e:	4a7e      	ldr	r2, [pc, #504]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b86:	4b7c      	ldr	r3, [pc, #496]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b8e:	60bb      	str	r3, [r7, #8]
 8005b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b92:	2301      	movs	r3, #1
 8005b94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b96:	4b79      	ldr	r3, [pc, #484]	@ (8005d7c <HAL_RCC_OscConfig+0x4b0>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d118      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ba2:	4b76      	ldr	r3, [pc, #472]	@ (8005d7c <HAL_RCC_OscConfig+0x4b0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a75      	ldr	r2, [pc, #468]	@ (8005d7c <HAL_RCC_OscConfig+0x4b0>)
 8005ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bae:	f7fe ffc1 	bl	8004b34 <HAL_GetTick>
 8005bb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bb6:	f7fe ffbd 	bl	8004b34 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e118      	b.n	8005dfa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc8:	4b6c      	ldr	r3, [pc, #432]	@ (8005d7c <HAL_RCC_OscConfig+0x4b0>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0f0      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d106      	bne.n	8005bea <HAL_RCC_OscConfig+0x31e>
 8005bdc:	4b66      	ldr	r3, [pc, #408]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be0:	4a65      	ldr	r2, [pc, #404]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005be2:	f043 0301 	orr.w	r3, r3, #1
 8005be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005be8:	e01c      	b.n	8005c24 <HAL_RCC_OscConfig+0x358>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	2b05      	cmp	r3, #5
 8005bf0:	d10c      	bne.n	8005c0c <HAL_RCC_OscConfig+0x340>
 8005bf2:	4b61      	ldr	r3, [pc, #388]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf6:	4a60      	ldr	r2, [pc, #384]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005bf8:	f043 0304 	orr.w	r3, r3, #4
 8005bfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bfe:	4b5e      	ldr	r3, [pc, #376]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c02:	4a5d      	ldr	r2, [pc, #372]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005c04:	f043 0301 	orr.w	r3, r3, #1
 8005c08:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c0a:	e00b      	b.n	8005c24 <HAL_RCC_OscConfig+0x358>
 8005c0c:	4b5a      	ldr	r3, [pc, #360]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c10:	4a59      	ldr	r2, [pc, #356]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005c12:	f023 0301 	bic.w	r3, r3, #1
 8005c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c18:	4b57      	ldr	r3, [pc, #348]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c1c:	4a56      	ldr	r2, [pc, #344]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005c1e:	f023 0304 	bic.w	r3, r3, #4
 8005c22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d015      	beq.n	8005c58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c2c:	f7fe ff82 	bl	8004b34 <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c32:	e00a      	b.n	8005c4a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c34:	f7fe ff7e 	bl	8004b34 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e0d7      	b.n	8005dfa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0ee      	beq.n	8005c34 <HAL_RCC_OscConfig+0x368>
 8005c56:	e014      	b.n	8005c82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c58:	f7fe ff6c 	bl	8004b34 <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c5e:	e00a      	b.n	8005c76 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c60:	f7fe ff68 	bl	8004b34 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e0c1      	b.n	8005dfa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c76:	4b40      	ldr	r3, [pc, #256]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1ee      	bne.n	8005c60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c82:	7dfb      	ldrb	r3, [r7, #23]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d105      	bne.n	8005c94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c88:	4b3b      	ldr	r3, [pc, #236]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8c:	4a3a      	ldr	r2, [pc, #232]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005c8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 80ad 	beq.w	8005df8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c9e:	4b36      	ldr	r3, [pc, #216]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 030c 	and.w	r3, r3, #12
 8005ca6:	2b08      	cmp	r3, #8
 8005ca8:	d060      	beq.n	8005d6c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d145      	bne.n	8005d3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cb2:	4b33      	ldr	r3, [pc, #204]	@ (8005d80 <HAL_RCC_OscConfig+0x4b4>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb8:	f7fe ff3c 	bl	8004b34 <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cc0:	f7fe ff38 	bl	8004b34 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e093      	b.n	8005dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd2:	4b29      	ldr	r3, [pc, #164]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1f0      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69da      	ldr	r2, [r3, #28]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cec:	019b      	lsls	r3, r3, #6
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf4:	085b      	lsrs	r3, r3, #1
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	041b      	lsls	r3, r3, #16
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d00:	061b      	lsls	r3, r3, #24
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d08:	071b      	lsls	r3, r3, #28
 8005d0a:	491b      	ldr	r1, [pc, #108]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d10:	4b1b      	ldr	r3, [pc, #108]	@ (8005d80 <HAL_RCC_OscConfig+0x4b4>)
 8005d12:	2201      	movs	r2, #1
 8005d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d16:	f7fe ff0d 	bl	8004b34 <HAL_GetTick>
 8005d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d1c:	e008      	b.n	8005d30 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d1e:	f7fe ff09 	bl	8004b34 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e064      	b.n	8005dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d30:	4b11      	ldr	r3, [pc, #68]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0f0      	beq.n	8005d1e <HAL_RCC_OscConfig+0x452>
 8005d3c:	e05c      	b.n	8005df8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d3e:	4b10      	ldr	r3, [pc, #64]	@ (8005d80 <HAL_RCC_OscConfig+0x4b4>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d44:	f7fe fef6 	bl	8004b34 <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d4c:	f7fe fef2 	bl	8004b34 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e04d      	b.n	8005dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d5e:	4b06      	ldr	r3, [pc, #24]	@ (8005d78 <HAL_RCC_OscConfig+0x4ac>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1f0      	bne.n	8005d4c <HAL_RCC_OscConfig+0x480>
 8005d6a:	e045      	b.n	8005df8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d107      	bne.n	8005d84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e040      	b.n	8005dfa <HAL_RCC_OscConfig+0x52e>
 8005d78:	40023800 	.word	0x40023800
 8005d7c:	40007000 	.word	0x40007000
 8005d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d84:	4b1f      	ldr	r3, [pc, #124]	@ (8005e04 <HAL_RCC_OscConfig+0x538>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d030      	beq.n	8005df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d129      	bne.n	8005df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d122      	bne.n	8005df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005db4:	4013      	ands	r3, r2
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d119      	bne.n	8005df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d10f      	bne.n	8005df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d107      	bne.n	8005df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d001      	beq.n	8005df8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40023800 	.word	0x40023800

08005e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e041      	b.n	8005e9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d106      	bne.n	8005e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7fb f95e 	bl	80010f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3304      	adds	r3, #4
 8005e44:	4619      	mov	r1, r3
 8005e46:	4610      	mov	r0, r2
 8005e48:	f000 f95e 	bl	8006108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d001      	beq.n	8005ec0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e046      	b.n	8005f4e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a23      	ldr	r2, [pc, #140]	@ (8005f5c <HAL_TIM_Base_Start+0xb4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d022      	beq.n	8005f18 <HAL_TIM_Base_Start+0x70>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eda:	d01d      	beq.n	8005f18 <HAL_TIM_Base_Start+0x70>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8005f60 <HAL_TIM_Base_Start+0xb8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d018      	beq.n	8005f18 <HAL_TIM_Base_Start+0x70>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a1e      	ldr	r2, [pc, #120]	@ (8005f64 <HAL_TIM_Base_Start+0xbc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d013      	beq.n	8005f18 <HAL_TIM_Base_Start+0x70>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8005f68 <HAL_TIM_Base_Start+0xc0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00e      	beq.n	8005f18 <HAL_TIM_Base_Start+0x70>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1b      	ldr	r2, [pc, #108]	@ (8005f6c <HAL_TIM_Base_Start+0xc4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d009      	beq.n	8005f18 <HAL_TIM_Base_Start+0x70>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a19      	ldr	r2, [pc, #100]	@ (8005f70 <HAL_TIM_Base_Start+0xc8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d004      	beq.n	8005f18 <HAL_TIM_Base_Start+0x70>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a18      	ldr	r2, [pc, #96]	@ (8005f74 <HAL_TIM_Base_Start+0xcc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d111      	bne.n	8005f3c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b06      	cmp	r3, #6
 8005f28:	d010      	beq.n	8005f4c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f042 0201 	orr.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3a:	e007      	b.n	8005f4c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	40010000 	.word	0x40010000
 8005f60:	40000400 	.word	0x40000400
 8005f64:	40000800 	.word	0x40000800
 8005f68:	40000c00 	.word	0x40000c00
 8005f6c:	40010400 	.word	0x40010400
 8005f70:	40014000 	.word	0x40014000
 8005f74:	40001800 	.word	0x40001800

08005f78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d101      	bne.n	8005f94 <HAL_TIM_ConfigClockSource+0x1c>
 8005f90:	2302      	movs	r3, #2
 8005f92:	e0b4      	b.n	80060fe <HAL_TIM_ConfigClockSource+0x186>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fcc:	d03e      	beq.n	800604c <HAL_TIM_ConfigClockSource+0xd4>
 8005fce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fd2:	f200 8087 	bhi.w	80060e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fda:	f000 8086 	beq.w	80060ea <HAL_TIM_ConfigClockSource+0x172>
 8005fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fe2:	d87f      	bhi.n	80060e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe4:	2b70      	cmp	r3, #112	@ 0x70
 8005fe6:	d01a      	beq.n	800601e <HAL_TIM_ConfigClockSource+0xa6>
 8005fe8:	2b70      	cmp	r3, #112	@ 0x70
 8005fea:	d87b      	bhi.n	80060e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fec:	2b60      	cmp	r3, #96	@ 0x60
 8005fee:	d050      	beq.n	8006092 <HAL_TIM_ConfigClockSource+0x11a>
 8005ff0:	2b60      	cmp	r3, #96	@ 0x60
 8005ff2:	d877      	bhi.n	80060e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff4:	2b50      	cmp	r3, #80	@ 0x50
 8005ff6:	d03c      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0xfa>
 8005ff8:	2b50      	cmp	r3, #80	@ 0x50
 8005ffa:	d873      	bhi.n	80060e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ffc:	2b40      	cmp	r3, #64	@ 0x40
 8005ffe:	d058      	beq.n	80060b2 <HAL_TIM_ConfigClockSource+0x13a>
 8006000:	2b40      	cmp	r3, #64	@ 0x40
 8006002:	d86f      	bhi.n	80060e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006004:	2b30      	cmp	r3, #48	@ 0x30
 8006006:	d064      	beq.n	80060d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006008:	2b30      	cmp	r3, #48	@ 0x30
 800600a:	d86b      	bhi.n	80060e4 <HAL_TIM_ConfigClockSource+0x16c>
 800600c:	2b20      	cmp	r3, #32
 800600e:	d060      	beq.n	80060d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006010:	2b20      	cmp	r3, #32
 8006012:	d867      	bhi.n	80060e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006014:	2b00      	cmp	r3, #0
 8006016:	d05c      	beq.n	80060d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006018:	2b10      	cmp	r3, #16
 800601a:	d05a      	beq.n	80060d2 <HAL_TIM_ConfigClockSource+0x15a>
 800601c:	e062      	b.n	80060e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800602e:	f000 f991 	bl	8006354 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006040:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	609a      	str	r2, [r3, #8]
      break;
 800604a:	e04f      	b.n	80060ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800605c:	f000 f97a 	bl	8006354 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800606e:	609a      	str	r2, [r3, #8]
      break;
 8006070:	e03c      	b.n	80060ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800607e:	461a      	mov	r2, r3
 8006080:	f000 f8ee 	bl	8006260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2150      	movs	r1, #80	@ 0x50
 800608a:	4618      	mov	r0, r3
 800608c:	f000 f947 	bl	800631e <TIM_ITRx_SetConfig>
      break;
 8006090:	e02c      	b.n	80060ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800609e:	461a      	mov	r2, r3
 80060a0:	f000 f90d 	bl	80062be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2160      	movs	r1, #96	@ 0x60
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 f937 	bl	800631e <TIM_ITRx_SetConfig>
      break;
 80060b0:	e01c      	b.n	80060ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060be:	461a      	mov	r2, r3
 80060c0:	f000 f8ce 	bl	8006260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2140      	movs	r1, #64	@ 0x40
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 f927 	bl	800631e <TIM_ITRx_SetConfig>
      break;
 80060d0:	e00c      	b.n	80060ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4619      	mov	r1, r3
 80060dc:	4610      	mov	r0, r2
 80060de:	f000 f91e 	bl	800631e <TIM_ITRx_SetConfig>
      break;
 80060e2:	e003      	b.n	80060ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	73fb      	strb	r3, [r7, #15]
      break;
 80060e8:	e000      	b.n	80060ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
	...

08006108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a46      	ldr	r2, [pc, #280]	@ (8006234 <TIM_Base_SetConfig+0x12c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d013      	beq.n	8006148 <TIM_Base_SetConfig+0x40>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006126:	d00f      	beq.n	8006148 <TIM_Base_SetConfig+0x40>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a43      	ldr	r2, [pc, #268]	@ (8006238 <TIM_Base_SetConfig+0x130>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d00b      	beq.n	8006148 <TIM_Base_SetConfig+0x40>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a42      	ldr	r2, [pc, #264]	@ (800623c <TIM_Base_SetConfig+0x134>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d007      	beq.n	8006148 <TIM_Base_SetConfig+0x40>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a41      	ldr	r2, [pc, #260]	@ (8006240 <TIM_Base_SetConfig+0x138>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d003      	beq.n	8006148 <TIM_Base_SetConfig+0x40>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a40      	ldr	r2, [pc, #256]	@ (8006244 <TIM_Base_SetConfig+0x13c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d108      	bne.n	800615a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800614e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a35      	ldr	r2, [pc, #212]	@ (8006234 <TIM_Base_SetConfig+0x12c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d02b      	beq.n	80061ba <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006168:	d027      	beq.n	80061ba <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a32      	ldr	r2, [pc, #200]	@ (8006238 <TIM_Base_SetConfig+0x130>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d023      	beq.n	80061ba <TIM_Base_SetConfig+0xb2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a31      	ldr	r2, [pc, #196]	@ (800623c <TIM_Base_SetConfig+0x134>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d01f      	beq.n	80061ba <TIM_Base_SetConfig+0xb2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a30      	ldr	r2, [pc, #192]	@ (8006240 <TIM_Base_SetConfig+0x138>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d01b      	beq.n	80061ba <TIM_Base_SetConfig+0xb2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a2f      	ldr	r2, [pc, #188]	@ (8006244 <TIM_Base_SetConfig+0x13c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d017      	beq.n	80061ba <TIM_Base_SetConfig+0xb2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a2e      	ldr	r2, [pc, #184]	@ (8006248 <TIM_Base_SetConfig+0x140>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d013      	beq.n	80061ba <TIM_Base_SetConfig+0xb2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a2d      	ldr	r2, [pc, #180]	@ (800624c <TIM_Base_SetConfig+0x144>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d00f      	beq.n	80061ba <TIM_Base_SetConfig+0xb2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a2c      	ldr	r2, [pc, #176]	@ (8006250 <TIM_Base_SetConfig+0x148>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d00b      	beq.n	80061ba <TIM_Base_SetConfig+0xb2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a2b      	ldr	r2, [pc, #172]	@ (8006254 <TIM_Base_SetConfig+0x14c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d007      	beq.n	80061ba <TIM_Base_SetConfig+0xb2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a2a      	ldr	r2, [pc, #168]	@ (8006258 <TIM_Base_SetConfig+0x150>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d003      	beq.n	80061ba <TIM_Base_SetConfig+0xb2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a29      	ldr	r2, [pc, #164]	@ (800625c <TIM_Base_SetConfig+0x154>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d108      	bne.n	80061cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a10      	ldr	r2, [pc, #64]	@ (8006234 <TIM_Base_SetConfig+0x12c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d003      	beq.n	8006200 <TIM_Base_SetConfig+0xf8>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a12      	ldr	r2, [pc, #72]	@ (8006244 <TIM_Base_SetConfig+0x13c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d103      	bne.n	8006208 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b01      	cmp	r3, #1
 8006218:	d105      	bne.n	8006226 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f023 0201 	bic.w	r2, r3, #1
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	611a      	str	r2, [r3, #16]
  }
}
 8006226:	bf00      	nop
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	40010000 	.word	0x40010000
 8006238:	40000400 	.word	0x40000400
 800623c:	40000800 	.word	0x40000800
 8006240:	40000c00 	.word	0x40000c00
 8006244:	40010400 	.word	0x40010400
 8006248:	40014000 	.word	0x40014000
 800624c:	40014400 	.word	0x40014400
 8006250:	40014800 	.word	0x40014800
 8006254:	40001800 	.word	0x40001800
 8006258:	40001c00 	.word	0x40001c00
 800625c:	40002000 	.word	0x40002000

08006260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	f023 0201 	bic.w	r2, r3, #1
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800628a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	011b      	lsls	r3, r3, #4
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	4313      	orrs	r3, r2
 8006294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f023 030a 	bic.w	r3, r3, #10
 800629c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	621a      	str	r2, [r3, #32]
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062be:	b480      	push	{r7}
 80062c0:	b087      	sub	sp, #28
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	60f8      	str	r0, [r7, #12]
 80062c6:	60b9      	str	r1, [r7, #8]
 80062c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	f023 0210 	bic.w	r2, r3, #16
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	031b      	lsls	r3, r3, #12
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	621a      	str	r2, [r3, #32]
}
 8006312:	bf00      	nop
 8006314:	371c      	adds	r7, #28
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800631e:	b480      	push	{r7}
 8006320:	b085      	sub	sp, #20
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	f043 0307 	orr.w	r3, r3, #7
 8006340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	609a      	str	r2, [r3, #8]
}
 8006348:	bf00      	nop
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800636e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	021a      	lsls	r2, r3, #8
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	431a      	orrs	r2, r3
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	4313      	orrs	r3, r2
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	4313      	orrs	r3, r2
 8006380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	609a      	str	r2, [r3, #8]
}
 8006388:	bf00      	nop
 800638a:	371c      	adds	r7, #28
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e05a      	b.n	8006462 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a21      	ldr	r2, [pc, #132]	@ (8006470 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d022      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f8:	d01d      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a1d      	ldr	r2, [pc, #116]	@ (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d018      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a1b      	ldr	r2, [pc, #108]	@ (8006478 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d013      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1a      	ldr	r2, [pc, #104]	@ (800647c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00e      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a18      	ldr	r2, [pc, #96]	@ (8006480 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d009      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a17      	ldr	r2, [pc, #92]	@ (8006484 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d004      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a15      	ldr	r2, [pc, #84]	@ (8006488 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d10c      	bne.n	8006450 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800643c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	4313      	orrs	r3, r2
 8006446:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	40010000 	.word	0x40010000
 8006474:	40000400 	.word	0x40000400
 8006478:	40000800 	.word	0x40000800
 800647c:	40000c00 	.word	0x40000c00
 8006480:	40010400 	.word	0x40010400
 8006484:	40014000 	.word	0x40014000
 8006488:	40001800 	.word	0x40001800

0800648c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e042      	b.n	8006524 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fa fe3e 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2224      	movs	r2, #36	@ 0x24
 80064bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fcdb 	bl	8006e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	691a      	ldr	r2, [r3, #16]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695a      	ldr	r2, [r3, #20]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68da      	ldr	r2, [r3, #12]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2220      	movs	r2, #32
 8006518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	4613      	mov	r3, r2
 8006538:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b20      	cmp	r3, #32
 8006544:	d112      	bne.n	800656c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <HAL_UART_Receive_IT+0x26>
 800654c:	88fb      	ldrh	r3, [r7, #6]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e00b      	b.n	800656e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800655c:	88fb      	ldrh	r3, [r7, #6]
 800655e:	461a      	mov	r2, r3
 8006560:	68b9      	ldr	r1, [r7, #8]
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 faba 	bl	8006adc <UART_Start_Receive_IT>
 8006568:	4603      	mov	r3, r0
 800656a:	e000      	b.n	800656e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800656c:	2302      	movs	r3, #2
  }
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b0ba      	sub	sp, #232	@ 0xe8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800659e:	2300      	movs	r3, #0
 80065a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ae:	f003 030f 	and.w	r3, r3, #15
 80065b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80065b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10f      	bne.n	80065de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c2:	f003 0320 	and.w	r3, r3, #32
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d009      	beq.n	80065de <HAL_UART_IRQHandler+0x66>
 80065ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fb99 	bl	8006d0e <UART_Receive_IT>
      return;
 80065dc:	e25b      	b.n	8006a96 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80065de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 80de 	beq.w	80067a4 <HAL_UART_IRQHandler+0x22c>
 80065e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d106      	bne.n	8006602 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 80d1 	beq.w	80067a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00b      	beq.n	8006626 <HAL_UART_IRQHandler+0xae>
 800660e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006616:	2b00      	cmp	r3, #0
 8006618:	d005      	beq.n	8006626 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800661e:	f043 0201 	orr.w	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800662a:	f003 0304 	and.w	r3, r3, #4
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00b      	beq.n	800664a <HAL_UART_IRQHandler+0xd2>
 8006632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d005      	beq.n	800664a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006642:	f043 0202 	orr.w	r2, r3, #2
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800664a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00b      	beq.n	800666e <HAL_UART_IRQHandler+0xf6>
 8006656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d005      	beq.n	800666e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006666:	f043 0204 	orr.w	r2, r3, #4
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800666e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006672:	f003 0308 	and.w	r3, r3, #8
 8006676:	2b00      	cmp	r3, #0
 8006678:	d011      	beq.n	800669e <HAL_UART_IRQHandler+0x126>
 800667a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800667e:	f003 0320 	and.w	r3, r3, #32
 8006682:	2b00      	cmp	r3, #0
 8006684:	d105      	bne.n	8006692 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d005      	beq.n	800669e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006696:	f043 0208 	orr.w	r2, r3, #8
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 81f2 	beq.w	8006a8c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ac:	f003 0320 	and.w	r3, r3, #32
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d008      	beq.n	80066c6 <HAL_UART_IRQHandler+0x14e>
 80066b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066b8:	f003 0320 	and.w	r3, r3, #32
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fb24 	bl	8006d0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d0:	2b40      	cmp	r3, #64	@ 0x40
 80066d2:	bf0c      	ite	eq
 80066d4:	2301      	moveq	r3, #1
 80066d6:	2300      	movne	r3, #0
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e2:	f003 0308 	and.w	r3, r3, #8
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d103      	bne.n	80066f2 <HAL_UART_IRQHandler+0x17a>
 80066ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d04f      	beq.n	8006792 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fa2c 	bl	8006b50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006702:	2b40      	cmp	r3, #64	@ 0x40
 8006704:	d141      	bne.n	800678a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3314      	adds	r3, #20
 800670c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006710:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800671c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006724:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3314      	adds	r3, #20
 800672e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006732:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006736:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800673e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800674a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1d9      	bne.n	8006706 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006756:	2b00      	cmp	r3, #0
 8006758:	d013      	beq.n	8006782 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800675e:	4a7e      	ldr	r2, [pc, #504]	@ (8006958 <HAL_UART_IRQHandler+0x3e0>)
 8006760:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006766:	4618      	mov	r0, r3
 8006768:	f7fe fb95 	bl	8004e96 <HAL_DMA_Abort_IT>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d016      	beq.n	80067a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800677c:	4610      	mov	r0, r2
 800677e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006780:	e00e      	b.n	80067a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f994 	bl	8006ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006788:	e00a      	b.n	80067a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f990 	bl	8006ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006790:	e006      	b.n	80067a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f98c 	bl	8006ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800679e:	e175      	b.n	8006a8c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a0:	bf00      	nop
    return;
 80067a2:	e173      	b.n	8006a8c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	f040 814f 	bne.w	8006a4c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80067ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067b2:	f003 0310 	and.w	r3, r3, #16
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 8148 	beq.w	8006a4c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80067bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067c0:	f003 0310 	and.w	r3, r3, #16
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 8141 	beq.w	8006a4c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067ca:	2300      	movs	r3, #0
 80067cc:	60bb      	str	r3, [r7, #8]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	60bb      	str	r3, [r7, #8]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	60bb      	str	r3, [r7, #8]
 80067de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ea:	2b40      	cmp	r3, #64	@ 0x40
 80067ec:	f040 80b6 	bne.w	800695c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 8145 	beq.w	8006a90 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800680a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800680e:	429a      	cmp	r2, r3
 8006810:	f080 813e 	bcs.w	8006a90 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800681a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006826:	f000 8088 	beq.w	800693a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	330c      	adds	r3, #12
 8006830:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006838:	e853 3f00 	ldrex	r3, [r3]
 800683c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006840:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006848:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	330c      	adds	r3, #12
 8006852:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006856:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800685a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006862:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800686e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1d9      	bne.n	800682a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3314      	adds	r3, #20
 800687c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006886:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006888:	f023 0301 	bic.w	r3, r3, #1
 800688c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3314      	adds	r3, #20
 8006896:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800689a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800689e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80068a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80068ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e1      	bne.n	8006876 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3314      	adds	r3, #20
 80068b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068bc:	e853 3f00 	ldrex	r3, [r3]
 80068c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80068c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3314      	adds	r3, #20
 80068d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80068d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80068d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80068dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80068e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1e3      	bne.n	80068b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	330c      	adds	r3, #12
 80068fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006902:	e853 3f00 	ldrex	r3, [r3]
 8006906:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006908:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800690a:	f023 0310 	bic.w	r3, r3, #16
 800690e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	330c      	adds	r3, #12
 8006918:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800691c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800691e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006920:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006922:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006924:	e841 2300 	strex	r3, r2, [r1]
 8006928:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800692a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e3      	bne.n	80068f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006934:	4618      	mov	r0, r3
 8006936:	f7fe fa3e 	bl	8004db6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2202      	movs	r2, #2
 800693e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006948:	b29b      	uxth	r3, r3
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	b29b      	uxth	r3, r3
 800694e:	4619      	mov	r1, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f8b7 	bl	8006ac4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006956:	e09b      	b.n	8006a90 <HAL_UART_IRQHandler+0x518>
 8006958:	08006c17 	.word	0x08006c17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006964:	b29b      	uxth	r3, r3
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006970:	b29b      	uxth	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 808e 	beq.w	8006a94 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006978:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 8089 	beq.w	8006a94 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	330c      	adds	r3, #12
 8006988:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698c:	e853 3f00 	ldrex	r3, [r3]
 8006990:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006998:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	330c      	adds	r3, #12
 80069a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80069a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80069a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e3      	bne.n	8006982 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3314      	adds	r3, #20
 80069c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	623b      	str	r3, [r7, #32]
   return(result);
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	f023 0301 	bic.w	r3, r3, #1
 80069d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3314      	adds	r3, #20
 80069da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80069de:	633a      	str	r2, [r7, #48]	@ 0x30
 80069e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e3      	bne.n	80069ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2220      	movs	r2, #32
 80069f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	330c      	adds	r3, #12
 8006a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	e853 3f00 	ldrex	r3, [r3]
 8006a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 0310 	bic.w	r3, r3, #16
 8006a16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	330c      	adds	r3, #12
 8006a20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006a24:	61fa      	str	r2, [r7, #28]
 8006a26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a28:	69b9      	ldr	r1, [r7, #24]
 8006a2a:	69fa      	ldr	r2, [r7, #28]
 8006a2c:	e841 2300 	strex	r3, r2, [r1]
 8006a30:	617b      	str	r3, [r7, #20]
   return(result);
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1e3      	bne.n	8006a00 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f83d 	bl	8006ac4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a4a:	e023      	b.n	8006a94 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d009      	beq.n	8006a6c <HAL_UART_IRQHandler+0x4f4>
 8006a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d003      	beq.n	8006a6c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f8ea 	bl	8006c3e <UART_Transmit_IT>
    return;
 8006a6a:	e014      	b.n	8006a96 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00e      	beq.n	8006a96 <HAL_UART_IRQHandler+0x51e>
 8006a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d008      	beq.n	8006a96 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f92a 	bl	8006cde <UART_EndTransmit_IT>
    return;
 8006a8a:	e004      	b.n	8006a96 <HAL_UART_IRQHandler+0x51e>
    return;
 8006a8c:	bf00      	nop
 8006a8e:	e002      	b.n	8006a96 <HAL_UART_IRQHandler+0x51e>
      return;
 8006a90:	bf00      	nop
 8006a92:	e000      	b.n	8006a96 <HAL_UART_IRQHandler+0x51e>
      return;
 8006a94:	bf00      	nop
  }
}
 8006a96:	37e8      	adds	r7, #232	@ 0xe8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	88fa      	ldrh	r2, [r7, #6]
 8006af4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	88fa      	ldrh	r2, [r7, #6]
 8006afa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2222      	movs	r2, #34	@ 0x22
 8006b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d007      	beq.n	8006b22 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b20:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	695a      	ldr	r2, [r3, #20]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f042 0201 	orr.w	r2, r2, #1
 8006b30:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f042 0220 	orr.w	r2, r2, #32
 8006b40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b095      	sub	sp, #84	@ 0x54
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	330c      	adds	r3, #12
 8006b5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	330c      	adds	r3, #12
 8006b76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b78:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e5      	bne.n	8006b58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3314      	adds	r3, #20
 8006b92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	f023 0301 	bic.w	r3, r3, #1
 8006ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3314      	adds	r3, #20
 8006baa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e5      	bne.n	8006b8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d119      	bne.n	8006bfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	330c      	adds	r3, #12
 8006bce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	e853 3f00 	ldrex	r3, [r3]
 8006bd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f023 0310 	bic.w	r3, r3, #16
 8006bde:	647b      	str	r3, [r7, #68]	@ 0x44
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	330c      	adds	r3, #12
 8006be6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006be8:	61ba      	str	r2, [r7, #24]
 8006bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bec:	6979      	ldr	r1, [r7, #20]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	e841 2300 	strex	r3, r2, [r1]
 8006bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1e5      	bne.n	8006bc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006c0a:	bf00      	nop
 8006c0c:	3754      	adds	r7, #84	@ 0x54
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f7ff ff3d 	bl	8006ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c36:	bf00      	nop
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b085      	sub	sp, #20
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b21      	cmp	r3, #33	@ 0x21
 8006c50:	d13e      	bne.n	8006cd0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c5a:	d114      	bne.n	8006c86 <UART_Transmit_IT+0x48>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d110      	bne.n	8006c86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	1c9a      	adds	r2, r3, #2
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	621a      	str	r2, [r3, #32]
 8006c84:	e008      	b.n	8006c98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	1c59      	adds	r1, r3, #1
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	6211      	str	r1, [r2, #32]
 8006c90:	781a      	ldrb	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10f      	bne.n	8006ccc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006cba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68da      	ldr	r2, [r3, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	e000      	b.n	8006cd2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006cd0:	2302      	movs	r3, #2
  }
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b082      	sub	sp, #8
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cf4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff fecc 	bl	8006a9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b08c      	sub	sp, #48	@ 0x30
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b22      	cmp	r3, #34	@ 0x22
 8006d20:	f040 80ae 	bne.w	8006e80 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d2c:	d117      	bne.n	8006d5e <UART_Receive_IT+0x50>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d113      	bne.n	8006d5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d56:	1c9a      	adds	r2, r3, #2
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d5c:	e026      	b.n	8006dac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006d64:	2300      	movs	r3, #0
 8006d66:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d70:	d007      	beq.n	8006d82 <UART_Receive_IT+0x74>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10a      	bne.n	8006d90 <UART_Receive_IT+0x82>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d106      	bne.n	8006d90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8c:	701a      	strb	r2, [r3, #0]
 8006d8e:	e008      	b.n	8006da2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da6:	1c5a      	adds	r2, r3, #1
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	4619      	mov	r1, r3
 8006dba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d15d      	bne.n	8006e7c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68da      	ldr	r2, [r3, #12]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 0220 	bic.w	r2, r2, #32
 8006dce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006dde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	695a      	ldr	r2, [r3, #20]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 0201 	bic.w	r2, r2, #1
 8006dee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d135      	bne.n	8006e72 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	330c      	adds	r3, #12
 8006e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	e853 3f00 	ldrex	r3, [r3]
 8006e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f023 0310 	bic.w	r3, r3, #16
 8006e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	330c      	adds	r3, #12
 8006e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e2c:	623a      	str	r2, [r7, #32]
 8006e2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e30:	69f9      	ldr	r1, [r7, #28]
 8006e32:	6a3a      	ldr	r2, [r7, #32]
 8006e34:	e841 2300 	strex	r3, r2, [r1]
 8006e38:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e5      	bne.n	8006e0c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0310 	and.w	r3, r3, #16
 8006e4a:	2b10      	cmp	r3, #16
 8006e4c:	d10a      	bne.n	8006e64 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff fe2a 	bl	8006ac4 <HAL_UARTEx_RxEventCallback>
 8006e70:	e002      	b.n	8006e78 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fa f8e8 	bl	8001048 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	e002      	b.n	8006e82 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	e000      	b.n	8006e82 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006e80:	2302      	movs	r3, #2
  }
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3730      	adds	r7, #48	@ 0x30
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
	...

08006e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e90:	b0c0      	sub	sp, #256	@ 0x100
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea8:	68d9      	ldr	r1, [r3, #12]
 8006eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	ea40 0301 	orr.w	r3, r0, r1
 8006eb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ee4:	f021 010c 	bic.w	r1, r1, #12
 8006ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ef2:	430b      	orrs	r3, r1
 8006ef4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f06:	6999      	ldr	r1, [r3, #24]
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	ea40 0301 	orr.w	r3, r0, r1
 8006f12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4b8f      	ldr	r3, [pc, #572]	@ (8007158 <UART_SetConfig+0x2cc>)
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d005      	beq.n	8006f2c <UART_SetConfig+0xa0>
 8006f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	4b8d      	ldr	r3, [pc, #564]	@ (800715c <UART_SetConfig+0x2d0>)
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d104      	bne.n	8006f36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f2c:	f7fe fa8a 	bl	8005444 <HAL_RCC_GetPCLK2Freq>
 8006f30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f34:	e003      	b.n	8006f3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f36:	f7fe fa71 	bl	800541c <HAL_RCC_GetPCLK1Freq>
 8006f3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f42:	69db      	ldr	r3, [r3, #28]
 8006f44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f48:	f040 810c 	bne.w	8007164 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f50:	2200      	movs	r2, #0
 8006f52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006f5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006f5e:	4622      	mov	r2, r4
 8006f60:	462b      	mov	r3, r5
 8006f62:	1891      	adds	r1, r2, r2
 8006f64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006f66:	415b      	adcs	r3, r3
 8006f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006f6e:	4621      	mov	r1, r4
 8006f70:	eb12 0801 	adds.w	r8, r2, r1
 8006f74:	4629      	mov	r1, r5
 8006f76:	eb43 0901 	adc.w	r9, r3, r1
 8006f7a:	f04f 0200 	mov.w	r2, #0
 8006f7e:	f04f 0300 	mov.w	r3, #0
 8006f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f8e:	4690      	mov	r8, r2
 8006f90:	4699      	mov	r9, r3
 8006f92:	4623      	mov	r3, r4
 8006f94:	eb18 0303 	adds.w	r3, r8, r3
 8006f98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	eb49 0303 	adc.w	r3, r9, r3
 8006fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fb2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006fb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006fba:	460b      	mov	r3, r1
 8006fbc:	18db      	adds	r3, r3, r3
 8006fbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	eb42 0303 	adc.w	r3, r2, r3
 8006fc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006fcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006fd0:	f7f9 f918 	bl	8000204 <__aeabi_uldivmod>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4b61      	ldr	r3, [pc, #388]	@ (8007160 <UART_SetConfig+0x2d4>)
 8006fda:	fba3 2302 	umull	r2, r3, r3, r2
 8006fde:	095b      	lsrs	r3, r3, #5
 8006fe0:	011c      	lsls	r4, r3, #4
 8006fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006fec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ff0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ff4:	4642      	mov	r2, r8
 8006ff6:	464b      	mov	r3, r9
 8006ff8:	1891      	adds	r1, r2, r2
 8006ffa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ffc:	415b      	adcs	r3, r3
 8006ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007000:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007004:	4641      	mov	r1, r8
 8007006:	eb12 0a01 	adds.w	sl, r2, r1
 800700a:	4649      	mov	r1, r9
 800700c:	eb43 0b01 	adc.w	fp, r3, r1
 8007010:	f04f 0200 	mov.w	r2, #0
 8007014:	f04f 0300 	mov.w	r3, #0
 8007018:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800701c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007020:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007024:	4692      	mov	sl, r2
 8007026:	469b      	mov	fp, r3
 8007028:	4643      	mov	r3, r8
 800702a:	eb1a 0303 	adds.w	r3, sl, r3
 800702e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007032:	464b      	mov	r3, r9
 8007034:	eb4b 0303 	adc.w	r3, fp, r3
 8007038:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800703c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007048:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800704c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007050:	460b      	mov	r3, r1
 8007052:	18db      	adds	r3, r3, r3
 8007054:	643b      	str	r3, [r7, #64]	@ 0x40
 8007056:	4613      	mov	r3, r2
 8007058:	eb42 0303 	adc.w	r3, r2, r3
 800705c:	647b      	str	r3, [r7, #68]	@ 0x44
 800705e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007062:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007066:	f7f9 f8cd 	bl	8000204 <__aeabi_uldivmod>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	4611      	mov	r1, r2
 8007070:	4b3b      	ldr	r3, [pc, #236]	@ (8007160 <UART_SetConfig+0x2d4>)
 8007072:	fba3 2301 	umull	r2, r3, r3, r1
 8007076:	095b      	lsrs	r3, r3, #5
 8007078:	2264      	movs	r2, #100	@ 0x64
 800707a:	fb02 f303 	mul.w	r3, r2, r3
 800707e:	1acb      	subs	r3, r1, r3
 8007080:	00db      	lsls	r3, r3, #3
 8007082:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007086:	4b36      	ldr	r3, [pc, #216]	@ (8007160 <UART_SetConfig+0x2d4>)
 8007088:	fba3 2302 	umull	r2, r3, r3, r2
 800708c:	095b      	lsrs	r3, r3, #5
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007094:	441c      	add	r4, r3
 8007096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800709a:	2200      	movs	r2, #0
 800709c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80070a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80070a8:	4642      	mov	r2, r8
 80070aa:	464b      	mov	r3, r9
 80070ac:	1891      	adds	r1, r2, r2
 80070ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80070b0:	415b      	adcs	r3, r3
 80070b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80070b8:	4641      	mov	r1, r8
 80070ba:	1851      	adds	r1, r2, r1
 80070bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80070be:	4649      	mov	r1, r9
 80070c0:	414b      	adcs	r3, r1
 80070c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070c4:	f04f 0200 	mov.w	r2, #0
 80070c8:	f04f 0300 	mov.w	r3, #0
 80070cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80070d0:	4659      	mov	r1, fp
 80070d2:	00cb      	lsls	r3, r1, #3
 80070d4:	4651      	mov	r1, sl
 80070d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070da:	4651      	mov	r1, sl
 80070dc:	00ca      	lsls	r2, r1, #3
 80070de:	4610      	mov	r0, r2
 80070e0:	4619      	mov	r1, r3
 80070e2:	4603      	mov	r3, r0
 80070e4:	4642      	mov	r2, r8
 80070e6:	189b      	adds	r3, r3, r2
 80070e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070ec:	464b      	mov	r3, r9
 80070ee:	460a      	mov	r2, r1
 80070f0:	eb42 0303 	adc.w	r3, r2, r3
 80070f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007104:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007108:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800710c:	460b      	mov	r3, r1
 800710e:	18db      	adds	r3, r3, r3
 8007110:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007112:	4613      	mov	r3, r2
 8007114:	eb42 0303 	adc.w	r3, r2, r3
 8007118:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800711a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800711e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007122:	f7f9 f86f 	bl	8000204 <__aeabi_uldivmod>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	4b0d      	ldr	r3, [pc, #52]	@ (8007160 <UART_SetConfig+0x2d4>)
 800712c:	fba3 1302 	umull	r1, r3, r3, r2
 8007130:	095b      	lsrs	r3, r3, #5
 8007132:	2164      	movs	r1, #100	@ 0x64
 8007134:	fb01 f303 	mul.w	r3, r1, r3
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	3332      	adds	r3, #50	@ 0x32
 800713e:	4a08      	ldr	r2, [pc, #32]	@ (8007160 <UART_SetConfig+0x2d4>)
 8007140:	fba2 2303 	umull	r2, r3, r2, r3
 8007144:	095b      	lsrs	r3, r3, #5
 8007146:	f003 0207 	and.w	r2, r3, #7
 800714a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4422      	add	r2, r4
 8007152:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007154:	e106      	b.n	8007364 <UART_SetConfig+0x4d8>
 8007156:	bf00      	nop
 8007158:	40011000 	.word	0x40011000
 800715c:	40011400 	.word	0x40011400
 8007160:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007168:	2200      	movs	r2, #0
 800716a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800716e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007172:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007176:	4642      	mov	r2, r8
 8007178:	464b      	mov	r3, r9
 800717a:	1891      	adds	r1, r2, r2
 800717c:	6239      	str	r1, [r7, #32]
 800717e:	415b      	adcs	r3, r3
 8007180:	627b      	str	r3, [r7, #36]	@ 0x24
 8007182:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007186:	4641      	mov	r1, r8
 8007188:	1854      	adds	r4, r2, r1
 800718a:	4649      	mov	r1, r9
 800718c:	eb43 0501 	adc.w	r5, r3, r1
 8007190:	f04f 0200 	mov.w	r2, #0
 8007194:	f04f 0300 	mov.w	r3, #0
 8007198:	00eb      	lsls	r3, r5, #3
 800719a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800719e:	00e2      	lsls	r2, r4, #3
 80071a0:	4614      	mov	r4, r2
 80071a2:	461d      	mov	r5, r3
 80071a4:	4643      	mov	r3, r8
 80071a6:	18e3      	adds	r3, r4, r3
 80071a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071ac:	464b      	mov	r3, r9
 80071ae:	eb45 0303 	adc.w	r3, r5, r3
 80071b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	f04f 0300 	mov.w	r3, #0
 80071ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80071d2:	4629      	mov	r1, r5
 80071d4:	008b      	lsls	r3, r1, #2
 80071d6:	4621      	mov	r1, r4
 80071d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071dc:	4621      	mov	r1, r4
 80071de:	008a      	lsls	r2, r1, #2
 80071e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80071e4:	f7f9 f80e 	bl	8000204 <__aeabi_uldivmod>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	4b60      	ldr	r3, [pc, #384]	@ (8007370 <UART_SetConfig+0x4e4>)
 80071ee:	fba3 2302 	umull	r2, r3, r3, r2
 80071f2:	095b      	lsrs	r3, r3, #5
 80071f4:	011c      	lsls	r4, r3, #4
 80071f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007200:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007204:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007208:	4642      	mov	r2, r8
 800720a:	464b      	mov	r3, r9
 800720c:	1891      	adds	r1, r2, r2
 800720e:	61b9      	str	r1, [r7, #24]
 8007210:	415b      	adcs	r3, r3
 8007212:	61fb      	str	r3, [r7, #28]
 8007214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007218:	4641      	mov	r1, r8
 800721a:	1851      	adds	r1, r2, r1
 800721c:	6139      	str	r1, [r7, #16]
 800721e:	4649      	mov	r1, r9
 8007220:	414b      	adcs	r3, r1
 8007222:	617b      	str	r3, [r7, #20]
 8007224:	f04f 0200 	mov.w	r2, #0
 8007228:	f04f 0300 	mov.w	r3, #0
 800722c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007230:	4659      	mov	r1, fp
 8007232:	00cb      	lsls	r3, r1, #3
 8007234:	4651      	mov	r1, sl
 8007236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800723a:	4651      	mov	r1, sl
 800723c:	00ca      	lsls	r2, r1, #3
 800723e:	4610      	mov	r0, r2
 8007240:	4619      	mov	r1, r3
 8007242:	4603      	mov	r3, r0
 8007244:	4642      	mov	r2, r8
 8007246:	189b      	adds	r3, r3, r2
 8007248:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800724c:	464b      	mov	r3, r9
 800724e:	460a      	mov	r2, r1
 8007250:	eb42 0303 	adc.w	r3, r2, r3
 8007254:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007262:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007264:	f04f 0200 	mov.w	r2, #0
 8007268:	f04f 0300 	mov.w	r3, #0
 800726c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007270:	4649      	mov	r1, r9
 8007272:	008b      	lsls	r3, r1, #2
 8007274:	4641      	mov	r1, r8
 8007276:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800727a:	4641      	mov	r1, r8
 800727c:	008a      	lsls	r2, r1, #2
 800727e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007282:	f7f8 ffbf 	bl	8000204 <__aeabi_uldivmod>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	4611      	mov	r1, r2
 800728c:	4b38      	ldr	r3, [pc, #224]	@ (8007370 <UART_SetConfig+0x4e4>)
 800728e:	fba3 2301 	umull	r2, r3, r3, r1
 8007292:	095b      	lsrs	r3, r3, #5
 8007294:	2264      	movs	r2, #100	@ 0x64
 8007296:	fb02 f303 	mul.w	r3, r2, r3
 800729a:	1acb      	subs	r3, r1, r3
 800729c:	011b      	lsls	r3, r3, #4
 800729e:	3332      	adds	r3, #50	@ 0x32
 80072a0:	4a33      	ldr	r2, [pc, #204]	@ (8007370 <UART_SetConfig+0x4e4>)
 80072a2:	fba2 2303 	umull	r2, r3, r2, r3
 80072a6:	095b      	lsrs	r3, r3, #5
 80072a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072ac:	441c      	add	r4, r3
 80072ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072b2:	2200      	movs	r2, #0
 80072b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80072b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80072b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80072bc:	4642      	mov	r2, r8
 80072be:	464b      	mov	r3, r9
 80072c0:	1891      	adds	r1, r2, r2
 80072c2:	60b9      	str	r1, [r7, #8]
 80072c4:	415b      	adcs	r3, r3
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072cc:	4641      	mov	r1, r8
 80072ce:	1851      	adds	r1, r2, r1
 80072d0:	6039      	str	r1, [r7, #0]
 80072d2:	4649      	mov	r1, r9
 80072d4:	414b      	adcs	r3, r1
 80072d6:	607b      	str	r3, [r7, #4]
 80072d8:	f04f 0200 	mov.w	r2, #0
 80072dc:	f04f 0300 	mov.w	r3, #0
 80072e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072e4:	4659      	mov	r1, fp
 80072e6:	00cb      	lsls	r3, r1, #3
 80072e8:	4651      	mov	r1, sl
 80072ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072ee:	4651      	mov	r1, sl
 80072f0:	00ca      	lsls	r2, r1, #3
 80072f2:	4610      	mov	r0, r2
 80072f4:	4619      	mov	r1, r3
 80072f6:	4603      	mov	r3, r0
 80072f8:	4642      	mov	r2, r8
 80072fa:	189b      	adds	r3, r3, r2
 80072fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072fe:	464b      	mov	r3, r9
 8007300:	460a      	mov	r2, r1
 8007302:	eb42 0303 	adc.w	r3, r2, r3
 8007306:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	663b      	str	r3, [r7, #96]	@ 0x60
 8007312:	667a      	str	r2, [r7, #100]	@ 0x64
 8007314:	f04f 0200 	mov.w	r2, #0
 8007318:	f04f 0300 	mov.w	r3, #0
 800731c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007320:	4649      	mov	r1, r9
 8007322:	008b      	lsls	r3, r1, #2
 8007324:	4641      	mov	r1, r8
 8007326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800732a:	4641      	mov	r1, r8
 800732c:	008a      	lsls	r2, r1, #2
 800732e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007332:	f7f8 ff67 	bl	8000204 <__aeabi_uldivmod>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4b0d      	ldr	r3, [pc, #52]	@ (8007370 <UART_SetConfig+0x4e4>)
 800733c:	fba3 1302 	umull	r1, r3, r3, r2
 8007340:	095b      	lsrs	r3, r3, #5
 8007342:	2164      	movs	r1, #100	@ 0x64
 8007344:	fb01 f303 	mul.w	r3, r1, r3
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	011b      	lsls	r3, r3, #4
 800734c:	3332      	adds	r3, #50	@ 0x32
 800734e:	4a08      	ldr	r2, [pc, #32]	@ (8007370 <UART_SetConfig+0x4e4>)
 8007350:	fba2 2303 	umull	r2, r3, r2, r3
 8007354:	095b      	lsrs	r3, r3, #5
 8007356:	f003 020f 	and.w	r2, r3, #15
 800735a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4422      	add	r2, r4
 8007362:	609a      	str	r2, [r3, #8]
}
 8007364:	bf00      	nop
 8007366:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800736a:	46bd      	mov	sp, r7
 800736c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007370:	51eb851f 	.word	0x51eb851f

08007374 <memset>:
 8007374:	4402      	add	r2, r0
 8007376:	4603      	mov	r3, r0
 8007378:	4293      	cmp	r3, r2
 800737a:	d100      	bne.n	800737e <memset+0xa>
 800737c:	4770      	bx	lr
 800737e:	f803 1b01 	strb.w	r1, [r3], #1
 8007382:	e7f9      	b.n	8007378 <memset+0x4>

08007384 <__libc_init_array>:
 8007384:	b570      	push	{r4, r5, r6, lr}
 8007386:	4d0d      	ldr	r5, [pc, #52]	@ (80073bc <__libc_init_array+0x38>)
 8007388:	4c0d      	ldr	r4, [pc, #52]	@ (80073c0 <__libc_init_array+0x3c>)
 800738a:	1b64      	subs	r4, r4, r5
 800738c:	10a4      	asrs	r4, r4, #2
 800738e:	2600      	movs	r6, #0
 8007390:	42a6      	cmp	r6, r4
 8007392:	d109      	bne.n	80073a8 <__libc_init_array+0x24>
 8007394:	4d0b      	ldr	r5, [pc, #44]	@ (80073c4 <__libc_init_array+0x40>)
 8007396:	4c0c      	ldr	r4, [pc, #48]	@ (80073c8 <__libc_init_array+0x44>)
 8007398:	f000 f818 	bl	80073cc <_init>
 800739c:	1b64      	subs	r4, r4, r5
 800739e:	10a4      	asrs	r4, r4, #2
 80073a0:	2600      	movs	r6, #0
 80073a2:	42a6      	cmp	r6, r4
 80073a4:	d105      	bne.n	80073b2 <__libc_init_array+0x2e>
 80073a6:	bd70      	pop	{r4, r5, r6, pc}
 80073a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ac:	4798      	blx	r3
 80073ae:	3601      	adds	r6, #1
 80073b0:	e7ee      	b.n	8007390 <__libc_init_array+0xc>
 80073b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b6:	4798      	blx	r3
 80073b8:	3601      	adds	r6, #1
 80073ba:	e7f2      	b.n	80073a2 <__libc_init_array+0x1e>
 80073bc:	08042094 	.word	0x08042094
 80073c0:	08042094 	.word	0x08042094
 80073c4:	08042094 	.word	0x08042094
 80073c8:	08042098 	.word	0x08042098

080073cc <_init>:
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	bf00      	nop
 80073d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d2:	bc08      	pop	{r3}
 80073d4:	469e      	mov	lr, r3
 80073d6:	4770      	bx	lr

080073d8 <_fini>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	bf00      	nop
 80073dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073de:	bc08      	pop	{r3}
 80073e0:	469e      	mov	lr, r3
 80073e2:	4770      	bx	lr
