
MAESTRO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000774c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007910  08007910  00008910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007950  08007950  00009020  2**0
                  CONTENTS
  4 .ARM          00000008  08007950  08007950  00008950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007958  08007958  00009020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007958  08007958  00008958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800795c  0800795c  0000895c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08007960  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  20000020  08007980  00009020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  08007980  00009690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ff5  00000000  00000000  00009050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002253  00000000  00000000  0001a045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  0001c298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce4  00000000  00000000  0001d2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225ba  00000000  00000000  0001dfbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013cb4  00000000  00000000  00040576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3779  00000000  00000000  0005422a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001279a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a8  00000000  00000000  001279e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0012bf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000020 	.word	0x20000020
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080078f8 	.word	0x080078f8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000024 	.word	0x20000024
 8000200:	080078f8 	.word	0x080078f8

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_GPIO_EXTI_Callback>:
	rgb_color black_color = {0, 0, 0};
	uint16_t led_pos_counter = 0;

	  uint8_t data = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b08e      	sub	sp, #56	@ 0x38
 8000508:	af02      	add	r7, sp, #8
 800050a:	4603      	mov	r3, r0
 800050c:	80fb      	strh	r3, [r7, #6]
    uint32_t current_time = HAL_GetTick(); // Obtener el tiempo actual en ms
 800050e:	f001 fbd1 	bl	8001cb4 <HAL_GetTick>
 8000512:	62f8      	str	r0, [r7, #44]	@ 0x2c
    activador = 1;
 8000514:	4b83      	ldr	r3, [pc, #524]	@ (8000724 <HAL_GPIO_EXTI_Callback+0x220>)
 8000516:	2201      	movs	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]

    if (GPIO_Pin == sensor1_Pin) {
 800051a:	88fb      	ldrh	r3, [r7, #6]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d168      	bne.n	80005f2 <HAL_GPIO_EXTI_Callback+0xee>
        if ((current_time - last_interrupt_time) > debounce_delay) {
 8000520:	4b81      	ldr	r3, [pc, #516]	@ (8000728 <HAL_GPIO_EXTI_Callback+0x224>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000526:	1ad2      	subs	r2, r2, r3
 8000528:	4b80      	ldr	r3, [pc, #512]	@ (800072c <HAL_GPIO_EXTI_Callback+0x228>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	429a      	cmp	r2, r3
 800052e:	f240 83a1 	bls.w	8000c74 <HAL_GPIO_EXTI_Callback+0x770>
            if (activa1 == 0) {
 8000532:	4b7f      	ldr	r3, [pc, #508]	@ (8000730 <HAL_GPIO_EXTI_Callback+0x22c>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d119      	bne.n	800056e <HAL_GPIO_EXTI_Callback+0x6a>
                espacios_disponibles--;
 800053a:	4b7e      	ldr	r3, [pc, #504]	@ (8000734 <HAL_GPIO_EXTI_Callback+0x230>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	3b01      	subs	r3, #1
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b7c      	ldr	r3, [pc, #496]	@ (8000734 <HAL_GPIO_EXTI_Callback+0x230>)
 8000544:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 0, &black_color);
 8000546:	4a7c      	ldr	r2, [pc, #496]	@ (8000738 <HAL_GPIO_EXTI_Callback+0x234>)
 8000548:	2100      	movs	r1, #0
 800054a:	487c      	ldr	r0, [pc, #496]	@ (800073c <HAL_GPIO_EXTI_Callback+0x238>)
 800054c:	f001 f85e 	bl	800160c <set_specific_led>
                set_specific_led(leds, 0, &red_color);
 8000550:	4a7b      	ldr	r2, [pc, #492]	@ (8000740 <HAL_GPIO_EXTI_Callback+0x23c>)
 8000552:	2100      	movs	r1, #0
 8000554:	4879      	ldr	r0, [pc, #484]	@ (800073c <HAL_GPIO_EXTI_Callback+0x238>)
 8000556:	f001 f859 	bl	800160c <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 800055a:	23d8      	movs	r3, #216	@ 0xd8
 800055c:	4a77      	ldr	r2, [pc, #476]	@ (800073c <HAL_GPIO_EXTI_Callback+0x238>)
 800055e:	2100      	movs	r1, #0
 8000560:	4878      	ldr	r0, [pc, #480]	@ (8000744 <HAL_GPIO_EXTI_Callback+0x240>)
 8000562:	f005 f9f7 	bl	8005954 <HAL_TIM_PWM_Start_DMA>

                activa1 = 1;
 8000566:	4b72      	ldr	r3, [pc, #456]	@ (8000730 <HAL_GPIO_EXTI_Callback+0x22c>)
 8000568:	2201      	movs	r2, #1
 800056a:	701a      	strb	r2, [r3, #0]
 800056c:	e01c      	b.n	80005a8 <HAL_GPIO_EXTI_Callback+0xa4>
            } else if (activa1 == 1) {
 800056e:	4b70      	ldr	r3, [pc, #448]	@ (8000730 <HAL_GPIO_EXTI_Callback+0x22c>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d118      	bne.n	80005a8 <HAL_GPIO_EXTI_Callback+0xa4>
                espacios_disponibles++;
 8000576:	4b6f      	ldr	r3, [pc, #444]	@ (8000734 <HAL_GPIO_EXTI_Callback+0x230>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	3301      	adds	r3, #1
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4b6d      	ldr	r3, [pc, #436]	@ (8000734 <HAL_GPIO_EXTI_Callback+0x230>)
 8000580:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 0, &black_color);
 8000582:	4a6d      	ldr	r2, [pc, #436]	@ (8000738 <HAL_GPIO_EXTI_Callback+0x234>)
 8000584:	2100      	movs	r1, #0
 8000586:	486d      	ldr	r0, [pc, #436]	@ (800073c <HAL_GPIO_EXTI_Callback+0x238>)
 8000588:	f001 f840 	bl	800160c <set_specific_led>
               set_specific_led(leds, 0, &green_color);
 800058c:	4a6e      	ldr	r2, [pc, #440]	@ (8000748 <HAL_GPIO_EXTI_Callback+0x244>)
 800058e:	2100      	movs	r1, #0
 8000590:	486a      	ldr	r0, [pc, #424]	@ (800073c <HAL_GPIO_EXTI_Callback+0x238>)
 8000592:	f001 f83b 	bl	800160c <set_specific_led>
               HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000596:	23d8      	movs	r3, #216	@ 0xd8
 8000598:	4a68      	ldr	r2, [pc, #416]	@ (800073c <HAL_GPIO_EXTI_Callback+0x238>)
 800059a:	2100      	movs	r1, #0
 800059c:	4869      	ldr	r0, [pc, #420]	@ (8000744 <HAL_GPIO_EXTI_Callback+0x240>)
 800059e:	f005 f9d9 	bl	8005954 <HAL_TIM_PWM_Start_DMA>
                activa1 = 0;
 80005a2:	4b63      	ldr	r3, [pc, #396]	@ (8000730 <HAL_GPIO_EXTI_Callback+0x22c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
            }
            last_interrupt_time = current_time;
 80005a8:	4a5f      	ldr	r2, [pc, #380]	@ (8000728 <HAL_GPIO_EXTI_Callback+0x224>)
 80005aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005ac:	6013      	str	r3, [r2, #0]

             data = 0x08; // Declarar una variable de tipo uint8_t con el dato a enviar
 80005ae:	4b67      	ldr	r3, [pc, #412]	@ (800074c <HAL_GPIO_EXTI_Callback+0x248>)
 80005b0:	2208      	movs	r2, #8
 80005b2:	701a      	strb	r2, [r3, #0]
             char* mensaje = "8"; // Definir mensaje
 80005b4:	4b66      	ldr	r3, [pc, #408]	@ (8000750 <HAL_GPIO_EXTI_Callback+0x24c>)
 80005b6:	60fb      	str	r3, [r7, #12]

           					 // Enviar datos al ESP32
	  if (HAL_I2C_Master_Transmit(&hi2c1, ESP32_ADDRESS << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 80005b8:	4b66      	ldr	r3, [pc, #408]	@ (8000754 <HAL_GPIO_EXTI_Callback+0x250>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	b29b      	uxth	r3, r3
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	b299      	uxth	r1, r3
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2301      	movs	r3, #1
 80005ca:	4a60      	ldr	r2, [pc, #384]	@ (800074c <HAL_GPIO_EXTI_Callback+0x248>)
 80005cc:	4862      	ldr	r0, [pc, #392]	@ (8000758 <HAL_GPIO_EXTI_Callback+0x254>)
 80005ce:	f002 fbe3 	bl	8002d98 <HAL_I2C_Master_Transmit>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <HAL_GPIO_EXTI_Callback+0xd8>
			  // Manejar el error
			  Error_Handler();
 80005d8:	f000 ffcc 	bl	8001574 <Error_Handler>
		  }
		//   Enviar datos al STM32 esclavo
	  HAL_UART_Transmit(&huart4, (uint8_t*)mensaje, strlen(mensaje), 10); // Enviar mensaje por UART4
 80005dc:	68f8      	ldr	r0, [r7, #12]
 80005de:	f7ff fe11 	bl	8000204 <strlen>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	230a      	movs	r3, #10
 80005e8:	68f9      	ldr	r1, [r7, #12]
 80005ea:	485c      	ldr	r0, [pc, #368]	@ (800075c <HAL_GPIO_EXTI_Callback+0x258>)
 80005ec:	f006 f9a6 	bl	800693c <HAL_UART_Transmit>
		 	//   Enviar datos al STM32 esclavo
		 HAL_UART_Transmit(&huart4, (uint8_t*)mensaje, strlen(mensaje), 10); // Enviar mensaje por UART4

        }
    }
}
 80005f0:	e340      	b.n	8000c74 <HAL_GPIO_EXTI_Callback+0x770>
    } else if (GPIO_Pin == sensor2_Pin) {
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d168      	bne.n	80006ca <HAL_GPIO_EXTI_Callback+0x1c6>
        if ((current_time - last_interrupt_time) > debounce_delay) {
 80005f8:	4b4b      	ldr	r3, [pc, #300]	@ (8000728 <HAL_GPIO_EXTI_Callback+0x224>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80005fe:	1ad2      	subs	r2, r2, r3
 8000600:	4b4a      	ldr	r3, [pc, #296]	@ (800072c <HAL_GPIO_EXTI_Callback+0x228>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	429a      	cmp	r2, r3
 8000606:	f240 8335 	bls.w	8000c74 <HAL_GPIO_EXTI_Callback+0x770>
            if (activa2 == 0) {
 800060a:	4b55      	ldr	r3, [pc, #340]	@ (8000760 <HAL_GPIO_EXTI_Callback+0x25c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d119      	bne.n	8000646 <HAL_GPIO_EXTI_Callback+0x142>
                espacios_disponibles--;
 8000612:	4b48      	ldr	r3, [pc, #288]	@ (8000734 <HAL_GPIO_EXTI_Callback+0x230>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	3b01      	subs	r3, #1
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b46      	ldr	r3, [pc, #280]	@ (8000734 <HAL_GPIO_EXTI_Callback+0x230>)
 800061c:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 1, &black_color);
 800061e:	4a46      	ldr	r2, [pc, #280]	@ (8000738 <HAL_GPIO_EXTI_Callback+0x234>)
 8000620:	2101      	movs	r1, #1
 8000622:	4846      	ldr	r0, [pc, #280]	@ (800073c <HAL_GPIO_EXTI_Callback+0x238>)
 8000624:	f000 fff2 	bl	800160c <set_specific_led>
                set_specific_led(leds, 1, &red_color);
 8000628:	4a45      	ldr	r2, [pc, #276]	@ (8000740 <HAL_GPIO_EXTI_Callback+0x23c>)
 800062a:	2101      	movs	r1, #1
 800062c:	4843      	ldr	r0, [pc, #268]	@ (800073c <HAL_GPIO_EXTI_Callback+0x238>)
 800062e:	f000 ffed 	bl	800160c <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000632:	23d8      	movs	r3, #216	@ 0xd8
 8000634:	4a41      	ldr	r2, [pc, #260]	@ (800073c <HAL_GPIO_EXTI_Callback+0x238>)
 8000636:	2100      	movs	r1, #0
 8000638:	4842      	ldr	r0, [pc, #264]	@ (8000744 <HAL_GPIO_EXTI_Callback+0x240>)
 800063a:	f005 f98b 	bl	8005954 <HAL_TIM_PWM_Start_DMA>
                activa2 = 1;
 800063e:	4b48      	ldr	r3, [pc, #288]	@ (8000760 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000640:	2201      	movs	r2, #1
 8000642:	701a      	strb	r2, [r3, #0]
 8000644:	e01c      	b.n	8000680 <HAL_GPIO_EXTI_Callback+0x17c>
            } else if (activa2 == 1) {
 8000646:	4b46      	ldr	r3, [pc, #280]	@ (8000760 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d118      	bne.n	8000680 <HAL_GPIO_EXTI_Callback+0x17c>
                espacios_disponibles++;
 800064e:	4b39      	ldr	r3, [pc, #228]	@ (8000734 <HAL_GPIO_EXTI_Callback+0x230>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	3301      	adds	r3, #1
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b37      	ldr	r3, [pc, #220]	@ (8000734 <HAL_GPIO_EXTI_Callback+0x230>)
 8000658:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 1, &black_color);
 800065a:	4a37      	ldr	r2, [pc, #220]	@ (8000738 <HAL_GPIO_EXTI_Callback+0x234>)
 800065c:	2101      	movs	r1, #1
 800065e:	4837      	ldr	r0, [pc, #220]	@ (800073c <HAL_GPIO_EXTI_Callback+0x238>)
 8000660:	f000 ffd4 	bl	800160c <set_specific_led>
                set_specific_led(leds, 1, &green_color);
 8000664:	4a38      	ldr	r2, [pc, #224]	@ (8000748 <HAL_GPIO_EXTI_Callback+0x244>)
 8000666:	2101      	movs	r1, #1
 8000668:	4834      	ldr	r0, [pc, #208]	@ (800073c <HAL_GPIO_EXTI_Callback+0x238>)
 800066a:	f000 ffcf 	bl	800160c <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 800066e:	23d8      	movs	r3, #216	@ 0xd8
 8000670:	4a32      	ldr	r2, [pc, #200]	@ (800073c <HAL_GPIO_EXTI_Callback+0x238>)
 8000672:	2100      	movs	r1, #0
 8000674:	4833      	ldr	r0, [pc, #204]	@ (8000744 <HAL_GPIO_EXTI_Callback+0x240>)
 8000676:	f005 f96d 	bl	8005954 <HAL_TIM_PWM_Start_DMA>
                activa2 = 0;
 800067a:	4b39      	ldr	r3, [pc, #228]	@ (8000760 <HAL_GPIO_EXTI_Callback+0x25c>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
            last_interrupt_time = current_time;
 8000680:	4a29      	ldr	r2, [pc, #164]	@ (8000728 <HAL_GPIO_EXTI_Callback+0x224>)
 8000682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000684:	6013      	str	r3, [r2, #0]
          data = 0x07; // Declarar una variable de tipo uint8_t con el dato a enviar
 8000686:	4b31      	ldr	r3, [pc, #196]	@ (800074c <HAL_GPIO_EXTI_Callback+0x248>)
 8000688:	2207      	movs	r2, #7
 800068a:	701a      	strb	r2, [r3, #0]
          char* mensaje = "7";
 800068c:	4b35      	ldr	r3, [pc, #212]	@ (8000764 <HAL_GPIO_EXTI_Callback+0x260>)
 800068e:	613b      	str	r3, [r7, #16]
          if (HAL_I2C_Master_Transmit(&hi2c1, ESP32_ADDRESS << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000690:	4b30      	ldr	r3, [pc, #192]	@ (8000754 <HAL_GPIO_EXTI_Callback+0x250>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	b29b      	uxth	r3, r3
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	b299      	uxth	r1, r3
 800069a:	f04f 33ff 	mov.w	r3, #4294967295
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2301      	movs	r3, #1
 80006a2:	4a2a      	ldr	r2, [pc, #168]	@ (800074c <HAL_GPIO_EXTI_Callback+0x248>)
 80006a4:	482c      	ldr	r0, [pc, #176]	@ (8000758 <HAL_GPIO_EXTI_Callback+0x254>)
 80006a6:	f002 fb77 	bl	8002d98 <HAL_I2C_Master_Transmit>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <HAL_GPIO_EXTI_Callback+0x1b0>
          			  Error_Handler();
 80006b0:	f000 ff60 	bl	8001574 <Error_Handler>
          HAL_UART_Transmit(&huart4, (uint8_t*)mensaje, strlen(mensaje), 10); // Enviar mensaje por UART4
 80006b4:	6938      	ldr	r0, [r7, #16]
 80006b6:	f7ff fda5 	bl	8000204 <strlen>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b29a      	uxth	r2, r3
 80006be:	230a      	movs	r3, #10
 80006c0:	6939      	ldr	r1, [r7, #16]
 80006c2:	4826      	ldr	r0, [pc, #152]	@ (800075c <HAL_GPIO_EXTI_Callback+0x258>)
 80006c4:	f006 f93a 	bl	800693c <HAL_UART_Transmit>
}
 80006c8:	e2d4      	b.n	8000c74 <HAL_GPIO_EXTI_Callback+0x770>
    } else if (GPIO_Pin == sensor3_Pin) {
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006d0:	f040 808e 	bne.w	80007f0 <HAL_GPIO_EXTI_Callback+0x2ec>
        if ((current_time - last_interrupt_time) > debounce_delay) {
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <HAL_GPIO_EXTI_Callback+0x224>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80006da:	1ad2      	subs	r2, r2, r3
 80006dc:	4b13      	ldr	r3, [pc, #76]	@ (800072c <HAL_GPIO_EXTI_Callback+0x228>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	f240 82c7 	bls.w	8000c74 <HAL_GPIO_EXTI_Callback+0x770>
            if (activa3 == 0) {
 80006e6:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <HAL_GPIO_EXTI_Callback+0x264>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d13e      	bne.n	800076c <HAL_GPIO_EXTI_Callback+0x268>
                espacios_disponibles--;
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <HAL_GPIO_EXTI_Callback+0x230>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <HAL_GPIO_EXTI_Callback+0x230>)
 80006f8:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 6, &black_color);
 80006fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000738 <HAL_GPIO_EXTI_Callback+0x234>)
 80006fc:	2106      	movs	r1, #6
 80006fe:	480f      	ldr	r0, [pc, #60]	@ (800073c <HAL_GPIO_EXTI_Callback+0x238>)
 8000700:	f000 ff84 	bl	800160c <set_specific_led>
                set_specific_led(leds, 6, &red_color);
 8000704:	4a0e      	ldr	r2, [pc, #56]	@ (8000740 <HAL_GPIO_EXTI_Callback+0x23c>)
 8000706:	2106      	movs	r1, #6
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <HAL_GPIO_EXTI_Callback+0x238>)
 800070a:	f000 ff7f 	bl	800160c <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 800070e:	23d8      	movs	r3, #216	@ 0xd8
 8000710:	4a0a      	ldr	r2, [pc, #40]	@ (800073c <HAL_GPIO_EXTI_Callback+0x238>)
 8000712:	2100      	movs	r1, #0
 8000714:	480b      	ldr	r0, [pc, #44]	@ (8000744 <HAL_GPIO_EXTI_Callback+0x240>)
 8000716:	f005 f91d 	bl	8005954 <HAL_TIM_PWM_Start_DMA>
                activa3 = 1;
 800071a:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <HAL_GPIO_EXTI_Callback+0x264>)
 800071c:	2201      	movs	r2, #1
 800071e:	701a      	strb	r2, [r3, #0]
 8000720:	e041      	b.n	80007a6 <HAL_GPIO_EXTI_Callback+0x2a2>
 8000722:	bf00      	nop
 8000724:	20000044 	.word	0x20000044
 8000728:	20000048 	.word	0x20000048
 800072c:	20000008 	.word	0x20000008
 8000730:	2000003c 	.word	0x2000003c
 8000734:	20000000 	.word	0x20000000
 8000738:	20000688 	.word	0x20000688
 800073c:	20000190 	.word	0x20000190
 8000740:	2000000c 	.word	0x2000000c
 8000744:	200000a0 	.word	0x200000a0
 8000748:	20000010 	.word	0x20000010
 800074c:	2000068b 	.word	0x2000068b
 8000750:	08007910 	.word	0x08007910
 8000754:	20000004 	.word	0x20000004
 8000758:	2000004c 	.word	0x2000004c
 800075c:	20000148 	.word	0x20000148
 8000760:	2000003d 	.word	0x2000003d
 8000764:	08007914 	.word	0x08007914
 8000768:	2000003e 	.word	0x2000003e
            } else if (activa3 == 1) {
 800076c:	4ba2      	ldr	r3, [pc, #648]	@ (80009f8 <HAL_GPIO_EXTI_Callback+0x4f4>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d118      	bne.n	80007a6 <HAL_GPIO_EXTI_Callback+0x2a2>
                espacios_disponibles++;
 8000774:	4ba1      	ldr	r3, [pc, #644]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x4f8>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	3301      	adds	r3, #1
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b9f      	ldr	r3, [pc, #636]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x4f8>)
 800077e:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 6, &black_color);
 8000780:	4a9f      	ldr	r2, [pc, #636]	@ (8000a00 <HAL_GPIO_EXTI_Callback+0x4fc>)
 8000782:	2106      	movs	r1, #6
 8000784:	489f      	ldr	r0, [pc, #636]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x500>)
 8000786:	f000 ff41 	bl	800160c <set_specific_led>
                set_specific_led(leds, 6, &green_color);
 800078a:	4a9f      	ldr	r2, [pc, #636]	@ (8000a08 <HAL_GPIO_EXTI_Callback+0x504>)
 800078c:	2106      	movs	r1, #6
 800078e:	489d      	ldr	r0, [pc, #628]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x500>)
 8000790:	f000 ff3c 	bl	800160c <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000794:	23d8      	movs	r3, #216	@ 0xd8
 8000796:	4a9b      	ldr	r2, [pc, #620]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x500>)
 8000798:	2100      	movs	r1, #0
 800079a:	489c      	ldr	r0, [pc, #624]	@ (8000a0c <HAL_GPIO_EXTI_Callback+0x508>)
 800079c:	f005 f8da 	bl	8005954 <HAL_TIM_PWM_Start_DMA>
                activa3 = 0;
 80007a0:	4b95      	ldr	r3, [pc, #596]	@ (80009f8 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
            last_interrupt_time = current_time;
 80007a6:	4a9a      	ldr	r2, [pc, #616]	@ (8000a10 <HAL_GPIO_EXTI_Callback+0x50c>)
 80007a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007aa:	6013      	str	r3, [r2, #0]
            data = 0x02; // Declarar una variable de tipo uint8_t con el dato a enviar
 80007ac:	4b99      	ldr	r3, [pc, #612]	@ (8000a14 <HAL_GPIO_EXTI_Callback+0x510>)
 80007ae:	2202      	movs	r2, #2
 80007b0:	701a      	strb	r2, [r3, #0]
            char* mensaje = "2";
 80007b2:	4b99      	ldr	r3, [pc, #612]	@ (8000a18 <HAL_GPIO_EXTI_Callback+0x514>)
 80007b4:	617b      	str	r3, [r7, #20]
		  if (HAL_I2C_Master_Transmit(&hi2c1, ESP32_ADDRESS << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 80007b6:	4b99      	ldr	r3, [pc, #612]	@ (8000a1c <HAL_GPIO_EXTI_Callback+0x518>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	b299      	uxth	r1, r3
 80007c0:	f04f 33ff 	mov.w	r3, #4294967295
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2301      	movs	r3, #1
 80007c8:	4a92      	ldr	r2, [pc, #584]	@ (8000a14 <HAL_GPIO_EXTI_Callback+0x510>)
 80007ca:	4895      	ldr	r0, [pc, #596]	@ (8000a20 <HAL_GPIO_EXTI_Callback+0x51c>)
 80007cc:	f002 fae4 	bl	8002d98 <HAL_I2C_Master_Transmit>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_GPIO_EXTI_Callback+0x2d6>
			  Error_Handler();
 80007d6:	f000 fecd 	bl	8001574 <Error_Handler>
		  HAL_UART_Transmit(&huart4, (uint8_t*)mensaje, strlen(mensaje), 10); // Enviar mensaje por UART4
 80007da:	6978      	ldr	r0, [r7, #20]
 80007dc:	f7ff fd12 	bl	8000204 <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	230a      	movs	r3, #10
 80007e6:	6979      	ldr	r1, [r7, #20]
 80007e8:	488e      	ldr	r0, [pc, #568]	@ (8000a24 <HAL_GPIO_EXTI_Callback+0x520>)
 80007ea:	f006 f8a7 	bl	800693c <HAL_UART_Transmit>
}
 80007ee:	e241      	b.n	8000c74 <HAL_GPIO_EXTI_Callback+0x770>
    } else if (GPIO_Pin == sensor4_Pin) {
 80007f0:	88fb      	ldrh	r3, [r7, #6]
 80007f2:	2b10      	cmp	r3, #16
 80007f4:	d168      	bne.n	80008c8 <HAL_GPIO_EXTI_Callback+0x3c4>
        if ((current_time - last_interrupt_time) > debounce_delay) {
 80007f6:	4b86      	ldr	r3, [pc, #536]	@ (8000a10 <HAL_GPIO_EXTI_Callback+0x50c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007fc:	1ad2      	subs	r2, r2, r3
 80007fe:	4b8a      	ldr	r3, [pc, #552]	@ (8000a28 <HAL_GPIO_EXTI_Callback+0x524>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	429a      	cmp	r2, r3
 8000804:	f240 8236 	bls.w	8000c74 <HAL_GPIO_EXTI_Callback+0x770>
            if (activa4 == 0) {
 8000808:	4b88      	ldr	r3, [pc, #544]	@ (8000a2c <HAL_GPIO_EXTI_Callback+0x528>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d119      	bne.n	8000844 <HAL_GPIO_EXTI_Callback+0x340>
                espacios_disponibles--;
 8000810:	4b7a      	ldr	r3, [pc, #488]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x4f8>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	3b01      	subs	r3, #1
 8000816:	b2da      	uxtb	r2, r3
 8000818:	4b78      	ldr	r3, [pc, #480]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x4f8>)
 800081a:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 3, &black_color);
 800081c:	4a78      	ldr	r2, [pc, #480]	@ (8000a00 <HAL_GPIO_EXTI_Callback+0x4fc>)
 800081e:	2103      	movs	r1, #3
 8000820:	4878      	ldr	r0, [pc, #480]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x500>)
 8000822:	f000 fef3 	bl	800160c <set_specific_led>
                set_specific_led(leds, 3, &red_color);
 8000826:	4a82      	ldr	r2, [pc, #520]	@ (8000a30 <HAL_GPIO_EXTI_Callback+0x52c>)
 8000828:	2103      	movs	r1, #3
 800082a:	4876      	ldr	r0, [pc, #472]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x500>)
 800082c:	f000 feee 	bl	800160c <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000830:	23d8      	movs	r3, #216	@ 0xd8
 8000832:	4a74      	ldr	r2, [pc, #464]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x500>)
 8000834:	2100      	movs	r1, #0
 8000836:	4875      	ldr	r0, [pc, #468]	@ (8000a0c <HAL_GPIO_EXTI_Callback+0x508>)
 8000838:	f005 f88c 	bl	8005954 <HAL_TIM_PWM_Start_DMA>
                activa4 = 1;
 800083c:	4b7b      	ldr	r3, [pc, #492]	@ (8000a2c <HAL_GPIO_EXTI_Callback+0x528>)
 800083e:	2201      	movs	r2, #1
 8000840:	701a      	strb	r2, [r3, #0]
 8000842:	e01c      	b.n	800087e <HAL_GPIO_EXTI_Callback+0x37a>
            } else if (activa4 == 1) {
 8000844:	4b79      	ldr	r3, [pc, #484]	@ (8000a2c <HAL_GPIO_EXTI_Callback+0x528>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d118      	bne.n	800087e <HAL_GPIO_EXTI_Callback+0x37a>
                espacios_disponibles++;
 800084c:	4b6b      	ldr	r3, [pc, #428]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x4f8>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	b2da      	uxtb	r2, r3
 8000854:	4b69      	ldr	r3, [pc, #420]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x4f8>)
 8000856:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 3, &black_color);
 8000858:	4a69      	ldr	r2, [pc, #420]	@ (8000a00 <HAL_GPIO_EXTI_Callback+0x4fc>)
 800085a:	2103      	movs	r1, #3
 800085c:	4869      	ldr	r0, [pc, #420]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x500>)
 800085e:	f000 fed5 	bl	800160c <set_specific_led>
                set_specific_led(leds, 3, &green_color);
 8000862:	4a69      	ldr	r2, [pc, #420]	@ (8000a08 <HAL_GPIO_EXTI_Callback+0x504>)
 8000864:	2103      	movs	r1, #3
 8000866:	4867      	ldr	r0, [pc, #412]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x500>)
 8000868:	f000 fed0 	bl	800160c <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 800086c:	23d8      	movs	r3, #216	@ 0xd8
 800086e:	4a65      	ldr	r2, [pc, #404]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x500>)
 8000870:	2100      	movs	r1, #0
 8000872:	4866      	ldr	r0, [pc, #408]	@ (8000a0c <HAL_GPIO_EXTI_Callback+0x508>)
 8000874:	f005 f86e 	bl	8005954 <HAL_TIM_PWM_Start_DMA>
                activa4 = 0;
 8000878:	4b6c      	ldr	r3, [pc, #432]	@ (8000a2c <HAL_GPIO_EXTI_Callback+0x528>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
            last_interrupt_time = current_time;
 800087e:	4a64      	ldr	r2, [pc, #400]	@ (8000a10 <HAL_GPIO_EXTI_Callback+0x50c>)
 8000880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000882:	6013      	str	r3, [r2, #0]
            data = 0x05; // Declarar una variable de tipo uint8_t con el dato a enviar
 8000884:	4b63      	ldr	r3, [pc, #396]	@ (8000a14 <HAL_GPIO_EXTI_Callback+0x510>)
 8000886:	2205      	movs	r2, #5
 8000888:	701a      	strb	r2, [r3, #0]
            char* mensaje = "5";
 800088a:	4b6a      	ldr	r3, [pc, #424]	@ (8000a34 <HAL_GPIO_EXTI_Callback+0x530>)
 800088c:	61bb      	str	r3, [r7, #24]
		  if (HAL_I2C_Master_Transmit(&hi2c1, ESP32_ADDRESS << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 800088e:	4b63      	ldr	r3, [pc, #396]	@ (8000a1c <HAL_GPIO_EXTI_Callback+0x518>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	b29b      	uxth	r3, r3
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	b299      	uxth	r1, r3
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2301      	movs	r3, #1
 80008a0:	4a5c      	ldr	r2, [pc, #368]	@ (8000a14 <HAL_GPIO_EXTI_Callback+0x510>)
 80008a2:	485f      	ldr	r0, [pc, #380]	@ (8000a20 <HAL_GPIO_EXTI_Callback+0x51c>)
 80008a4:	f002 fa78 	bl	8002d98 <HAL_I2C_Master_Transmit>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_GPIO_EXTI_Callback+0x3ae>
			  Error_Handler();
 80008ae:	f000 fe61 	bl	8001574 <Error_Handler>
		  HAL_UART_Transmit(&huart4, (uint8_t*)mensaje, strlen(mensaje), 10); // Enviar mensaje por UART4
 80008b2:	69b8      	ldr	r0, [r7, #24]
 80008b4:	f7ff fca6 	bl	8000204 <strlen>
 80008b8:	4603      	mov	r3, r0
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	230a      	movs	r3, #10
 80008be:	69b9      	ldr	r1, [r7, #24]
 80008c0:	4858      	ldr	r0, [pc, #352]	@ (8000a24 <HAL_GPIO_EXTI_Callback+0x520>)
 80008c2:	f006 f83b 	bl	800693c <HAL_UART_Transmit>
}
 80008c6:	e1d5      	b.n	8000c74 <HAL_GPIO_EXTI_Callback+0x770>
    } else if (GPIO_Pin == sensor5_Pin) {
 80008c8:	88fb      	ldrh	r3, [r7, #6]
 80008ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008ce:	d168      	bne.n	80009a2 <HAL_GPIO_EXTI_Callback+0x49e>
        if ((current_time - last_interrupt_time) > debounce_delay) {
 80008d0:	4b4f      	ldr	r3, [pc, #316]	@ (8000a10 <HAL_GPIO_EXTI_Callback+0x50c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80008d6:	1ad2      	subs	r2, r2, r3
 80008d8:	4b53      	ldr	r3, [pc, #332]	@ (8000a28 <HAL_GPIO_EXTI_Callback+0x524>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	429a      	cmp	r2, r3
 80008de:	f240 81c9 	bls.w	8000c74 <HAL_GPIO_EXTI_Callback+0x770>
            if (activa5 == 0) {
 80008e2:	4b55      	ldr	r3, [pc, #340]	@ (8000a38 <HAL_GPIO_EXTI_Callback+0x534>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d119      	bne.n	800091e <HAL_GPIO_EXTI_Callback+0x41a>
                espacios_disponibles--;
 80008ea:	4b44      	ldr	r3, [pc, #272]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x4f8>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b42      	ldr	r3, [pc, #264]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x4f8>)
 80008f4:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 4, &black_color);
 80008f6:	4a42      	ldr	r2, [pc, #264]	@ (8000a00 <HAL_GPIO_EXTI_Callback+0x4fc>)
 80008f8:	2104      	movs	r1, #4
 80008fa:	4842      	ldr	r0, [pc, #264]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x500>)
 80008fc:	f000 fe86 	bl	800160c <set_specific_led>
                set_specific_led(leds, 4, &red_color);
 8000900:	4a4b      	ldr	r2, [pc, #300]	@ (8000a30 <HAL_GPIO_EXTI_Callback+0x52c>)
 8000902:	2104      	movs	r1, #4
 8000904:	483f      	ldr	r0, [pc, #252]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x500>)
 8000906:	f000 fe81 	bl	800160c <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 800090a:	23d8      	movs	r3, #216	@ 0xd8
 800090c:	4a3d      	ldr	r2, [pc, #244]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x500>)
 800090e:	2100      	movs	r1, #0
 8000910:	483e      	ldr	r0, [pc, #248]	@ (8000a0c <HAL_GPIO_EXTI_Callback+0x508>)
 8000912:	f005 f81f 	bl	8005954 <HAL_TIM_PWM_Start_DMA>
                activa5 = 1;
 8000916:	4b48      	ldr	r3, [pc, #288]	@ (8000a38 <HAL_GPIO_EXTI_Callback+0x534>)
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
 800091c:	e01c      	b.n	8000958 <HAL_GPIO_EXTI_Callback+0x454>
            } else if (activa5 == 1) {
 800091e:	4b46      	ldr	r3, [pc, #280]	@ (8000a38 <HAL_GPIO_EXTI_Callback+0x534>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d118      	bne.n	8000958 <HAL_GPIO_EXTI_Callback+0x454>
                espacios_disponibles++;
 8000926:	4b35      	ldr	r3, [pc, #212]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x4f8>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b33      	ldr	r3, [pc, #204]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x4f8>)
 8000930:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 4, &black_color);
 8000932:	4a33      	ldr	r2, [pc, #204]	@ (8000a00 <HAL_GPIO_EXTI_Callback+0x4fc>)
 8000934:	2104      	movs	r1, #4
 8000936:	4833      	ldr	r0, [pc, #204]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x500>)
 8000938:	f000 fe68 	bl	800160c <set_specific_led>
                set_specific_led(leds, 4, &green_color);
 800093c:	4a32      	ldr	r2, [pc, #200]	@ (8000a08 <HAL_GPIO_EXTI_Callback+0x504>)
 800093e:	2104      	movs	r1, #4
 8000940:	4830      	ldr	r0, [pc, #192]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x500>)
 8000942:	f000 fe63 	bl	800160c <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000946:	23d8      	movs	r3, #216	@ 0xd8
 8000948:	4a2e      	ldr	r2, [pc, #184]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x500>)
 800094a:	2100      	movs	r1, #0
 800094c:	482f      	ldr	r0, [pc, #188]	@ (8000a0c <HAL_GPIO_EXTI_Callback+0x508>)
 800094e:	f005 f801 	bl	8005954 <HAL_TIM_PWM_Start_DMA>
                activa5 = 0;
 8000952:	4b39      	ldr	r3, [pc, #228]	@ (8000a38 <HAL_GPIO_EXTI_Callback+0x534>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
            last_interrupt_time = current_time;
 8000958:	4a2d      	ldr	r2, [pc, #180]	@ (8000a10 <HAL_GPIO_EXTI_Callback+0x50c>)
 800095a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800095c:	6013      	str	r3, [r2, #0]
             data = 0x04; // Declarar una variable de tipo uint8_t con el dato a enviar
 800095e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a14 <HAL_GPIO_EXTI_Callback+0x510>)
 8000960:	2204      	movs	r2, #4
 8000962:	701a      	strb	r2, [r3, #0]
             char* mensaje = "4";
 8000964:	4b35      	ldr	r3, [pc, #212]	@ (8000a3c <HAL_GPIO_EXTI_Callback+0x538>)
 8000966:	61fb      	str	r3, [r7, #28]
			  if (HAL_I2C_Master_Transmit(&hi2c1, ESP32_ADDRESS << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000968:	4b2c      	ldr	r3, [pc, #176]	@ (8000a1c <HAL_GPIO_EXTI_Callback+0x518>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	b29b      	uxth	r3, r3
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	b299      	uxth	r1, r3
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	2301      	movs	r3, #1
 800097a:	4a26      	ldr	r2, [pc, #152]	@ (8000a14 <HAL_GPIO_EXTI_Callback+0x510>)
 800097c:	4828      	ldr	r0, [pc, #160]	@ (8000a20 <HAL_GPIO_EXTI_Callback+0x51c>)
 800097e:	f002 fa0b 	bl	8002d98 <HAL_I2C_Master_Transmit>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <HAL_GPIO_EXTI_Callback+0x488>
				  Error_Handler();
 8000988:	f000 fdf4 	bl	8001574 <Error_Handler>
			  HAL_UART_Transmit(&huart4, (uint8_t*)mensaje, strlen(mensaje), 10); // Enviar mensaje por UART4
 800098c:	69f8      	ldr	r0, [r7, #28]
 800098e:	f7ff fc39 	bl	8000204 <strlen>
 8000992:	4603      	mov	r3, r0
 8000994:	b29a      	uxth	r2, r3
 8000996:	230a      	movs	r3, #10
 8000998:	69f9      	ldr	r1, [r7, #28]
 800099a:	4822      	ldr	r0, [pc, #136]	@ (8000a24 <HAL_GPIO_EXTI_Callback+0x520>)
 800099c:	f005 ffce 	bl	800693c <HAL_UART_Transmit>
}
 80009a0:	e168      	b.n	8000c74 <HAL_GPIO_EXTI_Callback+0x770>
    } else if (GPIO_Pin == sensor6_Pin) {
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	2b20      	cmp	r3, #32
 80009a6:	f040 808f 	bne.w	8000ac8 <HAL_GPIO_EXTI_Callback+0x5c4>
        if ((current_time - last_interrupt_time) > debounce_delay) {
 80009aa:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <HAL_GPIO_EXTI_Callback+0x50c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009b0:	1ad2      	subs	r2, r2, r3
 80009b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <HAL_GPIO_EXTI_Callback+0x524>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	f240 815c 	bls.w	8000c74 <HAL_GPIO_EXTI_Callback+0x770>
            if (activa6 == 0) {
 80009bc:	4b20      	ldr	r3, [pc, #128]	@ (8000a40 <HAL_GPIO_EXTI_Callback+0x53c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d13f      	bne.n	8000a44 <HAL_GPIO_EXTI_Callback+0x540>
                espacios_disponibles--;
 80009c4:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x4f8>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	3b01      	subs	r3, #1
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x4f8>)
 80009ce:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 5, &black_color);
 80009d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a00 <HAL_GPIO_EXTI_Callback+0x4fc>)
 80009d2:	2105      	movs	r1, #5
 80009d4:	480b      	ldr	r0, [pc, #44]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x500>)
 80009d6:	f000 fe19 	bl	800160c <set_specific_led>
                set_specific_led(leds, 5, &red_color);
 80009da:	4a15      	ldr	r2, [pc, #84]	@ (8000a30 <HAL_GPIO_EXTI_Callback+0x52c>)
 80009dc:	2105      	movs	r1, #5
 80009de:	4809      	ldr	r0, [pc, #36]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x500>)
 80009e0:	f000 fe14 	bl	800160c <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 80009e4:	23d8      	movs	r3, #216	@ 0xd8
 80009e6:	4a07      	ldr	r2, [pc, #28]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x500>)
 80009e8:	2100      	movs	r1, #0
 80009ea:	4808      	ldr	r0, [pc, #32]	@ (8000a0c <HAL_GPIO_EXTI_Callback+0x508>)
 80009ec:	f004 ffb2 	bl	8005954 <HAL_TIM_PWM_Start_DMA>
                activa6 = 1;
 80009f0:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <HAL_GPIO_EXTI_Callback+0x53c>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]
 80009f6:	e042      	b.n	8000a7e <HAL_GPIO_EXTI_Callback+0x57a>
 80009f8:	2000003e 	.word	0x2000003e
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000688 	.word	0x20000688
 8000a04:	20000190 	.word	0x20000190
 8000a08:	20000010 	.word	0x20000010
 8000a0c:	200000a0 	.word	0x200000a0
 8000a10:	20000048 	.word	0x20000048
 8000a14:	2000068b 	.word	0x2000068b
 8000a18:	08007918 	.word	0x08007918
 8000a1c:	20000004 	.word	0x20000004
 8000a20:	2000004c 	.word	0x2000004c
 8000a24:	20000148 	.word	0x20000148
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	2000003f 	.word	0x2000003f
 8000a30:	2000000c 	.word	0x2000000c
 8000a34:	0800791c 	.word	0x0800791c
 8000a38:	20000040 	.word	0x20000040
 8000a3c:	08007920 	.word	0x08007920
 8000a40:	20000041 	.word	0x20000041
            } else if (activa6 == 1) {
 8000a44:	4b8d      	ldr	r3, [pc, #564]	@ (8000c7c <HAL_GPIO_EXTI_Callback+0x778>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d118      	bne.n	8000a7e <HAL_GPIO_EXTI_Callback+0x57a>
                espacios_disponibles++;
 8000a4c:	4b8c      	ldr	r3, [pc, #560]	@ (8000c80 <HAL_GPIO_EXTI_Callback+0x77c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	3301      	adds	r3, #1
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	4b8a      	ldr	r3, [pc, #552]	@ (8000c80 <HAL_GPIO_EXTI_Callback+0x77c>)
 8000a56:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 5, &black_color);
 8000a58:	4a8a      	ldr	r2, [pc, #552]	@ (8000c84 <HAL_GPIO_EXTI_Callback+0x780>)
 8000a5a:	2105      	movs	r1, #5
 8000a5c:	488a      	ldr	r0, [pc, #552]	@ (8000c88 <HAL_GPIO_EXTI_Callback+0x784>)
 8000a5e:	f000 fdd5 	bl	800160c <set_specific_led>
                set_specific_led(leds, 5, &green_color);
 8000a62:	4a8a      	ldr	r2, [pc, #552]	@ (8000c8c <HAL_GPIO_EXTI_Callback+0x788>)
 8000a64:	2105      	movs	r1, #5
 8000a66:	4888      	ldr	r0, [pc, #544]	@ (8000c88 <HAL_GPIO_EXTI_Callback+0x784>)
 8000a68:	f000 fdd0 	bl	800160c <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000a6c:	23d8      	movs	r3, #216	@ 0xd8
 8000a6e:	4a86      	ldr	r2, [pc, #536]	@ (8000c88 <HAL_GPIO_EXTI_Callback+0x784>)
 8000a70:	2100      	movs	r1, #0
 8000a72:	4887      	ldr	r0, [pc, #540]	@ (8000c90 <HAL_GPIO_EXTI_Callback+0x78c>)
 8000a74:	f004 ff6e 	bl	8005954 <HAL_TIM_PWM_Start_DMA>
                activa6 = 0;
 8000a78:	4b80      	ldr	r3, [pc, #512]	@ (8000c7c <HAL_GPIO_EXTI_Callback+0x778>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
            last_interrupt_time = current_time;
 8000a7e:	4a85      	ldr	r2, [pc, #532]	@ (8000c94 <HAL_GPIO_EXTI_Callback+0x790>)
 8000a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a82:	6013      	str	r3, [r2, #0]
             data = 0x03; // Declarar una variable de tipo uint8_t con el dato a enviar
 8000a84:	4b84      	ldr	r3, [pc, #528]	@ (8000c98 <HAL_GPIO_EXTI_Callback+0x794>)
 8000a86:	2203      	movs	r2, #3
 8000a88:	701a      	strb	r2, [r3, #0]
             char* mensaje = "3";
 8000a8a:	4b84      	ldr	r3, [pc, #528]	@ (8000c9c <HAL_GPIO_EXTI_Callback+0x798>)
 8000a8c:	623b      	str	r3, [r7, #32]
			  if (HAL_I2C_Master_Transmit(&hi2c1, ESP32_ADDRESS << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000a8e:	4b84      	ldr	r3, [pc, #528]	@ (8000ca0 <HAL_GPIO_EXTI_Callback+0x79c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	b299      	uxth	r1, r3
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	4a7d      	ldr	r2, [pc, #500]	@ (8000c98 <HAL_GPIO_EXTI_Callback+0x794>)
 8000aa2:	4880      	ldr	r0, [pc, #512]	@ (8000ca4 <HAL_GPIO_EXTI_Callback+0x7a0>)
 8000aa4:	f002 f978 	bl	8002d98 <HAL_I2C_Master_Transmit>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_GPIO_EXTI_Callback+0x5ae>
				  Error_Handler();
 8000aae:	f000 fd61 	bl	8001574 <Error_Handler>
			  HAL_UART_Transmit(&huart4, (uint8_t*)mensaje, strlen(mensaje), 10); // Enviar mensaje por UART4
 8000ab2:	6a38      	ldr	r0, [r7, #32]
 8000ab4:	f7ff fba6 	bl	8000204 <strlen>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	230a      	movs	r3, #10
 8000abe:	6a39      	ldr	r1, [r7, #32]
 8000ac0:	4879      	ldr	r0, [pc, #484]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x7a4>)
 8000ac2:	f005 ff3b 	bl	800693c <HAL_UART_Transmit>
}
 8000ac6:	e0d5      	b.n	8000c74 <HAL_GPIO_EXTI_Callback+0x770>
    } else if (GPIO_Pin == sensor7_Pin) {
 8000ac8:	88fb      	ldrh	r3, [r7, #6]
 8000aca:	2b08      	cmp	r3, #8
 8000acc:	d168      	bne.n	8000ba0 <HAL_GPIO_EXTI_Callback+0x69c>
        if ((current_time - last_interrupt_time) > debounce_delay) {
 8000ace:	4b71      	ldr	r3, [pc, #452]	@ (8000c94 <HAL_GPIO_EXTI_Callback+0x790>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ad4:	1ad2      	subs	r2, r2, r3
 8000ad6:	4b75      	ldr	r3, [pc, #468]	@ (8000cac <HAL_GPIO_EXTI_Callback+0x7a8>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	f240 80ca 	bls.w	8000c74 <HAL_GPIO_EXTI_Callback+0x770>
            if (activa7 == 0) {
 8000ae0:	4b73      	ldr	r3, [pc, #460]	@ (8000cb0 <HAL_GPIO_EXTI_Callback+0x7ac>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d119      	bne.n	8000b1c <HAL_GPIO_EXTI_Callback+0x618>
                espacios_disponibles--;
 8000ae8:	4b65      	ldr	r3, [pc, #404]	@ (8000c80 <HAL_GPIO_EXTI_Callback+0x77c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b63      	ldr	r3, [pc, #396]	@ (8000c80 <HAL_GPIO_EXTI_Callback+0x77c>)
 8000af2:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 2, &black_color);
 8000af4:	4a63      	ldr	r2, [pc, #396]	@ (8000c84 <HAL_GPIO_EXTI_Callback+0x780>)
 8000af6:	2102      	movs	r1, #2
 8000af8:	4863      	ldr	r0, [pc, #396]	@ (8000c88 <HAL_GPIO_EXTI_Callback+0x784>)
 8000afa:	f000 fd87 	bl	800160c <set_specific_led>
                set_specific_led(leds, 2, &red_color);
 8000afe:	4a6d      	ldr	r2, [pc, #436]	@ (8000cb4 <HAL_GPIO_EXTI_Callback+0x7b0>)
 8000b00:	2102      	movs	r1, #2
 8000b02:	4861      	ldr	r0, [pc, #388]	@ (8000c88 <HAL_GPIO_EXTI_Callback+0x784>)
 8000b04:	f000 fd82 	bl	800160c <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000b08:	23d8      	movs	r3, #216	@ 0xd8
 8000b0a:	4a5f      	ldr	r2, [pc, #380]	@ (8000c88 <HAL_GPIO_EXTI_Callback+0x784>)
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4860      	ldr	r0, [pc, #384]	@ (8000c90 <HAL_GPIO_EXTI_Callback+0x78c>)
 8000b10:	f004 ff20 	bl	8005954 <HAL_TIM_PWM_Start_DMA>
                activa7 = 1;
 8000b14:	4b66      	ldr	r3, [pc, #408]	@ (8000cb0 <HAL_GPIO_EXTI_Callback+0x7ac>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]
 8000b1a:	e01c      	b.n	8000b56 <HAL_GPIO_EXTI_Callback+0x652>
            } else if (activa7 == 1) {
 8000b1c:	4b64      	ldr	r3, [pc, #400]	@ (8000cb0 <HAL_GPIO_EXTI_Callback+0x7ac>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d118      	bne.n	8000b56 <HAL_GPIO_EXTI_Callback+0x652>
                espacios_disponibles++;
 8000b24:	4b56      	ldr	r3, [pc, #344]	@ (8000c80 <HAL_GPIO_EXTI_Callback+0x77c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b54      	ldr	r3, [pc, #336]	@ (8000c80 <HAL_GPIO_EXTI_Callback+0x77c>)
 8000b2e:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 2, &black_color);
 8000b30:	4a54      	ldr	r2, [pc, #336]	@ (8000c84 <HAL_GPIO_EXTI_Callback+0x780>)
 8000b32:	2102      	movs	r1, #2
 8000b34:	4854      	ldr	r0, [pc, #336]	@ (8000c88 <HAL_GPIO_EXTI_Callback+0x784>)
 8000b36:	f000 fd69 	bl	800160c <set_specific_led>
                set_specific_led(leds, 2, &green_color);
 8000b3a:	4a54      	ldr	r2, [pc, #336]	@ (8000c8c <HAL_GPIO_EXTI_Callback+0x788>)
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	4852      	ldr	r0, [pc, #328]	@ (8000c88 <HAL_GPIO_EXTI_Callback+0x784>)
 8000b40:	f000 fd64 	bl	800160c <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000b44:	23d8      	movs	r3, #216	@ 0xd8
 8000b46:	4a50      	ldr	r2, [pc, #320]	@ (8000c88 <HAL_GPIO_EXTI_Callback+0x784>)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4851      	ldr	r0, [pc, #324]	@ (8000c90 <HAL_GPIO_EXTI_Callback+0x78c>)
 8000b4c:	f004 ff02 	bl	8005954 <HAL_TIM_PWM_Start_DMA>
                activa7 = 0;
 8000b50:	4b57      	ldr	r3, [pc, #348]	@ (8000cb0 <HAL_GPIO_EXTI_Callback+0x7ac>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
            last_interrupt_time = current_time;
 8000b56:	4a4f      	ldr	r2, [pc, #316]	@ (8000c94 <HAL_GPIO_EXTI_Callback+0x790>)
 8000b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b5a:	6013      	str	r3, [r2, #0]
            data = 0x06; // Declarar una variable de tipo uint8_t con el dato a enviar
 8000b5c:	4b4e      	ldr	r3, [pc, #312]	@ (8000c98 <HAL_GPIO_EXTI_Callback+0x794>)
 8000b5e:	2206      	movs	r2, #6
 8000b60:	701a      	strb	r2, [r3, #0]
            char* mensaje = "6";
 8000b62:	4b55      	ldr	r3, [pc, #340]	@ (8000cb8 <HAL_GPIO_EXTI_Callback+0x7b4>)
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
			  if (HAL_I2C_Master_Transmit(&hi2c1, ESP32_ADDRESS << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000b66:	4b4e      	ldr	r3, [pc, #312]	@ (8000ca0 <HAL_GPIO_EXTI_Callback+0x79c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	b299      	uxth	r1, r3
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	2301      	movs	r3, #1
 8000b78:	4a47      	ldr	r2, [pc, #284]	@ (8000c98 <HAL_GPIO_EXTI_Callback+0x794>)
 8000b7a:	484a      	ldr	r0, [pc, #296]	@ (8000ca4 <HAL_GPIO_EXTI_Callback+0x7a0>)
 8000b7c:	f002 f90c 	bl	8002d98 <HAL_I2C_Master_Transmit>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_GPIO_EXTI_Callback+0x686>
				  Error_Handler();
 8000b86:	f000 fcf5 	bl	8001574 <Error_Handler>
			  HAL_UART_Transmit(&huart4, (uint8_t*)mensaje, strlen(mensaje), 10); // Enviar mensaje por UART4
 8000b8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b8c:	f7ff fb3a 	bl	8000204 <strlen>
 8000b90:	4603      	mov	r3, r0
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	230a      	movs	r3, #10
 8000b96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000b98:	4843      	ldr	r0, [pc, #268]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x7a4>)
 8000b9a:	f005 fecf 	bl	800693c <HAL_UART_Transmit>
}
 8000b9e:	e069      	b.n	8000c74 <HAL_GPIO_EXTI_Callback+0x770>
    } else if (GPIO_Pin == sensor8_Pin) {
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	2b80      	cmp	r3, #128	@ 0x80
 8000ba4:	d166      	bne.n	8000c74 <HAL_GPIO_EXTI_Callback+0x770>
        if ((current_time - last_interrupt_time) > debounce_delay) {
 8000ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8000c94 <HAL_GPIO_EXTI_Callback+0x790>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bac:	1ad2      	subs	r2, r2, r3
 8000bae:	4b3f      	ldr	r3, [pc, #252]	@ (8000cac <HAL_GPIO_EXTI_Callback+0x7a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d95e      	bls.n	8000c74 <HAL_GPIO_EXTI_Callback+0x770>
            if (activa8 == 0) {
 8000bb6:	4b41      	ldr	r3, [pc, #260]	@ (8000cbc <HAL_GPIO_EXTI_Callback+0x7b8>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d119      	bne.n	8000bf2 <HAL_GPIO_EXTI_Callback+0x6ee>
                espacios_disponibles--;
 8000bbe:	4b30      	ldr	r3, [pc, #192]	@ (8000c80 <HAL_GPIO_EXTI_Callback+0x77c>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8000c80 <HAL_GPIO_EXTI_Callback+0x77c>)
 8000bc8:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 7, &black_color);
 8000bca:	4a2e      	ldr	r2, [pc, #184]	@ (8000c84 <HAL_GPIO_EXTI_Callback+0x780>)
 8000bcc:	2107      	movs	r1, #7
 8000bce:	482e      	ldr	r0, [pc, #184]	@ (8000c88 <HAL_GPIO_EXTI_Callback+0x784>)
 8000bd0:	f000 fd1c 	bl	800160c <set_specific_led>
                set_specific_led(leds, 7, &red_color);
 8000bd4:	4a37      	ldr	r2, [pc, #220]	@ (8000cb4 <HAL_GPIO_EXTI_Callback+0x7b0>)
 8000bd6:	2107      	movs	r1, #7
 8000bd8:	482b      	ldr	r0, [pc, #172]	@ (8000c88 <HAL_GPIO_EXTI_Callback+0x784>)
 8000bda:	f000 fd17 	bl	800160c <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000bde:	23d8      	movs	r3, #216	@ 0xd8
 8000be0:	4a29      	ldr	r2, [pc, #164]	@ (8000c88 <HAL_GPIO_EXTI_Callback+0x784>)
 8000be2:	2100      	movs	r1, #0
 8000be4:	482a      	ldr	r0, [pc, #168]	@ (8000c90 <HAL_GPIO_EXTI_Callback+0x78c>)
 8000be6:	f004 feb5 	bl	8005954 <HAL_TIM_PWM_Start_DMA>
                activa8 = 1;
 8000bea:	4b34      	ldr	r3, [pc, #208]	@ (8000cbc <HAL_GPIO_EXTI_Callback+0x7b8>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	e01c      	b.n	8000c2c <HAL_GPIO_EXTI_Callback+0x728>
            } else if (activa8 == 1) {
 8000bf2:	4b32      	ldr	r3, [pc, #200]	@ (8000cbc <HAL_GPIO_EXTI_Callback+0x7b8>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d118      	bne.n	8000c2c <HAL_GPIO_EXTI_Callback+0x728>
                espacios_disponibles++;
 8000bfa:	4b21      	ldr	r3, [pc, #132]	@ (8000c80 <HAL_GPIO_EXTI_Callback+0x77c>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4b1f      	ldr	r3, [pc, #124]	@ (8000c80 <HAL_GPIO_EXTI_Callback+0x77c>)
 8000c04:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 7, &black_color);
 8000c06:	4a1f      	ldr	r2, [pc, #124]	@ (8000c84 <HAL_GPIO_EXTI_Callback+0x780>)
 8000c08:	2107      	movs	r1, #7
 8000c0a:	481f      	ldr	r0, [pc, #124]	@ (8000c88 <HAL_GPIO_EXTI_Callback+0x784>)
 8000c0c:	f000 fcfe 	bl	800160c <set_specific_led>
                set_specific_led(leds, 7, &green_color);
 8000c10:	4a1e      	ldr	r2, [pc, #120]	@ (8000c8c <HAL_GPIO_EXTI_Callback+0x788>)
 8000c12:	2107      	movs	r1, #7
 8000c14:	481c      	ldr	r0, [pc, #112]	@ (8000c88 <HAL_GPIO_EXTI_Callback+0x784>)
 8000c16:	f000 fcf9 	bl	800160c <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000c1a:	23d8      	movs	r3, #216	@ 0xd8
 8000c1c:	4a1a      	ldr	r2, [pc, #104]	@ (8000c88 <HAL_GPIO_EXTI_Callback+0x784>)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	481b      	ldr	r0, [pc, #108]	@ (8000c90 <HAL_GPIO_EXTI_Callback+0x78c>)
 8000c22:	f004 fe97 	bl	8005954 <HAL_TIM_PWM_Start_DMA>
                activa8 = 0;
 8000c26:	4b25      	ldr	r3, [pc, #148]	@ (8000cbc <HAL_GPIO_EXTI_Callback+0x7b8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
            last_interrupt_time = current_time;
 8000c2c:	4a19      	ldr	r2, [pc, #100]	@ (8000c94 <HAL_GPIO_EXTI_Callback+0x790>)
 8000c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c30:	6013      	str	r3, [r2, #0]
             data = 0x01; // Declarar una variable de tipo uint8_t con el dato a enviar
 8000c32:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <HAL_GPIO_EXTI_Callback+0x794>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	701a      	strb	r2, [r3, #0]
             char* mensaje = "1";
 8000c38:	4b21      	ldr	r3, [pc, #132]	@ (8000cc0 <HAL_GPIO_EXTI_Callback+0x7bc>)
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
		 if (HAL_I2C_Master_Transmit(&hi2c1, ESP32_ADDRESS << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000c3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <HAL_GPIO_EXTI_Callback+0x79c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	b299      	uxth	r1, r3
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	4a12      	ldr	r2, [pc, #72]	@ (8000c98 <HAL_GPIO_EXTI_Callback+0x794>)
 8000c50:	4814      	ldr	r0, [pc, #80]	@ (8000ca4 <HAL_GPIO_EXTI_Callback+0x7a0>)
 8000c52:	f002 f8a1 	bl	8002d98 <HAL_I2C_Master_Transmit>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <HAL_GPIO_EXTI_Callback+0x75c>
			  Error_Handler();
 8000c5c:	f000 fc8a 	bl	8001574 <Error_Handler>
		 HAL_UART_Transmit(&huart4, (uint8_t*)mensaje, strlen(mensaje), 10); // Enviar mensaje por UART4
 8000c60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c62:	f7ff facf 	bl	8000204 <strlen>
 8000c66:	4603      	mov	r3, r0
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	230a      	movs	r3, #10
 8000c6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000c6e:	480e      	ldr	r0, [pc, #56]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x7a4>)
 8000c70:	f005 fe64 	bl	800693c <HAL_UART_Transmit>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	@ 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000041 	.word	0x20000041
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000688 	.word	0x20000688
 8000c88:	20000190 	.word	0x20000190
 8000c8c:	20000010 	.word	0x20000010
 8000c90:	200000a0 	.word	0x200000a0
 8000c94:	20000048 	.word	0x20000048
 8000c98:	2000068b 	.word	0x2000068b
 8000c9c:	08007924 	.word	0x08007924
 8000ca0:	20000004 	.word	0x20000004
 8000ca4:	2000004c 	.word	0x2000004c
 8000ca8:	20000148 	.word	0x20000148
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000042 	.word	0x20000042
 8000cb4:	2000000c 	.word	0x2000000c
 8000cb8:	08007928 	.word	0x08007928
 8000cbc:	20000043 	.word	0x20000043
 8000cc0:	0800792c 	.word	0x0800792c

08000cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */


	// Patterns
	for(int i = 0; i < NUMBER_OF_LEDS; i++){
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	e014      	b.n	8000cfa <main+0x36>
		led_pattern[i].b = (i%2) * 255;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	bfb8      	it	lt
 8000cda:	425b      	neglt	r3, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	425b      	negs	r3, r3
 8000ce0:	b2d8      	uxtb	r0, r3
 8000ce2:	499e      	ldr	r1, [pc, #632]	@ (8000f5c <main+0x298>)
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	3302      	adds	r3, #2
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUMBER_OF_LEDS; i++){
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b07      	cmp	r3, #7
 8000cfe:	dde7      	ble.n	8000cd0 <main+0xc>
	}

	// Some pattern
	led_pattern[0].b = 127;
 8000d00:	4b96      	ldr	r3, [pc, #600]	@ (8000f5c <main+0x298>)
 8000d02:	227f      	movs	r2, #127	@ 0x7f
 8000d04:	709a      	strb	r2, [r3, #2]
	led_pattern[0].r = (50);
 8000d06:	4b95      	ldr	r3, [pc, #596]	@ (8000f5c <main+0x298>)
 8000d08:	2232      	movs	r2, #50	@ 0x32
 8000d0a:	701a      	strb	r2, [r3, #0]
	led_pattern[0].g = 0;
 8000d0c:	4b93      	ldr	r3, [pc, #588]	@ (8000f5c <main+0x298>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	705a      	strb	r2, [r3, #1]
	led_pattern[1].b = 255;
 8000d12:	4b92      	ldr	r3, [pc, #584]	@ (8000f5c <main+0x298>)
 8000d14:	22ff      	movs	r2, #255	@ 0xff
 8000d16:	715a      	strb	r2, [r3, #5]
	led_pattern[1].r = (100);
 8000d18:	4b90      	ldr	r3, [pc, #576]	@ (8000f5c <main+0x298>)
 8000d1a:	2264      	movs	r2, #100	@ 0x64
 8000d1c:	70da      	strb	r2, [r3, #3]
	led_pattern[1].g = 0;
 8000d1e:	4b8f      	ldr	r3, [pc, #572]	@ (8000f5c <main+0x298>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	711a      	strb	r2, [r3, #4]
	led_pattern[2].b = 0;
 8000d24:	4b8d      	ldr	r3, [pc, #564]	@ (8000f5c <main+0x298>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	721a      	strb	r2, [r3, #8]
	led_pattern[2].r = (150);
 8000d2a:	4b8c      	ldr	r3, [pc, #560]	@ (8000f5c <main+0x298>)
 8000d2c:	2296      	movs	r2, #150	@ 0x96
 8000d2e:	719a      	strb	r2, [r3, #6]
	led_pattern[2].g = 127;
 8000d30:	4b8a      	ldr	r3, [pc, #552]	@ (8000f5c <main+0x298>)
 8000d32:	227f      	movs	r2, #127	@ 0x7f
 8000d34:	71da      	strb	r2, [r3, #7]
	led_pattern[3].b = 0;
 8000d36:	4b89      	ldr	r3, [pc, #548]	@ (8000f5c <main+0x298>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	72da      	strb	r2, [r3, #11]
	led_pattern[3].r = (150);
 8000d3c:	4b87      	ldr	r3, [pc, #540]	@ (8000f5c <main+0x298>)
 8000d3e:	2296      	movs	r2, #150	@ 0x96
 8000d40:	725a      	strb	r2, [r3, #9]
	led_pattern[3].g = 255;
 8000d42:	4b86      	ldr	r3, [pc, #536]	@ (8000f5c <main+0x298>)
 8000d44:	22ff      	movs	r2, #255	@ 0xff
 8000d46:	729a      	strb	r2, [r3, #10]

	// Setting the pattern
	set_pattern_led(circular_pattern_led, led_pattern, NUMBER_OF_LEDS);
 8000d48:	2208      	movs	r2, #8
 8000d4a:	4984      	ldr	r1, [pc, #528]	@ (8000f5c <main+0x298>)
 8000d4c:	4884      	ldr	r0, [pc, #528]	@ (8000f60 <main+0x29c>)
 8000d4e:	f000 fced 	bl	800172c <set_pattern_led>
	set_pattern_led(circular_pattern_led + NUMBER_OF_LEDS, led_pattern, NUMBER_OF_LEDS);
 8000d52:	4b84      	ldr	r3, [pc, #528]	@ (8000f64 <main+0x2a0>)
 8000d54:	2208      	movs	r2, #8
 8000d56:	4981      	ldr	r1, [pc, #516]	@ (8000f5c <main+0x298>)
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 fce7 	bl	800172c <set_pattern_led>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5e:	f000 ff43 	bl	8001be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d62:	f000 f90f 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d66:	f000 fa49 	bl	80011fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000d6a:	f000 fa27 	bl	80011bc <MX_DMA_Init>
  MX_TIM3_Init();
 8000d6e:	f000 f9a3 	bl	80010b8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000d72:	f000 f973 	bl	800105c <MX_I2C1_Init>
  MX_UART4_Init();
 8000d76:	f000 f9f7 	bl	8001168 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


    reset_all_leds(leds, NUMBER_OF_LEDS); // Apagar todos los LEDs
 8000d7a:	2108      	movs	r1, #8
 8000d7c:	487a      	ldr	r0, [pc, #488]	@ (8000f68 <main+0x2a4>)
 8000d7e:	f000 fbff 	bl	8001580 <reset_all_leds>
    set_specific_led(leds, 0, &green_color); // Establecer LEDs en verde
 8000d82:	4a7a      	ldr	r2, [pc, #488]	@ (8000f6c <main+0x2a8>)
 8000d84:	2100      	movs	r1, #0
 8000d86:	4878      	ldr	r0, [pc, #480]	@ (8000f68 <main+0x2a4>)
 8000d88:	f000 fc40 	bl	800160c <set_specific_led>
    set_specific_led(leds, 1, &green_color);
 8000d8c:	4a77      	ldr	r2, [pc, #476]	@ (8000f6c <main+0x2a8>)
 8000d8e:	2101      	movs	r1, #1
 8000d90:	4875      	ldr	r0, [pc, #468]	@ (8000f68 <main+0x2a4>)
 8000d92:	f000 fc3b 	bl	800160c <set_specific_led>
    set_specific_led(leds, 2, &green_color);
 8000d96:	4a75      	ldr	r2, [pc, #468]	@ (8000f6c <main+0x2a8>)
 8000d98:	2102      	movs	r1, #2
 8000d9a:	4873      	ldr	r0, [pc, #460]	@ (8000f68 <main+0x2a4>)
 8000d9c:	f000 fc36 	bl	800160c <set_specific_led>
    set_specific_led(leds, 3, &green_color);
 8000da0:	4a72      	ldr	r2, [pc, #456]	@ (8000f6c <main+0x2a8>)
 8000da2:	2103      	movs	r1, #3
 8000da4:	4870      	ldr	r0, [pc, #448]	@ (8000f68 <main+0x2a4>)
 8000da6:	f000 fc31 	bl	800160c <set_specific_led>
    set_specific_led(leds, 4, &green_color);
 8000daa:	4a70      	ldr	r2, [pc, #448]	@ (8000f6c <main+0x2a8>)
 8000dac:	2104      	movs	r1, #4
 8000dae:	486e      	ldr	r0, [pc, #440]	@ (8000f68 <main+0x2a4>)
 8000db0:	f000 fc2c 	bl	800160c <set_specific_led>
    set_specific_led(leds, 5, &green_color);
 8000db4:	4a6d      	ldr	r2, [pc, #436]	@ (8000f6c <main+0x2a8>)
 8000db6:	2105      	movs	r1, #5
 8000db8:	486b      	ldr	r0, [pc, #428]	@ (8000f68 <main+0x2a4>)
 8000dba:	f000 fc27 	bl	800160c <set_specific_led>
    set_specific_led(leds, 6, &green_color);
 8000dbe:	4a6b      	ldr	r2, [pc, #428]	@ (8000f6c <main+0x2a8>)
 8000dc0:	2106      	movs	r1, #6
 8000dc2:	4869      	ldr	r0, [pc, #420]	@ (8000f68 <main+0x2a4>)
 8000dc4:	f000 fc22 	bl	800160c <set_specific_led>
    set_specific_led(leds, 7, &green_color);
 8000dc8:	4a68      	ldr	r2, [pc, #416]	@ (8000f6c <main+0x2a8>)
 8000dca:	2107      	movs	r1, #7
 8000dcc:	4866      	ldr	r0, [pc, #408]	@ (8000f68 <main+0x2a4>)
 8000dce:	f000 fc1d 	bl	800160c <set_specific_led>
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000dd2:	23d8      	movs	r3, #216	@ 0xd8
 8000dd4:	4a64      	ldr	r2, [pc, #400]	@ (8000f68 <main+0x2a4>)
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4865      	ldr	r0, [pc, #404]	@ (8000f70 <main+0x2ac>)
 8000dda:	f004 fdbb 	bl	8005954 <HAL_TIM_PWM_Start_DMA>


    HAL_Delay(3000);  //Retardo para estaperar a que el sistema se inicie bien
 8000dde:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000de2:	f000 ff73 	bl	8001ccc <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(activador == 1|| activador1 == 0){
 8000de6:	4b63      	ldr	r3, [pc, #396]	@ (8000f74 <main+0x2b0>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d004      	beq.n	8000df8 <main+0x134>
 8000dee:	4b62      	ldr	r3, [pc, #392]	@ (8000f78 <main+0x2b4>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 80ae 	bne.w	8000f54 <main+0x290>
		  activador1 = 1;
 8000df8:	4b5f      	ldr	r3, [pc, #380]	@ (8000f78 <main+0x2b4>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]

		  	 if(espacios_disponibles <= 0 ){
 8000dfe:	4b5f      	ldr	r3, [pc, #380]	@ (8000f7c <main+0x2b8>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d137      	bne.n	8000e76 <main+0x1b2>
		 		  display0();
 8000e06:	f000 fb13 	bl	8001430 <display0>
		 		 reset_all_leds(leds, NUMBER_OF_LEDS); // Apagar todos los LEDs
 8000e0a:	2108      	movs	r1, #8
 8000e0c:	4856      	ldr	r0, [pc, #344]	@ (8000f68 <main+0x2a4>)
 8000e0e:	f000 fbb7 	bl	8001580 <reset_all_leds>
		 		    set_specific_led(leds, 0, &red_color); // Establecer LED en rojo
 8000e12:	4a5b      	ldr	r2, [pc, #364]	@ (8000f80 <main+0x2bc>)
 8000e14:	2100      	movs	r1, #0
 8000e16:	4854      	ldr	r0, [pc, #336]	@ (8000f68 <main+0x2a4>)
 8000e18:	f000 fbf8 	bl	800160c <set_specific_led>
		 		    set_specific_led(leds, 1, &red_color);
 8000e1c:	4a58      	ldr	r2, [pc, #352]	@ (8000f80 <main+0x2bc>)
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4851      	ldr	r0, [pc, #324]	@ (8000f68 <main+0x2a4>)
 8000e22:	f000 fbf3 	bl	800160c <set_specific_led>
		 		    set_specific_led(leds, 2, &red_color);
 8000e26:	4a56      	ldr	r2, [pc, #344]	@ (8000f80 <main+0x2bc>)
 8000e28:	2102      	movs	r1, #2
 8000e2a:	484f      	ldr	r0, [pc, #316]	@ (8000f68 <main+0x2a4>)
 8000e2c:	f000 fbee 	bl	800160c <set_specific_led>
		 		    set_specific_led(leds, 3, &red_color);
 8000e30:	4a53      	ldr	r2, [pc, #332]	@ (8000f80 <main+0x2bc>)
 8000e32:	2103      	movs	r1, #3
 8000e34:	484c      	ldr	r0, [pc, #304]	@ (8000f68 <main+0x2a4>)
 8000e36:	f000 fbe9 	bl	800160c <set_specific_led>
		 		    set_specific_led(leds, 4, &red_color);
 8000e3a:	4a51      	ldr	r2, [pc, #324]	@ (8000f80 <main+0x2bc>)
 8000e3c:	2104      	movs	r1, #4
 8000e3e:	484a      	ldr	r0, [pc, #296]	@ (8000f68 <main+0x2a4>)
 8000e40:	f000 fbe4 	bl	800160c <set_specific_led>
		 		    set_specific_led(leds, 5, &red_color);
 8000e44:	4a4e      	ldr	r2, [pc, #312]	@ (8000f80 <main+0x2bc>)
 8000e46:	2105      	movs	r1, #5
 8000e48:	4847      	ldr	r0, [pc, #284]	@ (8000f68 <main+0x2a4>)
 8000e4a:	f000 fbdf 	bl	800160c <set_specific_led>
		 		    set_specific_led(leds, 6, &red_color);
 8000e4e:	4a4c      	ldr	r2, [pc, #304]	@ (8000f80 <main+0x2bc>)
 8000e50:	2106      	movs	r1, #6
 8000e52:	4845      	ldr	r0, [pc, #276]	@ (8000f68 <main+0x2a4>)
 8000e54:	f000 fbda 	bl	800160c <set_specific_led>
		 		    set_specific_led(leds, 7, &red_color);
 8000e58:	4a49      	ldr	r2, [pc, #292]	@ (8000f80 <main+0x2bc>)
 8000e5a:	2107      	movs	r1, #7
 8000e5c:	4842      	ldr	r0, [pc, #264]	@ (8000f68 <main+0x2a4>)
 8000e5e:	f000 fbd5 	bl	800160c <set_specific_led>
		 		    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000e62:	23d8      	movs	r3, #216	@ 0xd8
 8000e64:	4a40      	ldr	r2, [pc, #256]	@ (8000f68 <main+0x2a4>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	4841      	ldr	r0, [pc, #260]	@ (8000f70 <main+0x2ac>)
 8000e6a:	f004 fd73 	bl	8005954 <HAL_TIM_PWM_Start_DMA>


		 		  espacios_disponibles = 0;
 8000e6e:	4b43      	ldr	r3, [pc, #268]	@ (8000f7c <main+0x2b8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	e06b      	b.n	8000f4e <main+0x28a>
		 	  }
		 	  else if(espacios_disponibles == 1){
 8000e76:	4b41      	ldr	r3, [pc, #260]	@ (8000f7c <main+0x2b8>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d102      	bne.n	8000e84 <main+0x1c0>
		 		  display1();
 8000e7e:	f000 fae9 	bl	8001454 <display1>
 8000e82:	e064      	b.n	8000f4e <main+0x28a>

		 	  }
		 	  else if(espacios_disponibles == 2){
 8000e84:	4b3d      	ldr	r3, [pc, #244]	@ (8000f7c <main+0x2b8>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d102      	bne.n	8000e92 <main+0x1ce>
		 	 		  display2();
 8000e8c:	f000 faf4 	bl	8001478 <display2>
 8000e90:	e05d      	b.n	8000f4e <main+0x28a>


}
		 	  else if(espacios_disponibles == 3){
 8000e92:	4b3a      	ldr	r3, [pc, #232]	@ (8000f7c <main+0x2b8>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d102      	bne.n	8000ea0 <main+0x1dc>
		 	 		  display3();
 8000e9a:	f000 faff 	bl	800149c <display3>
 8000e9e:	e056      	b.n	8000f4e <main+0x28a>


		 	  }
		 	  else if(espacios_disponibles == 4){
 8000ea0:	4b36      	ldr	r3, [pc, #216]	@ (8000f7c <main+0x2b8>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b04      	cmp	r3, #4
 8000ea6:	d102      	bne.n	8000eae <main+0x1ea>
		 		  display4();
 8000ea8:	f000 fb0a 	bl	80014c0 <display4>
 8000eac:	e04f      	b.n	8000f4e <main+0x28a>

		 	  }

		 	  else if(espacios_disponibles == 5){
 8000eae:	4b33      	ldr	r3, [pc, #204]	@ (8000f7c <main+0x2b8>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b05      	cmp	r3, #5
 8000eb4:	d102      	bne.n	8000ebc <main+0x1f8>
		 	 		  display5();
 8000eb6:	f000 fb15 	bl	80014e4 <display5>
 8000eba:	e048      	b.n	8000f4e <main+0x28a>


		 	 }
		 	  else if(espacios_disponibles == 6){
 8000ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8000f7c <main+0x2b8>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b06      	cmp	r3, #6
 8000ec2:	d102      	bne.n	8000eca <main+0x206>
		 	 		  display6();
 8000ec4:	f000 fb20 	bl	8001508 <display6>
 8000ec8:	e041      	b.n	8000f4e <main+0x28a>


		 	  }
		 	  else if(espacios_disponibles == 7){
 8000eca:	4b2c      	ldr	r3, [pc, #176]	@ (8000f7c <main+0x2b8>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b07      	cmp	r3, #7
 8000ed0:	d102      	bne.n	8000ed8 <main+0x214>
		 		  display7();
 8000ed2:	f000 fb2b 	bl	800152c <display7>
 8000ed6:	e03a      	b.n	8000f4e <main+0x28a>

		 	  }

		 	  else if(espacios_disponibles >= 8){
 8000ed8:	4b28      	ldr	r3, [pc, #160]	@ (8000f7c <main+0x2b8>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b07      	cmp	r3, #7
 8000ede:	d936      	bls.n	8000f4e <main+0x28a>
		 	 		  display8();
 8000ee0:	f000 fb36 	bl	8001550 <display8>
		 	 		  reset_all_leds(leds, NUMBER_OF_LEDS); // Apagar todos los LEDs
 8000ee4:	2108      	movs	r1, #8
 8000ee6:	4820      	ldr	r0, [pc, #128]	@ (8000f68 <main+0x2a4>)
 8000ee8:	f000 fb4a 	bl	8001580 <reset_all_leds>
		 	 		    set_specific_led(leds, 0, &green_color);
 8000eec:	4a1f      	ldr	r2, [pc, #124]	@ (8000f6c <main+0x2a8>)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	481d      	ldr	r0, [pc, #116]	@ (8000f68 <main+0x2a4>)
 8000ef2:	f000 fb8b 	bl	800160c <set_specific_led>
		 	 		    set_specific_led(leds, 1, &green_color);
 8000ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f6c <main+0x2a8>)
 8000ef8:	2101      	movs	r1, #1
 8000efa:	481b      	ldr	r0, [pc, #108]	@ (8000f68 <main+0x2a4>)
 8000efc:	f000 fb86 	bl	800160c <set_specific_led>
		 	 		    set_specific_led(leds, 2, &green_color);
 8000f00:	4a1a      	ldr	r2, [pc, #104]	@ (8000f6c <main+0x2a8>)
 8000f02:	2102      	movs	r1, #2
 8000f04:	4818      	ldr	r0, [pc, #96]	@ (8000f68 <main+0x2a4>)
 8000f06:	f000 fb81 	bl	800160c <set_specific_led>
		 	 		    set_specific_led(leds, 3, &green_color);
 8000f0a:	4a18      	ldr	r2, [pc, #96]	@ (8000f6c <main+0x2a8>)
 8000f0c:	2103      	movs	r1, #3
 8000f0e:	4816      	ldr	r0, [pc, #88]	@ (8000f68 <main+0x2a4>)
 8000f10:	f000 fb7c 	bl	800160c <set_specific_led>
		 	 		    set_specific_led(leds, 4, &green_color);
 8000f14:	4a15      	ldr	r2, [pc, #84]	@ (8000f6c <main+0x2a8>)
 8000f16:	2104      	movs	r1, #4
 8000f18:	4813      	ldr	r0, [pc, #76]	@ (8000f68 <main+0x2a4>)
 8000f1a:	f000 fb77 	bl	800160c <set_specific_led>
		 	 		    set_specific_led(leds, 5, &green_color);
 8000f1e:	4a13      	ldr	r2, [pc, #76]	@ (8000f6c <main+0x2a8>)
 8000f20:	2105      	movs	r1, #5
 8000f22:	4811      	ldr	r0, [pc, #68]	@ (8000f68 <main+0x2a4>)
 8000f24:	f000 fb72 	bl	800160c <set_specific_led>
		 	 		    set_specific_led(leds, 6, &green_color);
 8000f28:	4a10      	ldr	r2, [pc, #64]	@ (8000f6c <main+0x2a8>)
 8000f2a:	2106      	movs	r1, #6
 8000f2c:	480e      	ldr	r0, [pc, #56]	@ (8000f68 <main+0x2a4>)
 8000f2e:	f000 fb6d 	bl	800160c <set_specific_led>
		 	 		    set_specific_led(leds, 7, &green_color);
 8000f32:	4a0e      	ldr	r2, [pc, #56]	@ (8000f6c <main+0x2a8>)
 8000f34:	2107      	movs	r1, #7
 8000f36:	480c      	ldr	r0, [pc, #48]	@ (8000f68 <main+0x2a4>)
 8000f38:	f000 fb68 	bl	800160c <set_specific_led>
		 	 		    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000f3c:	23d8      	movs	r3, #216	@ 0xd8
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <main+0x2a4>)
 8000f40:	2100      	movs	r1, #0
 8000f42:	480b      	ldr	r0, [pc, #44]	@ (8000f70 <main+0x2ac>)
 8000f44:	f004 fd06 	bl	8005954 <HAL_TIM_PWM_Start_DMA>



		 	 		 espacios_disponibles = 8;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <main+0x2b8>)
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	701a      	strb	r2, [r3, #0]
		 	 }

		  	 activador = 0;
 8000f4e:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <main+0x2b0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]





  HAL_Delay(10); // Esperar 10ms
 8000f54:	200a      	movs	r0, #10
 8000f56:	f000 feb9 	bl	8001ccc <HAL_Delay>
	  if(activador == 1|| activador1 == 0){
 8000f5a:	e744      	b.n	8000de6 <main+0x122>
 8000f5c:	20000670 	.word	0x20000670
 8000f60:	20000340 	.word	0x20000340
 8000f64:	200004c0 	.word	0x200004c0
 8000f68:	20000190 	.word	0x20000190
 8000f6c:	20000010 	.word	0x20000010
 8000f70:	200000a0 	.word	0x200000a0
 8000f74:	20000044 	.word	0x20000044
 8000f78:	20000045 	.word	0x20000045
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	2000000c 	.word	0x2000000c

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b094      	sub	sp, #80	@ 0x50
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	2234      	movs	r2, #52	@ 0x34
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f006 fc84 	bl	80078a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	4b29      	ldr	r3, [pc, #164]	@ (8001054 <SystemClock_Config+0xd0>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb0:	4a28      	ldr	r2, [pc, #160]	@ (8001054 <SystemClock_Config+0xd0>)
 8000fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb8:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <SystemClock_Config+0xd0>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	4b23      	ldr	r3, [pc, #140]	@ (8001058 <SystemClock_Config+0xd4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a22      	ldr	r2, [pc, #136]	@ (8001058 <SystemClock_Config+0xd4>)
 8000fce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	4b20      	ldr	r3, [pc, #128]	@ (8001058 <SystemClock_Config+0xd4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe8:	2310      	movs	r3, #16
 8000fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fec:	2302      	movs	r3, #2
 8000fee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ff4:	2308      	movs	r3, #8
 8000ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000ff8:	23a0      	movs	r3, #160	@ 0xa0
 8000ffa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001000:	2302      	movs	r3, #2
 8001002:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001004:	2302      	movs	r3, #2
 8001006:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4618      	mov	r0, r3
 800100e:	f004 f9b3 	bl	8005378 <HAL_RCC_OscConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001018:	f000 faac 	bl	8001574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101c:	230f      	movs	r3, #15
 800101e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001020:	2302      	movs	r3, #2
 8001022:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001028:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800102c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800102e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001032:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	2105      	movs	r1, #5
 800103a:	4618      	mov	r0, r3
 800103c:	f003 fed8 	bl	8004df0 <HAL_RCC_ClockConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001046:	f000 fa95 	bl	8001574 <Error_Handler>
  }
}
 800104a:	bf00      	nop
 800104c:	3750      	adds	r7, #80	@ 0x50
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40007000 	.word	0x40007000

0800105c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001062:	4a13      	ldr	r2, [pc, #76]	@ (80010b0 <MX_I2C1_Init+0x54>)
 8001064:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001068:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <MX_I2C1_Init+0x58>)
 800106a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_I2C1_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <MX_I2C1_Init+0x50>)
 800107a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800107e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001080:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001086:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	@ (80010ac <MX_I2C1_Init+0x50>)
 800109a:	f001 fd23 	bl	8002ae4 <HAL_I2C_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010a4:	f000 fa66 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2000004c 	.word	0x2000004c
 80010b0:	40005400 	.word	0x40005400
 80010b4:	000186a0 	.word	0x000186a0

080010b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	@ 0x28
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010be:	f107 0320 	add.w	r3, r7, #32
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]
 80010d6:	615a      	str	r2, [r3, #20]
 80010d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010da:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <MX_TIM3_Init+0xa8>)
 80010dc:	4a21      	ldr	r2, [pc, #132]	@ (8001164 <MX_TIM3_Init+0xac>)
 80010de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 80010e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001160 <MX_TIM3_Init+0xa8>)
 80010e2:	2203      	movs	r2, #3
 80010e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001160 <MX_TIM3_Init+0xa8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 24;
 80010ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001160 <MX_TIM3_Init+0xa8>)
 80010ee:	2218      	movs	r2, #24
 80010f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <MX_TIM3_Init+0xa8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010f8:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <MX_TIM3_Init+0xa8>)
 80010fa:	2280      	movs	r2, #128	@ 0x80
 80010fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010fe:	4818      	ldr	r0, [pc, #96]	@ (8001160 <MX_TIM3_Init+0xa8>)
 8001100:	f004 fbd8 	bl	80058b4 <HAL_TIM_PWM_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800110a:	f000 fa33 	bl	8001574 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	4619      	mov	r1, r3
 800111c:	4810      	ldr	r0, [pc, #64]	@ (8001160 <MX_TIM3_Init+0xa8>)
 800111e:	f005 fb2d 	bl	800677c <HAL_TIMEx_MasterConfigSynchronization>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001128:	f000 fa24 	bl	8001574 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112c:	2360      	movs	r3, #96	@ 0x60
 800112e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	4619      	mov	r1, r3
 8001142:	4807      	ldr	r0, [pc, #28]	@ (8001160 <MX_TIM3_Init+0xa8>)
 8001144:	f004 febe 	bl	8005ec4 <HAL_TIM_PWM_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800114e:	f000 fa11 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001152:	4803      	ldr	r0, [pc, #12]	@ (8001160 <MX_TIM3_Init+0xa8>)
 8001154:	f000 fbee 	bl	8001934 <HAL_TIM_MspPostInit>

}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	@ 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200000a0 	.word	0x200000a0
 8001164:	40000400 	.word	0x40000400

08001168 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800116c:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <MX_UART4_Init+0x4c>)
 800116e:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <MX_UART4_Init+0x50>)
 8001170:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <MX_UART4_Init+0x4c>)
 8001174:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001178:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_UART4_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <MX_UART4_Init+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <MX_UART4_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <MX_UART4_Init+0x4c>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <MX_UART4_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_UART4_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <MX_UART4_Init+0x4c>)
 80011a0:	f005 fb7c 	bl	800689c <HAL_UART_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80011aa:	f000 f9e3 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000148 	.word	0x20000148
 80011b8:	40004c00 	.word	0x40004c00

080011bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <MX_DMA_Init+0x3c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a0b      	ldr	r2, [pc, #44]	@ (80011f8 <MX_DMA_Init+0x3c>)
 80011cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <MX_DMA_Init+0x3c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	200f      	movs	r0, #15
 80011e4:	f000 fe71 	bl	8001eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80011e8:	200f      	movs	r0, #15
 80011ea:	f000 fe8a 	bl	8001f02 <HAL_NVIC_EnableIRQ>

}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800

080011fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	@ 0x28
 8001200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b5e      	ldr	r3, [pc, #376]	@ (8001390 <MX_GPIO_Init+0x194>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a5d      	ldr	r2, [pc, #372]	@ (8001390 <MX_GPIO_Init+0x194>)
 800121c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b5b      	ldr	r3, [pc, #364]	@ (8001390 <MX_GPIO_Init+0x194>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b57      	ldr	r3, [pc, #348]	@ (8001390 <MX_GPIO_Init+0x194>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a56      	ldr	r2, [pc, #344]	@ (8001390 <MX_GPIO_Init+0x194>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b54      	ldr	r3, [pc, #336]	@ (8001390 <MX_GPIO_Init+0x194>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b50      	ldr	r3, [pc, #320]	@ (8001390 <MX_GPIO_Init+0x194>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a4f      	ldr	r2, [pc, #316]	@ (8001390 <MX_GPIO_Init+0x194>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b4d      	ldr	r3, [pc, #308]	@ (8001390 <MX_GPIO_Init+0x194>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b49      	ldr	r3, [pc, #292]	@ (8001390 <MX_GPIO_Init+0x194>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a48      	ldr	r2, [pc, #288]	@ (8001390 <MX_GPIO_Init+0x194>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b46      	ldr	r3, [pc, #280]	@ (8001390 <MX_GPIO_Init+0x194>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_C_Pin|D_D_Pin|D_E_Pin|D_A_Pin
 8001282:	2200      	movs	r2, #0
 8001284:	f24d 0106 	movw	r1, #53254	@ 0xd006
 8001288:	4842      	ldr	r0, [pc, #264]	@ (8001394 <MX_GPIO_Init+0x198>)
 800128a:	f001 fbf9 	bl	8002a80 <HAL_GPIO_WritePin>
                          |D_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D_F_Pin|D_G_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001294:	4840      	ldr	r0, [pc, #256]	@ (8001398 <MX_GPIO_Init+0x19c>)
 8001296:	f001 fbf3 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : sensor1_Pin sensor2_Pin */
  GPIO_InitStruct.Pin = sensor1_Pin|sensor2_Pin;
 800129a:	2303      	movs	r3, #3
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800129e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	483b      	ldr	r0, [pc, #236]	@ (800139c <MX_GPIO_Init+0x1a0>)
 80012b0:	f001 fa52 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : sensor4_Pin sensor6_Pin sensor8_Pin sensor5_Pin
                           sensor3_Pin */
  GPIO_InitStruct.Pin = sensor4_Pin|sensor6_Pin|sensor8_Pin|sensor5_Pin
 80012b4:	f44f 63d6 	mov.w	r3, #1712	@ 0x6b0
 80012b8:	617b      	str	r3, [r7, #20]
                          |sensor3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012ba:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80012be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	4833      	ldr	r0, [pc, #204]	@ (8001398 <MX_GPIO_Init+0x19c>)
 80012cc:	f001 fa44 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_C_Pin D_D_Pin D_E_Pin D_A_Pin
                           D_B_Pin */
  GPIO_InitStruct.Pin = D_C_Pin|D_D_Pin|D_E_Pin|D_A_Pin
 80012d0:	f24d 0306 	movw	r3, #53254	@ 0xd006
 80012d4:	617b      	str	r3, [r7, #20]
                          |D_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	482a      	ldr	r0, [pc, #168]	@ (8001394 <MX_GPIO_Init+0x198>)
 80012ea:	f001 fa35 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_F_Pin D_G_Pin */
  GPIO_InitStruct.Pin = D_F_Pin|D_G_Pin;
 80012ee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	4824      	ldr	r0, [pc, #144]	@ (8001398 <MX_GPIO_Init+0x19c>)
 8001308:	f001 fa26 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : sensor7_Pin */
  GPIO_InitStruct.Pin = sensor7_Pin;
 800130c:	2308      	movs	r3, #8
 800130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001310:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(sensor7_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	481c      	ldr	r0, [pc, #112]	@ (8001394 <MX_GPIO_Init+0x198>)
 8001322:	f001 fa19 	bl	8002758 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	2006      	movs	r0, #6
 800132c:	f000 fdcd 	bl	8001eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001330:	2006      	movs	r0, #6
 8001332:	f000 fde6 	bl	8001f02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2007      	movs	r0, #7
 800133c:	f000 fdc5 	bl	8001eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001340:	2007      	movs	r0, #7
 8001342:	f000 fdde 	bl	8001f02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2009      	movs	r0, #9
 800134c:	f000 fdbd 	bl	8001eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001350:	2009      	movs	r0, #9
 8001352:	f000 fdd6 	bl	8001f02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	200a      	movs	r0, #10
 800135c:	f000 fdb5 	bl	8001eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001360:	200a      	movs	r0, #10
 8001362:	f000 fdce 	bl	8001f02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	2017      	movs	r0, #23
 800136c:	f000 fdad 	bl	8001eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001370:	2017      	movs	r0, #23
 8001372:	f000 fdc6 	bl	8001f02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	2028      	movs	r0, #40	@ 0x28
 800137c:	f000 fda5 	bl	8001eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001380:	2028      	movs	r0, #40	@ 0x28
 8001382:	f000 fdbe 	bl	8001f02 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	@ 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40020400 	.word	0x40020400
 8001398:	40020000 	.word	0x40020000
 800139c:	40020800 	.word	0x40020800

080013a0 <setSegment>:

/* USER CODE BEGIN 4 */

void setSegment(uint8_t a, uint8_t b, uint8_t c, uint8_t d, uint8_t e, uint8_t f, uint8_t g) {
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4604      	mov	r4, r0
 80013a8:	4608      	mov	r0, r1
 80013aa:	4611      	mov	r1, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	4623      	mov	r3, r4
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	4603      	mov	r3, r0
 80013b4:	71bb      	strb	r3, [r7, #6]
 80013b6:	460b      	mov	r3, r1
 80013b8:	717b      	strb	r3, [r7, #5]
 80013ba:	4613      	mov	r3, r2
 80013bc:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(D_A_GPIO_Port, D_A_Pin, a);
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	461a      	mov	r2, r3
 80013c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013c6:	4818      	ldr	r0, [pc, #96]	@ (8001428 <setSegment+0x88>)
 80013c8:	f001 fb5a 	bl	8002a80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D_B_GPIO_Port, D_B_Pin, b);
 80013cc:	79bb      	ldrb	r3, [r7, #6]
 80013ce:	461a      	mov	r2, r3
 80013d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013d4:	4814      	ldr	r0, [pc, #80]	@ (8001428 <setSegment+0x88>)
 80013d6:	f001 fb53 	bl	8002a80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D_C_GPIO_Port, D_C_Pin, c);
 80013da:	797b      	ldrb	r3, [r7, #5]
 80013dc:	461a      	mov	r2, r3
 80013de:	2102      	movs	r1, #2
 80013e0:	4811      	ldr	r0, [pc, #68]	@ (8001428 <setSegment+0x88>)
 80013e2:	f001 fb4d 	bl	8002a80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D_D_GPIO_Port, D_D_Pin, d);
 80013e6:	793b      	ldrb	r3, [r7, #4]
 80013e8:	461a      	mov	r2, r3
 80013ea:	2104      	movs	r1, #4
 80013ec:	480e      	ldr	r0, [pc, #56]	@ (8001428 <setSegment+0x88>)
 80013ee:	f001 fb47 	bl	8002a80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D_E_GPIO_Port, D_E_Pin, e);
 80013f2:	7e3b      	ldrb	r3, [r7, #24]
 80013f4:	461a      	mov	r2, r3
 80013f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013fa:	480b      	ldr	r0, [pc, #44]	@ (8001428 <setSegment+0x88>)
 80013fc:	f001 fb40 	bl	8002a80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D_F_GPIO_Port, D_F_Pin, f);
 8001400:	7f3b      	ldrb	r3, [r7, #28]
 8001402:	461a      	mov	r2, r3
 8001404:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001408:	4808      	ldr	r0, [pc, #32]	@ (800142c <setSegment+0x8c>)
 800140a:	f001 fb39 	bl	8002a80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D_G_GPIO_Port, D_G_Pin, g);
 800140e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001412:	461a      	mov	r2, r3
 8001414:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001418:	4804      	ldr	r0, [pc, #16]	@ (800142c <setSegment+0x8c>)
 800141a:	f001 fb31 	bl	8002a80 <HAL_GPIO_WritePin>
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bd90      	pop	{r4, r7, pc}
 8001426:	bf00      	nop
 8001428:	40020400 	.word	0x40020400
 800142c:	40020000 	.word	0x40020000

08001430 <display0>:


void display0() {
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af04      	add	r7, sp, #16
    setSegment(1, 1, 1, 1, 1, 1, 0); // 0
 8001436:	2300      	movs	r3, #0
 8001438:	9302      	str	r3, [sp, #8]
 800143a:	2301      	movs	r3, #1
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	2301      	movs	r3, #1
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2301      	movs	r3, #1
 8001444:	2201      	movs	r2, #1
 8001446:	2101      	movs	r1, #1
 8001448:	2001      	movs	r0, #1
 800144a:	f7ff ffa9 	bl	80013a0 <setSegment>
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <display1>:

void display1() {
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af04      	add	r7, sp, #16
    setSegment(0, 1, 1, 0, 0, 0, 0); // 1
 800145a:	2300      	movs	r3, #0
 800145c:	9302      	str	r3, [sp, #8]
 800145e:	2300      	movs	r3, #0
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	2300      	movs	r3, #0
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2300      	movs	r3, #0
 8001468:	2201      	movs	r2, #1
 800146a:	2101      	movs	r1, #1
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff ff97 	bl	80013a0 <setSegment>
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <display2>:

void display2() {
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af04      	add	r7, sp, #16
    setSegment(1, 1, 0, 1, 1, 0, 1); // 2
 800147e:	2301      	movs	r3, #1
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	2300      	movs	r3, #0
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	2301      	movs	r3, #1
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2301      	movs	r3, #1
 800148c:	2200      	movs	r2, #0
 800148e:	2101      	movs	r1, #1
 8001490:	2001      	movs	r0, #1
 8001492:	f7ff ff85 	bl	80013a0 <setSegment>
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <display3>:

void display3() {
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af04      	add	r7, sp, #16
    setSegment(1, 1, 1, 1, 0, 0, 1); // 3
 80014a2:	2301      	movs	r3, #1
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	2300      	movs	r3, #0
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	2300      	movs	r3, #0
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2301      	movs	r3, #1
 80014b0:	2201      	movs	r2, #1
 80014b2:	2101      	movs	r1, #1
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff ff73 	bl	80013a0 <setSegment>
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <display4>:

void display4() {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af04      	add	r7, sp, #16
    setSegment(0, 1, 1, 0, 0, 1, 1); // 4
 80014c6:	2301      	movs	r3, #1
 80014c8:	9302      	str	r3, [sp, #8]
 80014ca:	2301      	movs	r3, #1
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	2300      	movs	r3, #0
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2300      	movs	r3, #0
 80014d4:	2201      	movs	r2, #1
 80014d6:	2101      	movs	r1, #1
 80014d8:	2000      	movs	r0, #0
 80014da:	f7ff ff61 	bl	80013a0 <setSegment>
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <display5>:

void display5() {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af04      	add	r7, sp, #16
    setSegment(1, 0, 1, 1, 0, 1, 1); // 5
 80014ea:	2301      	movs	r3, #1
 80014ec:	9302      	str	r3, [sp, #8]
 80014ee:	2301      	movs	r3, #1
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	2300      	movs	r3, #0
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2301      	movs	r3, #1
 80014f8:	2201      	movs	r2, #1
 80014fa:	2100      	movs	r1, #0
 80014fc:	2001      	movs	r0, #1
 80014fe:	f7ff ff4f 	bl	80013a0 <setSegment>
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <display6>:

void display6() {
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af04      	add	r7, sp, #16
    setSegment(1, 0, 1, 1, 1, 1, 1); // 6
 800150e:	2301      	movs	r3, #1
 8001510:	9302      	str	r3, [sp, #8]
 8001512:	2301      	movs	r3, #1
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	2301      	movs	r3, #1
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	2301      	movs	r3, #1
 800151c:	2201      	movs	r2, #1
 800151e:	2100      	movs	r1, #0
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff ff3d 	bl	80013a0 <setSegment>
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <display7>:

void display7() {
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af04      	add	r7, sp, #16
    setSegment(1, 1, 1, 0, 0, 0, 0); // 7
 8001532:	2300      	movs	r3, #0
 8001534:	9302      	str	r3, [sp, #8]
 8001536:	2300      	movs	r3, #0
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	2300      	movs	r3, #0
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2300      	movs	r3, #0
 8001540:	2201      	movs	r2, #1
 8001542:	2101      	movs	r1, #1
 8001544:	2001      	movs	r0, #1
 8001546:	f7ff ff2b 	bl	80013a0 <setSegment>
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <display8>:

void display8() {
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af04      	add	r7, sp, #16
    setSegment(1, 1, 1, 1, 1, 1, 1); // 8
 8001556:	2301      	movs	r3, #1
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	2301      	movs	r3, #1
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	2301      	movs	r3, #1
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2301      	movs	r3, #1
 8001564:	2201      	movs	r2, #1
 8001566:	2101      	movs	r1, #1
 8001568:	2001      	movs	r0, #1
 800156a:	f7ff ff19 	bl	80013a0 <setSegment>
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001578:	b672      	cpsid	i
}
 800157a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <Error_Handler+0x8>

08001580 <reset_all_leds>:


#include "neo_pixel.h"

// Function to reset all LEDs
void reset_all_leds(neopixel_led* leds, uint16_t number_leds){
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]

	for(int i = 0; i < number_leds; i++){
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	e031      	b.n	80015f6 <reset_all_leds+0x76>

		for(int j = 0; j < 8; j++){
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	e028      	b.n	80015ea <reset_all_leds+0x6a>

			(leds + i) ->r[j] = LED_LOGICAL_ZERO;
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	011b      	lsls	r3, r3, #4
 80015a2:	461a      	mov	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4413      	add	r3, r2
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	3208      	adds	r2, #8
 80015ac:	2107      	movs	r1, #7
 80015ae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			(leds + i) ->g[j] = LED_LOGICAL_ZERO;
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	461a      	mov	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	2107      	movs	r1, #7
 80015c6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			(leds + i) ->b[j] = LED_LOGICAL_ZERO;
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4613      	mov	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	461a      	mov	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	3210      	adds	r2, #16
 80015de:	2107      	movs	r1, #7
 80015e0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(int j = 0; j < 8; j++){
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	3301      	adds	r3, #1
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2b07      	cmp	r3, #7
 80015ee:	ddd3      	ble.n	8001598 <reset_all_leds+0x18>
	for(int i = 0; i < number_leds; i++){
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	3301      	adds	r3, #1
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	887b      	ldrh	r3, [r7, #2]
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	dbc9      	blt.n	8001592 <reset_all_leds+0x12>
		}
	}
}
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <set_specific_led>:
	}
}


// Function to set specific color to a particular LED
void set_specific_led(neopixel_led* leds, uint16_t led_position, rgb_color* color){
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	460b      	mov	r3, r1
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	817b      	strh	r3, [r7, #10]

	// 7 - j is neccesary to reverse the order of the bits
	for(int j = 0; j < 8; j++){
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	e07b      	b.n	8001718 <set_specific_led+0x10c>

		if(color->r & (0x1 <<j)){
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	fa42 f303 	asr.w	r3, r2, r3
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00f      	beq.n	8001654 <set_specific_led+0x48>
			(leds + led_position) ->r[7 - j] = LED_LOGICAL_ONE;
 8001634:	897a      	ldrh	r2, [r7, #10]
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	011b      	lsls	r3, r3, #4
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	f1c2 0207 	rsb	r2, r2, #7
 800164a:	3208      	adds	r2, #8
 800164c:	210f      	movs	r1, #15
 800164e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001652:	e00e      	b.n	8001672 <set_specific_led+0x66>
		} else{
			(leds + led_position) ->r[7 - j] = LED_LOGICAL_ZERO;
 8001654:	897a      	ldrh	r2, [r7, #10]
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	461a      	mov	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	f1c2 0207 	rsb	r2, r2, #7
 800166a:	3208      	adds	r2, #8
 800166c:	2107      	movs	r1, #7
 800166e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		}

		if(color->g & (0x01 <<j)){
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	785b      	ldrb	r3, [r3, #1]
 8001676:	461a      	mov	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa42 f303 	asr.w	r3, r2, r3
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00e      	beq.n	80016a4 <set_specific_led+0x98>
			(leds + led_position) ->g[7 - j] = LED_LOGICAL_ONE;
 8001686:	897a      	ldrh	r2, [r7, #10]
 8001688:	4613      	mov	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4413      	add	r3, r2
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	461a      	mov	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4413      	add	r3, r2
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	f1c2 0207 	rsb	r2, r2, #7
 800169c:	210f      	movs	r1, #15
 800169e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80016a2:	e00d      	b.n	80016c0 <set_specific_led+0xb4>
		} else{
			(leds + led_position) ->g[7 - j] = LED_LOGICAL_ZERO;
 80016a4:	897a      	ldrh	r2, [r7, #10]
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	f1c2 0207 	rsb	r2, r2, #7
 80016ba:	2107      	movs	r1, #7
 80016bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		}

		if(color->b & (0x01 <<j)){
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	789b      	ldrb	r3, [r3, #2]
 80016c4:	461a      	mov	r2, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	fa42 f303 	asr.w	r3, r2, r3
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00f      	beq.n	80016f4 <set_specific_led+0xe8>
			(leds + led_position) ->b[7 - j] = LED_LOGICAL_ONE;
 80016d4:	897a      	ldrh	r2, [r7, #10]
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	461a      	mov	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4413      	add	r3, r2
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	f1c2 0207 	rsb	r2, r2, #7
 80016ea:	3210      	adds	r2, #16
 80016ec:	210f      	movs	r1, #15
 80016ee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80016f2:	e00e      	b.n	8001712 <set_specific_led+0x106>
		} else{
			(leds + led_position) ->b[7 - j] = LED_LOGICAL_ZERO;
 80016f4:	897a      	ldrh	r2, [r7, #10]
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	461a      	mov	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	f1c2 0207 	rsb	r2, r2, #7
 800170a:	3210      	adds	r2, #16
 800170c:	2107      	movs	r1, #7
 800170e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int j = 0; j < 8; j++){
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	2b07      	cmp	r3, #7
 800171c:	dd80      	ble.n	8001620 <set_specific_led+0x14>
		}
	}
}
 800171e:	bf00      	nop
 8001720:	bf00      	nop
 8001722:	371c      	adds	r7, #28
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <set_pattern_led>:

// Function to set a particular pattern to LEDs
void set_pattern_led(neopixel_led* leds, rgb_color *pattern, uint16_t number_leds){
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	4613      	mov	r3, r2
 8001738:	80fb      	strh	r3, [r7, #6]

	for(int i = 0; i < number_leds; i++){
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	e00e      	b.n	800175e <set_pattern_led+0x32>
		set_specific_led(leds, i, &pattern[i]);
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	b299      	uxth	r1, r3
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	4613      	mov	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	4413      	add	r3, r2
 8001750:	461a      	mov	r2, r3
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f7ff ff5a 	bl	800160c <set_specific_led>
	for(int i = 0; i < number_leds; i++){
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3301      	adds	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	429a      	cmp	r2, r3
 8001764:	dbec      	blt.n	8001740 <set_pattern_led+0x14>
	}
}
 8001766:	bf00      	nop
 8001768:	bf00      	nop
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <HAL_MspInit+0x4c>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177e:	4a0f      	ldr	r2, [pc, #60]	@ (80017bc <HAL_MspInit+0x4c>)
 8001780:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001784:	6453      	str	r3, [r2, #68]	@ 0x44
 8001786:	4b0d      	ldr	r3, [pc, #52]	@ (80017bc <HAL_MspInit+0x4c>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <HAL_MspInit+0x4c>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	4a08      	ldr	r2, [pc, #32]	@ (80017bc <HAL_MspInit+0x4c>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a2:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_MspInit+0x4c>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800

080017c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	@ 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a21      	ldr	r2, [pc, #132]	@ (8001864 <HAL_I2C_MspInit+0xa4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d13c      	bne.n	800185c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b20      	ldr	r3, [pc, #128]	@ (8001868 <HAL_I2C_MspInit+0xa8>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001868 <HAL_I2C_MspInit+0xa8>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001868 <HAL_I2C_MspInit+0xa8>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001804:	2312      	movs	r3, #18
 8001806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001810:	2304      	movs	r3, #4
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	4814      	ldr	r0, [pc, #80]	@ (800186c <HAL_I2C_MspInit+0xac>)
 800181c:	f000 ff9c 	bl	8002758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <HAL_I2C_MspInit+0xa8>)
 8001826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001828:	4a0f      	ldr	r2, [pc, #60]	@ (8001868 <HAL_I2C_MspInit+0xa8>)
 800182a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800182e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001830:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <HAL_I2C_MspInit+0xa8>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	201f      	movs	r0, #31
 8001842:	f000 fb42 	bl	8001eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001846:	201f      	movs	r0, #31
 8001848:	f000 fb5b 	bl	8001f02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	2020      	movs	r0, #32
 8001852:	f000 fb3a 	bl	8001eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001856:	2020      	movs	r0, #32
 8001858:	f000 fb53 	bl	8001f02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800185c:	bf00      	nop
 800185e:	3728      	adds	r7, #40	@ 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40005400 	.word	0x40005400
 8001868:	40023800 	.word	0x40023800
 800186c:	40020400 	.word	0x40020400

08001870 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a29      	ldr	r2, [pc, #164]	@ (8001924 <HAL_TIM_PWM_MspInit+0xb4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d14b      	bne.n	800191a <HAL_TIM_PWM_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b28      	ldr	r3, [pc, #160]	@ (8001928 <HAL_TIM_PWM_MspInit+0xb8>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	4a27      	ldr	r2, [pc, #156]	@ (8001928 <HAL_TIM_PWM_MspInit+0xb8>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	6413      	str	r3, [r2, #64]	@ 0x40
 8001892:	4b25      	ldr	r3, [pc, #148]	@ (8001928 <HAL_TIM_PWM_MspInit+0xb8>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 800189e:	4b23      	ldr	r3, [pc, #140]	@ (800192c <HAL_TIM_PWM_MspInit+0xbc>)
 80018a0:	4a23      	ldr	r2, [pc, #140]	@ (8001930 <HAL_TIM_PWM_MspInit+0xc0>)
 80018a2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80018a4:	4b21      	ldr	r3, [pc, #132]	@ (800192c <HAL_TIM_PWM_MspInit+0xbc>)
 80018a6:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80018aa:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018ac:	4b1f      	ldr	r3, [pc, #124]	@ (800192c <HAL_TIM_PWM_MspInit+0xbc>)
 80018ae:	2240      	movs	r2, #64	@ 0x40
 80018b0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b2:	4b1e      	ldr	r3, [pc, #120]	@ (800192c <HAL_TIM_PWM_MspInit+0xbc>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80018b8:	4b1c      	ldr	r3, [pc, #112]	@ (800192c <HAL_TIM_PWM_MspInit+0xbc>)
 80018ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018be:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018c0:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <HAL_TIM_PWM_MspInit+0xbc>)
 80018c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018c6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018c8:	4b18      	ldr	r3, [pc, #96]	@ (800192c <HAL_TIM_PWM_MspInit+0xbc>)
 80018ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018ce:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80018d0:	4b16      	ldr	r3, [pc, #88]	@ (800192c <HAL_TIM_PWM_MspInit+0xbc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <HAL_TIM_PWM_MspInit+0xbc>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018dc:	4b13      	ldr	r3, [pc, #76]	@ (800192c <HAL_TIM_PWM_MspInit+0xbc>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80018e2:	4812      	ldr	r0, [pc, #72]	@ (800192c <HAL_TIM_PWM_MspInit+0xbc>)
 80018e4:	f000 fb28 	bl	8001f38 <HAL_DMA_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 80018ee:	f7ff fe41 	bl	8001574 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a0d      	ldr	r2, [pc, #52]	@ (800192c <HAL_TIM_PWM_MspInit+0xbc>)
 80018f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80018f8:	4a0c      	ldr	r2, [pc, #48]	@ (800192c <HAL_TIM_PWM_MspInit+0xbc>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <HAL_TIM_PWM_MspInit+0xbc>)
 8001902:	639a      	str	r2, [r3, #56]	@ 0x38
 8001904:	4a09      	ldr	r2, [pc, #36]	@ (800192c <HAL_TIM_PWM_MspInit+0xbc>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	201d      	movs	r0, #29
 8001910:	f000 fadb 	bl	8001eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001914:	201d      	movs	r0, #29
 8001916:	f000 faf4 	bl	8001f02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40000400 	.word	0x40000400
 8001928:	40023800 	.word	0x40023800
 800192c:	200000e8 	.word	0x200000e8
 8001930:	40026070 	.word	0x40026070

08001934 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a12      	ldr	r2, [pc, #72]	@ (800199c <HAL_TIM_MspPostInit+0x68>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d11d      	bne.n	8001992 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <HAL_TIM_MspPostInit+0x6c>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a10      	ldr	r2, [pc, #64]	@ (80019a0 <HAL_TIM_MspPostInit+0x6c>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <HAL_TIM_MspPostInit+0x6c>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001972:	2340      	movs	r3, #64	@ 0x40
 8001974:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001982:	2302      	movs	r3, #2
 8001984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	4619      	mov	r1, r3
 800198c:	4805      	ldr	r0, [pc, #20]	@ (80019a4 <HAL_TIM_MspPostInit+0x70>)
 800198e:	f000 fee3 	bl	8002758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001992:	bf00      	nop
 8001994:	3720      	adds	r7, #32
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40000400 	.word	0x40000400
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020000 	.word	0x40020000

080019a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	@ 0x28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a3c <HAL_UART_MspInit+0x94>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d133      	bne.n	8001a32 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <HAL_UART_MspInit+0x98>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a40 <HAL_UART_MspInit+0x98>)
 80019d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80019d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019da:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <HAL_UART_MspInit+0x98>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <HAL_UART_MspInit+0x98>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	4a14      	ldr	r2, [pc, #80]	@ (8001a40 <HAL_UART_MspInit+0x98>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f6:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <HAL_UART_MspInit+0x98>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001a02:	2303      	movs	r3, #3
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a12:	2308      	movs	r3, #8
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4809      	ldr	r0, [pc, #36]	@ (8001a44 <HAL_UART_MspInit+0x9c>)
 8001a1e:	f000 fe9b 	bl	8002758 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	2034      	movs	r0, #52	@ 0x34
 8001a28:	f000 fa4f 	bl	8001eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001a2c:	2034      	movs	r0, #52	@ 0x34
 8001a2e:	f000 fa68 	bl	8001f02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8001a32:	bf00      	nop
 8001a34:	3728      	adds	r7, #40	@ 0x28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40004c00 	.word	0x40004c00
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020000 	.word	0x40020000

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <NMI_Handler+0x4>

08001a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <HardFault_Handler+0x4>

08001a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <MemManage_Handler+0x4>

08001a60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9e:	f000 f8f5 	bl	8001c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor1_Pin);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f001 f802 	bl	8002ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor2_Pin);
 8001ab8:	2002      	movs	r0, #2
 8001aba:	f000 fffb 	bl	8002ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor7_Pin);
 8001ac6:	2008      	movs	r0, #8
 8001ac8:	f000 fff4 	bl	8002ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor4_Pin);
 8001ad4:	2010      	movs	r0, #16
 8001ad6:	f000 ffed 	bl	8002ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001ae4:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <DMA1_Stream4_IRQHandler+0x10>)
 8001ae6:	f000 fbbf 	bl	8002268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200000e8 	.word	0x200000e8

08001af4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor6_Pin);
 8001af8:	2020      	movs	r0, #32
 8001afa:	f000 ffdb 	bl	8002ab4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(sensor8_Pin);
 8001afe:	2080      	movs	r0, #128	@ 0x80
 8001b00:	f000 ffd8 	bl	8002ab4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(sensor5_Pin);
 8001b04:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b08:	f000 ffd4 	bl	8002ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b14:	4802      	ldr	r0, [pc, #8]	@ (8001b20 <TIM3_IRQHandler+0x10>)
 8001b16:	f004 f8e5 	bl	8005ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200000a0 	.word	0x200000a0

08001b24 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b28:	4802      	ldr	r0, [pc, #8]	@ (8001b34 <I2C1_EV_IRQHandler+0x10>)
 8001b2a:	f001 fa33 	bl	8002f94 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000004c 	.word	0x2000004c

08001b38 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b3c:	4802      	ldr	r0, [pc, #8]	@ (8001b48 <I2C1_ER_IRQHandler+0x10>)
 8001b3e:	f001 fb7c 	bl	800323a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000004c 	.word	0x2000004c

08001b4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor3_Pin);
 8001b50:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001b54:	f000 ffae 	bl	8002ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001b60:	4802      	ldr	r0, [pc, #8]	@ (8001b6c <UART4_IRQHandler+0x10>)
 8001b62:	f004 ff77 	bl	8006a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000148 	.word	0x20000148

08001b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b74:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <SystemInit+0x20>)
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b7a:	4a05      	ldr	r2, [pc, #20]	@ (8001b90 <SystemInit+0x20>)
 8001b7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b98:	f7ff ffea 	bl	8001b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b9c:	480c      	ldr	r0, [pc, #48]	@ (8001bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b9e:	490d      	ldr	r1, [pc, #52]	@ (8001bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bb4:	4c0a      	ldr	r4, [pc, #40]	@ (8001be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f005 fe75 	bl	80078b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc6:	f7ff f87d 	bl	8000cc4 <main>
  bx  lr    
 8001bca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001bd8:	08007960 	.word	0x08007960
  ldr r2, =_sbss
 8001bdc:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001be0:	20000690 	.word	0x20000690

08001be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC_IRQHandler>
	...

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bec:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c28 <HAL_Init+0x40>)
 8001bf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8001c28 <HAL_Init+0x40>)
 8001bfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c04:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a07      	ldr	r2, [pc, #28]	@ (8001c28 <HAL_Init+0x40>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f000 f94f 	bl	8001eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c16:	200f      	movs	r0, #15
 8001c18:	f000 f808 	bl	8001c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1c:	f7ff fda8 	bl	8001770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023c00 	.word	0x40023c00

08001c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <HAL_InitTick+0x54>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_InitTick+0x58>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f967 	bl	8001f1e <HAL_SYSTICK_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00e      	b.n	8001c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d80a      	bhi.n	8001c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c60:	2200      	movs	r2, #0
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f000 f92f 	bl	8001eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c6c:	4a06      	ldr	r2, [pc, #24]	@ (8001c88 <HAL_InitTick+0x5c>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000014 	.word	0x20000014
 8001c84:	2000001c 	.word	0x2000001c
 8001c88:	20000018 	.word	0x20000018

08001c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c90:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_IncTick+0x20>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_IncTick+0x24>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a04      	ldr	r2, [pc, #16]	@ (8001cb0 <HAL_IncTick+0x24>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	2000001c 	.word	0x2000001c
 8001cb0:	2000068c 	.word	0x2000068c

08001cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	@ (8001cc8 <HAL_GetTick+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	2000068c 	.word	0x2000068c

08001ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd4:	f7ff ffee 	bl	8001cb4 <HAL_GetTick>
 8001cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce4:	d005      	beq.n	8001cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <HAL_Delay+0x44>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cf2:	bf00      	nop
 8001cf4:	f7ff ffde 	bl	8001cb4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d8f7      	bhi.n	8001cf4 <HAL_Delay+0x28>
  {
  }
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000001c 	.word	0x2000001c

08001d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d24:	4b0c      	ldr	r3, [pc, #48]	@ (8001d58 <__NVIC_SetPriorityGrouping+0x44>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d30:	4013      	ands	r3, r2
 8001d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d46:	4a04      	ldr	r2, [pc, #16]	@ (8001d58 <__NVIC_SetPriorityGrouping+0x44>)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	60d3      	str	r3, [r2, #12]
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d60:	4b04      	ldr	r3, [pc, #16]	@ (8001d74 <__NVIC_GetPriorityGrouping+0x18>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	f003 0307 	and.w	r3, r3, #7
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	db0b      	blt.n	8001da2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	f003 021f 	and.w	r2, r3, #31
 8001d90:	4907      	ldr	r1, [pc, #28]	@ (8001db0 <__NVIC_EnableIRQ+0x38>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	2001      	movs	r0, #1
 8001d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000e100 	.word	0xe000e100

08001db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	db0a      	blt.n	8001dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	490c      	ldr	r1, [pc, #48]	@ (8001e00 <__NVIC_SetPriority+0x4c>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	0112      	lsls	r2, r2, #4
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ddc:	e00a      	b.n	8001df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4908      	ldr	r1, [pc, #32]	@ (8001e04 <__NVIC_SetPriority+0x50>)
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	3b04      	subs	r3, #4
 8001dec:	0112      	lsls	r2, r2, #4
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	440b      	add	r3, r1
 8001df2:	761a      	strb	r2, [r3, #24]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000e100 	.word	0xe000e100
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	@ 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f1c3 0307 	rsb	r3, r3, #7
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	bf28      	it	cs
 8001e26:	2304      	movcs	r3, #4
 8001e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d902      	bls.n	8001e38 <NVIC_EncodePriority+0x30>
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3b03      	subs	r3, #3
 8001e36:	e000      	b.n	8001e3a <NVIC_EncodePriority+0x32>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	43d9      	mvns	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	4313      	orrs	r3, r2
         );
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	@ 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e80:	d301      	bcc.n	8001e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e82:	2301      	movs	r3, #1
 8001e84:	e00f      	b.n	8001ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e86:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <SysTick_Config+0x40>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8e:	210f      	movs	r1, #15
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295
 8001e94:	f7ff ff8e 	bl	8001db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e98:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <SysTick_Config+0x40>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9e:	4b04      	ldr	r3, [pc, #16]	@ (8001eb0 <SysTick_Config+0x40>)
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	e000e010 	.word	0xe000e010

08001eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff29 	bl	8001d14 <__NVIC_SetPriorityGrouping>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001edc:	f7ff ff3e 	bl	8001d5c <__NVIC_GetPriorityGrouping>
 8001ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	6978      	ldr	r0, [r7, #20]
 8001ee8:	f7ff ff8e 	bl	8001e08 <NVIC_EncodePriority>
 8001eec:	4602      	mov	r2, r0
 8001eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff5d 	bl	8001db4 <__NVIC_SetPriority>
}
 8001efa:	bf00      	nop
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff31 	bl	8001d78 <__NVIC_EnableIRQ>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ffa2 	bl	8001e70 <SysTick_Config>
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff feb6 	bl	8001cb4 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e099      	b.n	8002088 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f74:	e00f      	b.n	8001f96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f76:	f7ff fe9d 	bl	8001cb4 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d908      	bls.n	8001f96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2220      	movs	r2, #32
 8001f88:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e078      	b.n	8002088 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1e8      	bne.n	8001f76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	4b38      	ldr	r3, [pc, #224]	@ (8002090 <HAL_DMA_Init+0x158>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d107      	bne.n	8002000 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f023 0307 	bic.w	r3, r3, #7
 8002016:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	4313      	orrs	r3, r2
 8002020:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002026:	2b04      	cmp	r3, #4
 8002028:	d117      	bne.n	800205a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00e      	beq.n	800205a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fb0f 	bl	8002660 <DMA_CheckFifoParam>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2240      	movs	r2, #64	@ 0x40
 800204c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002056:	2301      	movs	r3, #1
 8002058:	e016      	b.n	8002088 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fac6 	bl	80025f4 <DMA_CalcBaseAndBitshift>
 8002068:	4603      	mov	r3, r0
 800206a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002070:	223f      	movs	r2, #63	@ 0x3f
 8002072:	409a      	lsls	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	f010803f 	.word	0xf010803f

08002094 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_DMA_Start_IT+0x26>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e040      	b.n	800213c <HAL_DMA_Start_IT+0xa8>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d12f      	bne.n	800212e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2202      	movs	r2, #2
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fa58 	bl	8002598 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ec:	223f      	movs	r2, #63	@ 0x3f
 80020ee:	409a      	lsls	r2, r3
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0216 	orr.w	r2, r2, #22
 8002102:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	2b00      	cmp	r3, #0
 800210a:	d007      	beq.n	800211c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0208 	orr.w	r2, r2, #8
 800211a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	e005      	b.n	800213a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002136:	2302      	movs	r3, #2
 8002138:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800213a:	7dfb      	ldrb	r3, [r7, #23]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002150:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002152:	f7ff fdaf 	bl	8001cb4 <HAL_GetTick>
 8002156:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d008      	beq.n	8002176 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2280      	movs	r2, #128	@ 0x80
 8002168:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e052      	b.n	800221c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0216 	bic.w	r2, r2, #22
 8002184:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002194:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d103      	bne.n	80021a6 <HAL_DMA_Abort+0x62>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d007      	beq.n	80021b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0208 	bic.w	r2, r2, #8
 80021b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0201 	bic.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c6:	e013      	b.n	80021f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021c8:	f7ff fd74 	bl	8001cb4 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d90c      	bls.n	80021f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2220      	movs	r2, #32
 80021da:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2203      	movs	r2, #3
 80021e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e015      	b.n	800221c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1e4      	bne.n	80021c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002202:	223f      	movs	r2, #63	@ 0x3f
 8002204:	409a      	lsls	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d004      	beq.n	8002242 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2280      	movs	r2, #128	@ 0x80
 800223c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e00c      	b.n	800225c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2205      	movs	r2, #5
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0201 	bic.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002274:	4b8e      	ldr	r3, [pc, #568]	@ (80024b0 <HAL_DMA_IRQHandler+0x248>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a8e      	ldr	r2, [pc, #568]	@ (80024b4 <HAL_DMA_IRQHandler+0x24c>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	0a9b      	lsrs	r3, r3, #10
 8002280:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002286:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002292:	2208      	movs	r2, #8
 8002294:	409a      	lsls	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d01a      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d013      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0204 	bic.w	r2, r2, #4
 80022ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c0:	2208      	movs	r2, #8
 80022c2:	409a      	lsls	r2, r3
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022cc:	f043 0201 	orr.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d8:	2201      	movs	r2, #1
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d012      	beq.n	800230a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00b      	beq.n	800230a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f6:	2201      	movs	r2, #1
 80022f8:	409a      	lsls	r2, r3
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002302:	f043 0202 	orr.w	r2, r3, #2
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230e:	2204      	movs	r2, #4
 8002310:	409a      	lsls	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4013      	ands	r3, r2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d012      	beq.n	8002340 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00b      	beq.n	8002340 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	2204      	movs	r2, #4
 800232e:	409a      	lsls	r2, r3
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002338:	f043 0204 	orr.w	r2, r3, #4
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002344:	2210      	movs	r2, #16
 8002346:	409a      	lsls	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d043      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d03c      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002362:	2210      	movs	r2, #16
 8002364:	409a      	lsls	r2, r3
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d018      	beq.n	80023aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d108      	bne.n	8002398 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	2b00      	cmp	r3, #0
 800238c:	d024      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	4798      	blx	r3
 8002396:	e01f      	b.n	80023d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01b      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
 80023a8:	e016      	b.n	80023d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d107      	bne.n	80023c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0208 	bic.w	r2, r2, #8
 80023c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023dc:	2220      	movs	r2, #32
 80023de:	409a      	lsls	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 808f 	beq.w	8002508 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 8087 	beq.w	8002508 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fe:	2220      	movs	r2, #32
 8002400:	409a      	lsls	r2, r3
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b05      	cmp	r3, #5
 8002410:	d136      	bne.n	8002480 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0216 	bic.w	r2, r2, #22
 8002420:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695a      	ldr	r2, [r3, #20]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002430:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	2b00      	cmp	r3, #0
 8002438:	d103      	bne.n	8002442 <HAL_DMA_IRQHandler+0x1da>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800243e:	2b00      	cmp	r3, #0
 8002440:	d007      	beq.n	8002452 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0208 	bic.w	r2, r2, #8
 8002450:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002456:	223f      	movs	r2, #63	@ 0x3f
 8002458:	409a      	lsls	r2, r3
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002472:	2b00      	cmp	r3, #0
 8002474:	d07e      	beq.n	8002574 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	4798      	blx	r3
        }
        return;
 800247e:	e079      	b.n	8002574 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d01d      	beq.n	80024ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10d      	bne.n	80024b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d031      	beq.n	8002508 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
 80024ac:	e02c      	b.n	8002508 <HAL_DMA_IRQHandler+0x2a0>
 80024ae:	bf00      	nop
 80024b0:	20000014 	.word	0x20000014
 80024b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d023      	beq.n	8002508 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	4798      	blx	r3
 80024c8:	e01e      	b.n	8002508 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10f      	bne.n	80024f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0210 	bic.w	r2, r2, #16
 80024e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800250c:	2b00      	cmp	r3, #0
 800250e:	d032      	beq.n	8002576 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d022      	beq.n	8002562 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2205      	movs	r2, #5
 8002520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0201 	bic.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	3301      	adds	r3, #1
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	429a      	cmp	r2, r3
 800253e:	d307      	bcc.n	8002550 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f2      	bne.n	8002534 <HAL_DMA_IRQHandler+0x2cc>
 800254e:	e000      	b.n	8002552 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002550:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	4798      	blx	r3
 8002572:	e000      	b.n	8002576 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002574:	bf00      	nop
    }
  }
}
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800258a:	b2db      	uxtb	r3, r3
}
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80025b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b40      	cmp	r3, #64	@ 0x40
 80025c4:	d108      	bne.n	80025d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025d6:	e007      	b.n	80025e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	60da      	str	r2, [r3, #12]
}
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	3b10      	subs	r3, #16
 8002604:	4a14      	ldr	r2, [pc, #80]	@ (8002658 <DMA_CalcBaseAndBitshift+0x64>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800260e:	4a13      	ldr	r2, [pc, #76]	@ (800265c <DMA_CalcBaseAndBitshift+0x68>)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4413      	add	r3, r2
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b03      	cmp	r3, #3
 8002620:	d909      	bls.n	8002636 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800262a:	f023 0303 	bic.w	r3, r3, #3
 800262e:	1d1a      	adds	r2, r3, #4
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	659a      	str	r2, [r3, #88]	@ 0x58
 8002634:	e007      	b.n	8002646 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800263e:	f023 0303 	bic.w	r3, r3, #3
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	aaaaaaab 	.word	0xaaaaaaab
 800265c:	08007948 	.word	0x08007948

08002660 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002670:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d11f      	bne.n	80026ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d856      	bhi.n	800272e <DMA_CheckFifoParam+0xce>
 8002680:	a201      	add	r2, pc, #4	@ (adr r2, 8002688 <DMA_CheckFifoParam+0x28>)
 8002682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002686:	bf00      	nop
 8002688:	08002699 	.word	0x08002699
 800268c:	080026ab 	.word	0x080026ab
 8002690:	08002699 	.word	0x08002699
 8002694:	0800272f 	.word	0x0800272f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d046      	beq.n	8002732 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a8:	e043      	b.n	8002732 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026b2:	d140      	bne.n	8002736 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b8:	e03d      	b.n	8002736 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026c2:	d121      	bne.n	8002708 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d837      	bhi.n	800273a <DMA_CheckFifoParam+0xda>
 80026ca:	a201      	add	r2, pc, #4	@ (adr r2, 80026d0 <DMA_CheckFifoParam+0x70>)
 80026cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d0:	080026e1 	.word	0x080026e1
 80026d4:	080026e7 	.word	0x080026e7
 80026d8:	080026e1 	.word	0x080026e1
 80026dc:	080026f9 	.word	0x080026f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
      break;
 80026e4:	e030      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d025      	beq.n	800273e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f6:	e022      	b.n	800273e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002700:	d11f      	bne.n	8002742 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002706:	e01c      	b.n	8002742 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d903      	bls.n	8002716 <DMA_CheckFifoParam+0xb6>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b03      	cmp	r3, #3
 8002712:	d003      	beq.n	800271c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002714:	e018      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
      break;
 800271a:	e015      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002720:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00e      	beq.n	8002746 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
      break;
 800272c:	e00b      	b.n	8002746 <DMA_CheckFifoParam+0xe6>
      break;
 800272e:	bf00      	nop
 8002730:	e00a      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      break;
 8002732:	bf00      	nop
 8002734:	e008      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      break;
 8002736:	bf00      	nop
 8002738:	e006      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      break;
 800273a:	bf00      	nop
 800273c:	e004      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      break;
 800273e:	bf00      	nop
 8002740:	e002      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      break;   
 8002742:	bf00      	nop
 8002744:	e000      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      break;
 8002746:	bf00      	nop
    }
  } 
  
  return status; 
 8002748:	7bfb      	ldrb	r3, [r7, #15]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop

08002758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	@ 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	e165      	b.n	8002a40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002774:	2201      	movs	r2, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	429a      	cmp	r2, r3
 800278e:	f040 8154 	bne.w	8002a3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d005      	beq.n	80027aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d130      	bne.n	800280c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	2203      	movs	r2, #3
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e0:	2201      	movs	r2, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 0201 	and.w	r2, r3, #1
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b03      	cmp	r3, #3
 8002816:	d017      	beq.n	8002848 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	2203      	movs	r2, #3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d123      	bne.n	800289c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	08da      	lsrs	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3208      	adds	r2, #8
 800285c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	220f      	movs	r2, #15
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	08da      	lsrs	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3208      	adds	r2, #8
 8002896:	69b9      	ldr	r1, [r7, #24]
 8002898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0203 	and.w	r2, r3, #3
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80ae 	beq.w	8002a3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002a58 <HAL_GPIO_Init+0x300>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002a58 <HAL_GPIO_Init+0x300>)
 80028e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002a58 <HAL_GPIO_Init+0x300>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028fa:	4a58      	ldr	r2, [pc, #352]	@ (8002a5c <HAL_GPIO_Init+0x304>)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	3302      	adds	r3, #2
 8002902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	220f      	movs	r2, #15
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4f      	ldr	r2, [pc, #316]	@ (8002a60 <HAL_GPIO_Init+0x308>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d025      	beq.n	8002972 <HAL_GPIO_Init+0x21a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4e      	ldr	r2, [pc, #312]	@ (8002a64 <HAL_GPIO_Init+0x30c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01f      	beq.n	800296e <HAL_GPIO_Init+0x216>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4d      	ldr	r2, [pc, #308]	@ (8002a68 <HAL_GPIO_Init+0x310>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d019      	beq.n	800296a <HAL_GPIO_Init+0x212>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4c      	ldr	r2, [pc, #304]	@ (8002a6c <HAL_GPIO_Init+0x314>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <HAL_GPIO_Init+0x20e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4b      	ldr	r2, [pc, #300]	@ (8002a70 <HAL_GPIO_Init+0x318>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00d      	beq.n	8002962 <HAL_GPIO_Init+0x20a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a4a      	ldr	r2, [pc, #296]	@ (8002a74 <HAL_GPIO_Init+0x31c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <HAL_GPIO_Init+0x206>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a49      	ldr	r2, [pc, #292]	@ (8002a78 <HAL_GPIO_Init+0x320>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d101      	bne.n	800295a <HAL_GPIO_Init+0x202>
 8002956:	2306      	movs	r3, #6
 8002958:	e00c      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 800295a:	2307      	movs	r3, #7
 800295c:	e00a      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 800295e:	2305      	movs	r3, #5
 8002960:	e008      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 8002962:	2304      	movs	r3, #4
 8002964:	e006      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 8002966:	2303      	movs	r3, #3
 8002968:	e004      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 800296a:	2302      	movs	r3, #2
 800296c:	e002      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 8002972:	2300      	movs	r3, #0
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	f002 0203 	and.w	r2, r2, #3
 800297a:	0092      	lsls	r2, r2, #2
 800297c:	4093      	lsls	r3, r2
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002984:	4935      	ldr	r1, [pc, #212]	@ (8002a5c <HAL_GPIO_Init+0x304>)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	3302      	adds	r3, #2
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002992:	4b3a      	ldr	r3, [pc, #232]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029b6:	4a31      	ldr	r2, [pc, #196]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029bc:	4b2f      	ldr	r3, [pc, #188]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e0:	4a26      	ldr	r2, [pc, #152]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029e6:	4b25      	ldr	r3, [pc, #148]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a10:	4b1a      	ldr	r3, [pc, #104]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a34:	4a11      	ldr	r2, [pc, #68]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b0f      	cmp	r3, #15
 8002a44:	f67f ae96 	bls.w	8002774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3724      	adds	r7, #36	@ 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40013800 	.word	0x40013800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40020400 	.word	0x40020400
 8002a68:	40020800 	.word	0x40020800
 8002a6c:	40020c00 	.word	0x40020c00
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40021400 	.word	0x40021400
 8002a78:	40021800 	.word	0x40021800
 8002a7c:	40013c00 	.word	0x40013c00

08002a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a90:	787b      	ldrb	r3, [r7, #1]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a96:	887a      	ldrh	r2, [r7, #2]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a9c:	e003      	b.n	8002aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a9e:	887b      	ldrh	r3, [r7, #2]
 8002aa0:	041a      	lsls	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	619a      	str	r2, [r3, #24]
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002abe:	4b08      	ldr	r3, [pc, #32]	@ (8002ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d006      	beq.n	8002ad8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aca:	4a05      	ldr	r2, [pc, #20]	@ (8002ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd fd16 	bl	8000504 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40013c00 	.word	0x40013c00

08002ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e12b      	b.n	8002d4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe fe58 	bl	80017c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2224      	movs	r2, #36	@ 0x24
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0201 	bic.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b48:	f002 fa44 	bl	8004fd4 <HAL_RCC_GetPCLK1Freq>
 8002b4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4a81      	ldr	r2, [pc, #516]	@ (8002d58 <HAL_I2C_Init+0x274>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d807      	bhi.n	8002b68 <HAL_I2C_Init+0x84>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4a80      	ldr	r2, [pc, #512]	@ (8002d5c <HAL_I2C_Init+0x278>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	bf94      	ite	ls
 8002b60:	2301      	movls	r3, #1
 8002b62:	2300      	movhi	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e006      	b.n	8002b76 <HAL_I2C_Init+0x92>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a7d      	ldr	r2, [pc, #500]	@ (8002d60 <HAL_I2C_Init+0x27c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	bf94      	ite	ls
 8002b70:	2301      	movls	r3, #1
 8002b72:	2300      	movhi	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0e7      	b.n	8002d4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a78      	ldr	r2, [pc, #480]	@ (8002d64 <HAL_I2C_Init+0x280>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	0c9b      	lsrs	r3, r3, #18
 8002b88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4a6a      	ldr	r2, [pc, #424]	@ (8002d58 <HAL_I2C_Init+0x274>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d802      	bhi.n	8002bb8 <HAL_I2C_Init+0xd4>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	e009      	b.n	8002bcc <HAL_I2C_Init+0xe8>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002bbe:	fb02 f303 	mul.w	r3, r2, r3
 8002bc2:	4a69      	ldr	r2, [pc, #420]	@ (8002d68 <HAL_I2C_Init+0x284>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	3301      	adds	r3, #1
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002bde:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	495c      	ldr	r1, [pc, #368]	@ (8002d58 <HAL_I2C_Init+0x274>)
 8002be8:	428b      	cmp	r3, r1
 8002bea:	d819      	bhi.n	8002c20 <HAL_I2C_Init+0x13c>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1e59      	subs	r1, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bfa:	1c59      	adds	r1, r3, #1
 8002bfc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c00:	400b      	ands	r3, r1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_I2C_Init+0x138>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1e59      	subs	r1, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c14:	3301      	adds	r3, #1
 8002c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1a:	e051      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	e04f      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d111      	bne.n	8002c4c <HAL_I2C_Init+0x168>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1e58      	subs	r0, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	440b      	add	r3, r1
 8002c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e012      	b.n	8002c72 <HAL_I2C_Init+0x18e>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1e58      	subs	r0, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	0099      	lsls	r1, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c62:	3301      	adds	r3, #1
 8002c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Init+0x196>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e022      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10e      	bne.n	8002ca0 <HAL_I2C_Init+0x1bc>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1e58      	subs	r0, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6859      	ldr	r1, [r3, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	440b      	add	r3, r1
 8002c90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c9e:	e00f      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1e58      	subs	r0, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6859      	ldr	r1, [r3, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	0099      	lsls	r1, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	6809      	ldr	r1, [r1, #0]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002cee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6911      	ldr	r1, [r2, #16]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68d2      	ldr	r2, [r2, #12]
 8002cfa:	4311      	orrs	r1, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	000186a0 	.word	0x000186a0
 8002d5c:	001e847f 	.word	0x001e847f
 8002d60:	003d08ff 	.word	0x003d08ff
 8002d64:	431bde83 	.word	0x431bde83
 8002d68:	10624dd3 	.word	0x10624dd3

08002d6c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7e:	2b80      	cmp	r3, #128	@ 0x80
 8002d80:	d103      	bne.n	8002d8a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2200      	movs	r2, #0
 8002d88:	611a      	str	r2, [r3, #16]
  }
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	461a      	mov	r2, r3
 8002da4:	460b      	mov	r3, r1
 8002da6:	817b      	strh	r3, [r7, #10]
 8002da8:	4613      	mov	r3, r2
 8002daa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dac:	f7fe ff82 	bl	8001cb4 <HAL_GetTick>
 8002db0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	f040 80e0 	bne.w	8002f80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	2319      	movs	r3, #25
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	4970      	ldr	r1, [pc, #448]	@ (8002f8c <HAL_I2C_Master_Transmit+0x1f4>)
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f001 fdea 	bl	80049a4 <I2C_WaitOnFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e0d3      	b.n	8002f82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_I2C_Master_Transmit+0x50>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e0cc      	b.n	8002f82 <HAL_I2C_Master_Transmit+0x1ea>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d007      	beq.n	8002e0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 0201 	orr.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2221      	movs	r2, #33	@ 0x21
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2210      	movs	r2, #16
 8002e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	893a      	ldrh	r2, [r7, #8]
 8002e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4a50      	ldr	r2, [pc, #320]	@ (8002f90 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e50:	8979      	ldrh	r1, [r7, #10]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	6a3a      	ldr	r2, [r7, #32]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f001 fc7a 	bl	8004750 <I2C_MasterRequestWrite>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e08d      	b.n	8002f82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e66:	2300      	movs	r3, #0
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e7c:	e066      	b.n	8002f4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	6a39      	ldr	r1, [r7, #32]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f001 fea8 	bl	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00d      	beq.n	8002eaa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d107      	bne.n	8002ea6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e06b      	b.n	8002f82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eae:	781a      	ldrb	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d11b      	bne.n	8002f20 <HAL_I2C_Master_Transmit+0x188>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d017      	beq.n	8002f20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	781a      	ldrb	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	6a39      	ldr	r1, [r7, #32]
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f001 fe9f 	bl	8004c68 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00d      	beq.n	8002f4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d107      	bne.n	8002f48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e01a      	b.n	8002f82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d194      	bne.n	8002e7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	e000      	b.n	8002f82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f80:	2302      	movs	r3, #2
  }
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	00100002 	.word	0x00100002
 8002f90:	ffff0000 	.word	0xffff0000

08002f94 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fb4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fbc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	2b10      	cmp	r3, #16
 8002fc2:	d003      	beq.n	8002fcc <HAL_I2C_EV_IRQHandler+0x38>
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	2b40      	cmp	r3, #64	@ 0x40
 8002fc8:	f040 80b1 	bne.w	800312e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10d      	bne.n	8003002 <HAL_I2C_EV_IRQHandler+0x6e>
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002fec:	d003      	beq.n	8002ff6 <HAL_I2C_EV_IRQHandler+0x62>
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002ff4:	d101      	bne.n	8002ffa <HAL_I2C_EV_IRQHandler+0x66>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_I2C_EV_IRQHandler+0x68>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	f000 8114 	beq.w	800322a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <HAL_I2C_EV_IRQHandler+0x90>
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003012:	2b00      	cmp	r3, #0
 8003014:	d006      	beq.n	8003024 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f001 fecf 	bl	8004dba <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fd7a 	bl	8003b16 <I2C_Master_SB>
 8003022:	e083      	b.n	800312c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <HAL_I2C_EV_IRQHandler+0xac>
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fdf2 	bl	8003c22 <I2C_Master_ADD10>
 800303e:	e075      	b.n	800312c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <HAL_I2C_EV_IRQHandler+0xc8>
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fe0e 	bl	8003c76 <I2C_Master_ADDR>
 800305a:	e067      	b.n	800312c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d036      	beq.n	80030d4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003070:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003074:	f000 80db 	beq.w	800322e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00d      	beq.n	800309e <HAL_I2C_EV_IRQHandler+0x10a>
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_I2C_EV_IRQHandler+0x10a>
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	d103      	bne.n	800309e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f9d6 	bl	8003448 <I2C_MasterTransmit_TXE>
 800309c:	e046      	b.n	800312c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 80c2 	beq.w	800322e <HAL_I2C_EV_IRQHandler+0x29a>
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80bc 	beq.w	800322e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80030b6:	7bbb      	ldrb	r3, [r7, #14]
 80030b8:	2b21      	cmp	r3, #33	@ 0x21
 80030ba:	d103      	bne.n	80030c4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fa5f 	bl	8003580 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030c2:	e0b4      	b.n	800322e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	2b40      	cmp	r3, #64	@ 0x40
 80030c8:	f040 80b1 	bne.w	800322e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 facd 	bl	800366c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030d2:	e0ac      	b.n	800322e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030e2:	f000 80a4 	beq.w	800322e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00d      	beq.n	800310c <HAL_I2C_EV_IRQHandler+0x178>
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d008      	beq.n	800310c <HAL_I2C_EV_IRQHandler+0x178>
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d103      	bne.n	800310c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fb49 	bl	800379c <I2C_MasterReceive_RXNE>
 800310a:	e00f      	b.n	800312c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 808b 	beq.w	800322e <HAL_I2C_EV_IRQHandler+0x29a>
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8085 	beq.w	800322e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 fc01 	bl	800392c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800312a:	e080      	b.n	800322e <HAL_I2C_EV_IRQHandler+0x29a>
 800312c:	e07f      	b.n	800322e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d004      	beq.n	8003140 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	61fb      	str	r3, [r7, #28]
 800313e:	e007      	b.n	8003150 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d011      	beq.n	800317e <HAL_I2C_EV_IRQHandler+0x1ea>
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00c      	beq.n	800317e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003174:	69b9      	ldr	r1, [r7, #24]
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 ffcc 	bl	8004114 <I2C_Slave_ADDR>
 800317c:	e05a      	b.n	8003234 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_I2C_EV_IRQHandler+0x206>
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f001 f806 	bl	80041a4 <I2C_Slave_STOPF>
 8003198:	e04c      	b.n	8003234 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800319a:	7bbb      	ldrb	r3, [r7, #14]
 800319c:	2b21      	cmp	r3, #33	@ 0x21
 800319e:	d002      	beq.n	80031a6 <HAL_I2C_EV_IRQHandler+0x212>
 80031a0:	7bbb      	ldrb	r3, [r7, #14]
 80031a2:	2b29      	cmp	r3, #41	@ 0x29
 80031a4:	d120      	bne.n	80031e8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00d      	beq.n	80031cc <HAL_I2C_EV_IRQHandler+0x238>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <HAL_I2C_EV_IRQHandler+0x238>
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d103      	bne.n	80031cc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fee7 	bl	8003f98 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031ca:	e032      	b.n	8003232 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d02d      	beq.n	8003232 <HAL_I2C_EV_IRQHandler+0x29e>
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d028      	beq.n	8003232 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 ff16 	bl	8004012 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031e6:	e024      	b.n	8003232 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00d      	beq.n	800320e <HAL_I2C_EV_IRQHandler+0x27a>
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_I2C_EV_IRQHandler+0x27a>
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	d103      	bne.n	800320e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 ff24 	bl	8004054 <I2C_SlaveReceive_RXNE>
 800320c:	e012      	b.n	8003234 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00d      	beq.n	8003234 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 ff54 	bl	80040d0 <I2C_SlaveReceive_BTF>
 8003228:	e004      	b.n	8003234 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800322a:	bf00      	nop
 800322c:	e002      	b.n	8003234 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800322e:	bf00      	nop
 8003230:	e000      	b.n	8003234 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003232:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b08a      	sub	sp, #40	@ 0x28
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003252:	2300      	movs	r3, #0
 8003254:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800325c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00d      	beq.n	8003284 <HAL_I2C_ER_IRQHandler+0x4a>
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003282:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00d      	beq.n	80032aa <HAL_I2C_ER_IRQHandler+0x70>
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329a:	f043 0302 	orr.w	r3, r3, #2
 800329e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80032a8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d03e      	beq.n	8003332 <HAL_I2C_ER_IRQHandler+0xf8>
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d039      	beq.n	8003332 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80032be:	7efb      	ldrb	r3, [r7, #27]
 80032c0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80032d8:	7ebb      	ldrb	r3, [r7, #26]
 80032da:	2b20      	cmp	r3, #32
 80032dc:	d112      	bne.n	8003304 <HAL_I2C_ER_IRQHandler+0xca>
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10f      	bne.n	8003304 <HAL_I2C_ER_IRQHandler+0xca>
 80032e4:	7cfb      	ldrb	r3, [r7, #19]
 80032e6:	2b21      	cmp	r3, #33	@ 0x21
 80032e8:	d008      	beq.n	80032fc <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80032ea:	7cfb      	ldrb	r3, [r7, #19]
 80032ec:	2b29      	cmp	r3, #41	@ 0x29
 80032ee:	d005      	beq.n	80032fc <HAL_I2C_ER_IRQHandler+0xc2>
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	2b28      	cmp	r3, #40	@ 0x28
 80032f4:	d106      	bne.n	8003304 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b21      	cmp	r3, #33	@ 0x21
 80032fa:	d103      	bne.n	8003304 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f001 f881 	bl	8004404 <I2C_Slave_AF>
 8003302:	e016      	b.n	8003332 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800330c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800330e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003310:	f043 0304 	orr.w	r3, r3, #4
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003316:	7efb      	ldrb	r3, [r7, #27]
 8003318:	2b10      	cmp	r3, #16
 800331a:	d002      	beq.n	8003322 <HAL_I2C_ER_IRQHandler+0xe8>
 800331c:	7efb      	ldrb	r3, [r7, #27]
 800331e:	2b40      	cmp	r3, #64	@ 0x40
 8003320:	d107      	bne.n	8003332 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003330:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00d      	beq.n	8003358 <HAL_I2C_ER_IRQHandler+0x11e>
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d008      	beq.n	8003358 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	f043 0308 	orr.w	r3, r3, #8
 800334c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003356:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	2b00      	cmp	r3, #0
 800335c:	d008      	beq.n	8003370 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f001 f8be 	bl	80044ec <I2C_ITError>
  }
}
 8003370:	bf00      	nop
 8003372:	3728      	adds	r7, #40	@ 0x28
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	70fb      	strb	r3, [r7, #3]
 80033d4:	4613      	mov	r3, r2
 80033d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003456:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800345e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346a:	2b00      	cmp	r3, #0
 800346c:	d150      	bne.n	8003510 <I2C_MasterTransmit_TXE+0xc8>
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	2b21      	cmp	r3, #33	@ 0x21
 8003472:	d14d      	bne.n	8003510 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b08      	cmp	r3, #8
 8003478:	d01d      	beq.n	80034b6 <I2C_MasterTransmit_TXE+0x6e>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b20      	cmp	r3, #32
 800347e:	d01a      	beq.n	80034b6 <I2C_MasterTransmit_TXE+0x6e>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003486:	d016      	beq.n	80034b6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003496:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2211      	movs	r2, #17
 800349c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff ff62 	bl	8003378 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034b4:	e060      	b.n	8003578 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034c4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b40      	cmp	r3, #64	@ 0x40
 80034ee:	d107      	bne.n	8003500 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff ff7d 	bl	80033f8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034fe:	e03b      	b.n	8003578 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff ff35 	bl	8003378 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800350e:	e033      	b.n	8003578 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	2b21      	cmp	r3, #33	@ 0x21
 8003514:	d005      	beq.n	8003522 <I2C_MasterTransmit_TXE+0xda>
 8003516:	7bbb      	ldrb	r3, [r7, #14]
 8003518:	2b40      	cmp	r3, #64	@ 0x40
 800351a:	d12d      	bne.n	8003578 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	2b22      	cmp	r3, #34	@ 0x22
 8003520:	d12a      	bne.n	8003578 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d108      	bne.n	800353e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800353a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800353c:	e01c      	b.n	8003578 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b40      	cmp	r3, #64	@ 0x40
 8003548:	d103      	bne.n	8003552 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f88e 	bl	800366c <I2C_MemoryTransmit_TXE_BTF>
}
 8003550:	e012      	b.n	8003578 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	781a      	ldrb	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003576:	e7ff      	b.n	8003578 <I2C_MasterTransmit_TXE+0x130>
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b21      	cmp	r3, #33	@ 0x21
 8003598:	d164      	bne.n	8003664 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d012      	beq.n	80035ca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	781a      	ldrb	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80035c8:	e04c      	b.n	8003664 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d01d      	beq.n	800360c <I2C_MasterTransmit_BTF+0x8c>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d01a      	beq.n	800360c <I2C_MasterTransmit_BTF+0x8c>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035dc:	d016      	beq.n	800360c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80035ec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2211      	movs	r2, #17
 80035f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff feb7 	bl	8003378 <HAL_I2C_MasterTxCpltCallback>
}
 800360a:	e02b      	b.n	8003664 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800361a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800362a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b40      	cmp	r3, #64	@ 0x40
 8003644:	d107      	bne.n	8003656 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff fed2 	bl	80033f8 <HAL_I2C_MemTxCpltCallback>
}
 8003654:	e006      	b.n	8003664 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff fe8a 	bl	8003378 <HAL_I2C_MasterTxCpltCallback>
}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800367a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003680:	2b00      	cmp	r3, #0
 8003682:	d11d      	bne.n	80036c0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d10b      	bne.n	80036a4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003690:	b2da      	uxtb	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800369c:	1c9a      	adds	r2, r3, #2
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80036a2:	e077      	b.n	8003794 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	121b      	asrs	r3, r3, #8
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80036be:	e069      	b.n	8003794 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d10b      	bne.n	80036e0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80036de:	e059      	b.n	8003794 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d152      	bne.n	800378e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	2b22      	cmp	r3, #34	@ 0x22
 80036ec:	d10d      	bne.n	800370a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036fc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003708:	e044      	b.n	8003794 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d015      	beq.n	8003740 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	2b21      	cmp	r3, #33	@ 0x21
 8003718:	d112      	bne.n	8003740 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	781a      	ldrb	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800373e:	e029      	b.n	8003794 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d124      	bne.n	8003794 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	2b21      	cmp	r3, #33	@ 0x21
 800374e:	d121      	bne.n	8003794 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800375e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800376e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff fe36 	bl	80033f8 <HAL_I2C_MemTxCpltCallback>
}
 800378c:	e002      	b.n	8003794 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff faec 	bl	8002d6c <I2C_Flush_DR>
}
 8003794:	bf00      	nop
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b22      	cmp	r3, #34	@ 0x22
 80037ae:	f040 80b9 	bne.w	8003924 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d921      	bls.n	800380a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	f040 8096 	bne.w	8003924 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003806:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003808:	e08c      	b.n	8003924 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380e:	2b02      	cmp	r3, #2
 8003810:	d07f      	beq.n	8003912 <I2C_MasterReceive_RXNE+0x176>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d002      	beq.n	800381e <I2C_MasterReceive_RXNE+0x82>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d179      	bne.n	8003912 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f001 fa6a 	bl	8004cf8 <I2C_WaitOnSTOPRequestThroughIT>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d14c      	bne.n	80038c4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003838:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003848:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b40      	cmp	r3, #64	@ 0x40
 8003882:	d10a      	bne.n	800389a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff fdba 	bl	800340c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003898:	e044      	b.n	8003924 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d002      	beq.n	80038ae <I2C_MasterReceive_RXNE+0x112>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	d103      	bne.n	80038b6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80038b4:	e002      	b.n	80038bc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2212      	movs	r2, #18
 80038ba:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff fd65 	bl	800338c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038c2:	e02f      	b.n	8003924 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff fd88 	bl	8003420 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003910:	e008      	b.n	8003924 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003920:	605a      	str	r2, [r3, #4]
}
 8003922:	e7ff      	b.n	8003924 <I2C_MasterReceive_RXNE+0x188>
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003938:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b04      	cmp	r3, #4
 8003942:	d11b      	bne.n	800397c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003952:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800397a:	e0c8      	b.n	8003b0e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b03      	cmp	r3, #3
 8003984:	d129      	bne.n	80039da <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003994:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b04      	cmp	r3, #4
 800399a:	d00a      	beq.n	80039b2 <I2C_MasterReceive_BTF+0x86>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d007      	beq.n	80039b2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039b0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80039d8:	e099      	b.n	8003b0e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	f040 8081 	bne.w	8003ae8 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d002      	beq.n	80039f2 <I2C_MasterReceive_BTF+0xc6>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b10      	cmp	r3, #16
 80039f0:	d108      	bne.n	8003a04 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	e019      	b.n	8003a38 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d002      	beq.n	8003a10 <I2C_MasterReceive_BTF+0xe4>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d108      	bne.n	8003a22 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	e00a      	b.n	8003a38 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	d007      	beq.n	8003a38 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691a      	ldr	r2, [r3, #16]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003a92:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b40      	cmp	r3, #64	@ 0x40
 8003aa6:	d10a      	bne.n	8003abe <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff fca8 	bl	800340c <HAL_I2C_MemRxCpltCallback>
}
 8003abc:	e027      	b.n	8003b0e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d002      	beq.n	8003ad2 <I2C_MasterReceive_BTF+0x1a6>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d103      	bne.n	8003ada <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ad8:	e002      	b.n	8003ae0 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2212      	movs	r2, #18
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff fc53 	bl	800338c <HAL_I2C_MasterRxCpltCallback>
}
 8003ae6:	e012      	b.n	8003b0e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b40      	cmp	r3, #64	@ 0x40
 8003b28:	d117      	bne.n	8003b5a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d109      	bne.n	8003b46 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	461a      	mov	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b42:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003b44:	e067      	b.n	8003c16 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	611a      	str	r2, [r3, #16]
}
 8003b58:	e05d      	b.n	8003c16 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b62:	d133      	bne.n	8003bcc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b21      	cmp	r3, #33	@ 0x21
 8003b6e:	d109      	bne.n	8003b84 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	461a      	mov	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b80:	611a      	str	r2, [r3, #16]
 8003b82:	e008      	b.n	8003b96 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d004      	beq.n	8003ba8 <I2C_Master_SB+0x92>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d108      	bne.n	8003bba <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d032      	beq.n	8003c16 <I2C_Master_SB+0x100>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d02d      	beq.n	8003c16 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bc8:	605a      	str	r2, [r3, #4]
}
 8003bca:	e024      	b.n	8003c16 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10e      	bne.n	8003bf2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	11db      	asrs	r3, r3, #7
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f003 0306 	and.w	r3, r3, #6
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	f063 030f 	orn	r3, r3, #15
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	611a      	str	r2, [r3, #16]
}
 8003bf0:	e011      	b.n	8003c16 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d10d      	bne.n	8003c16 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	11db      	asrs	r3, r3, #7
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f003 0306 	and.w	r3, r3, #6
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	f063 030e 	orn	r3, r3, #14
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	611a      	str	r2, [r3, #16]
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d004      	beq.n	8003c48 <I2C_Master_ADD10+0x26>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d108      	bne.n	8003c5a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00c      	beq.n	8003c6a <I2C_Master_ADD10+0x48>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d007      	beq.n	8003c6a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c68:	605a      	str	r2, [r3, #4]
  }
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b091      	sub	sp, #68	@ 0x44
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c84:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b22      	cmp	r3, #34	@ 0x22
 8003c9e:	f040 8169 	bne.w	8003f74 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10f      	bne.n	8003cca <I2C_Master_ADDR+0x54>
 8003caa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003cae:	2b40      	cmp	r3, #64	@ 0x40
 8003cb0:	d10b      	bne.n	8003cca <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc8:	e160      	b.n	8003f8c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d11d      	bne.n	8003d0e <I2C_Master_ADDR+0x98>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003cda:	d118      	bne.n	8003d0e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cdc:	2300      	movs	r3, #0
 8003cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d00:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	651a      	str	r2, [r3, #80]	@ 0x50
 8003d0c:	e13e      	b.n	8003f8c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d113      	bne.n	8003d40 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d18:	2300      	movs	r3, #0
 8003d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e115      	b.n	8003f6c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	f040 808a 	bne.w	8003e60 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d52:	d137      	bne.n	8003dc4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d62:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d72:	d113      	bne.n	8003d9c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d82:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d84:	2300      	movs	r3, #0
 8003d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	e0e7      	b.n	8003f6c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	623b      	str	r3, [r7, #32]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	623b      	str	r3, [r7, #32]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	623b      	str	r3, [r7, #32]
 8003db0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	e0d3      	b.n	8003f6c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d02e      	beq.n	8003e28 <I2C_Master_ADDR+0x1b2>
 8003dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d02b      	beq.n	8003e28 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd2:	2b12      	cmp	r3, #18
 8003dd4:	d102      	bne.n	8003ddc <I2C_Master_ADDR+0x166>
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d125      	bne.n	8003e28 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d00e      	beq.n	8003e00 <I2C_Master_ADDR+0x18a>
 8003de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d00b      	beq.n	8003e00 <I2C_Master_ADDR+0x18a>
 8003de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dea:	2b10      	cmp	r3, #16
 8003dec:	d008      	beq.n	8003e00 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	e007      	b.n	8003e10 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e0e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e10:	2300      	movs	r3, #0
 8003e12:	61fb      	str	r3, [r7, #28]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	61fb      	str	r3, [r7, #28]
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	e0a1      	b.n	8003f6c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e36:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61bb      	str	r3, [r7, #24]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	61bb      	str	r3, [r7, #24]
 8003e4c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	e085      	b.n	8003f6c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d14d      	bne.n	8003f06 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d016      	beq.n	8003e9e <I2C_Master_ADDR+0x228>
 8003e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d013      	beq.n	8003e9e <I2C_Master_ADDR+0x228>
 8003e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e78:	2b10      	cmp	r3, #16
 8003e7a:	d010      	beq.n	8003e9e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e8a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e007      	b.n	8003eae <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003eac:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ebc:	d117      	bne.n	8003eee <I2C_Master_ADDR+0x278>
 8003ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ec4:	d00b      	beq.n	8003ede <I2C_Master_ADDR+0x268>
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d008      	beq.n	8003ede <I2C_Master_ADDR+0x268>
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d005      	beq.n	8003ede <I2C_Master_ADDR+0x268>
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed4:	2b10      	cmp	r3, #16
 8003ed6:	d002      	beq.n	8003ede <I2C_Master_ADDR+0x268>
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d107      	bne.n	8003eee <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003eec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	e032      	b.n	8003f6c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f14:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f24:	d117      	bne.n	8003f56 <I2C_Master_ADDR+0x2e0>
 8003f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f2c:	d00b      	beq.n	8003f46 <I2C_Master_ADDR+0x2d0>
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d008      	beq.n	8003f46 <I2C_Master_ADDR+0x2d0>
 8003f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d005      	beq.n	8003f46 <I2C_Master_ADDR+0x2d0>
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3c:	2b10      	cmp	r3, #16
 8003f3e:	d002      	beq.n	8003f46 <I2C_Master_ADDR+0x2d0>
 8003f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d107      	bne.n	8003f56 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f54:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f56:	2300      	movs	r3, #0
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003f72:	e00b      	b.n	8003f8c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
}
 8003f8a:	e7ff      	b.n	8003f8c <I2C_Master_ADDR+0x316>
 8003f8c:	bf00      	nop
 8003f8e:	3744      	adds	r7, #68	@ 0x44
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d02b      	beq.n	800400a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	781a      	ldrb	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d114      	bne.n	800400a <I2C_SlaveTransmit_TXE+0x72>
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	2b29      	cmp	r3, #41	@ 0x29
 8003fe4:	d111      	bne.n	800400a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ff4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2221      	movs	r2, #33	@ 0x21
 8003ffa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2228      	movs	r2, #40	@ 0x28
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff f9cb 	bl	80033a0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800400a:	bf00      	nop
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800401e:	b29b      	uxth	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d011      	beq.n	8004048 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	781a      	ldrb	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004062:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d02c      	beq.n	80040c8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d114      	bne.n	80040c8 <I2C_SlaveReceive_RXNE+0x74>
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80040a2:	d111      	bne.n	80040c8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040b2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2222      	movs	r2, #34	@ 0x22
 80040b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2228      	movs	r2, #40	@ 0x28
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff f976 	bl	80033b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040c8:	bf00      	nop
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d012      	beq.n	8004108 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800411e:	2300      	movs	r3, #0
 8004120:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004128:	b2db      	uxtb	r3, r3
 800412a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800412e:	2b28      	cmp	r3, #40	@ 0x28
 8004130:	d125      	bne.n	800417e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004140:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004156:	2b00      	cmp	r3, #0
 8004158:	d103      	bne.n	8004162 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	81bb      	strh	r3, [r7, #12]
 8004160:	e002      	b.n	8004168 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004170:	89ba      	ldrh	r2, [r7, #12]
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	4619      	mov	r1, r3
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff f926 	bl	80033c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800417c:	e00e      	b.n	800419c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800419c:	bf00      	nop
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041c2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80041c4:	2300      	movs	r3, #0
 80041c6:	60bb      	str	r3, [r7, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	60bb      	str	r3, [r7, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041f0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004200:	d172      	bne.n	80042e8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	2b22      	cmp	r3, #34	@ 0x22
 8004206:	d002      	beq.n	800420e <I2C_Slave_STOPF+0x6a>
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	2b2a      	cmp	r3, #42	@ 0x2a
 800420c:	d135      	bne.n	800427a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	b29a      	uxth	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d005      	beq.n	8004232 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	f043 0204 	orr.w	r2, r3, #4
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004240:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004246:	4618      	mov	r0, r3
 8004248:	f7fe f998 	bl	800257c <HAL_DMA_GetState>
 800424c:	4603      	mov	r3, r0
 800424e:	2b01      	cmp	r3, #1
 8004250:	d049      	beq.n	80042e6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004256:	4a69      	ldr	r2, [pc, #420]	@ (80043fc <I2C_Slave_STOPF+0x258>)
 8004258:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425e:	4618      	mov	r0, r3
 8004260:	f7fd ffe0 	bl	8002224 <HAL_DMA_Abort_IT>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d03d      	beq.n	80042e6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004274:	4610      	mov	r0, r2
 8004276:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004278:	e035      	b.n	80042e6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	b29a      	uxth	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	f043 0204 	orr.w	r2, r3, #4
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe f962 	bl	800257c <HAL_DMA_GetState>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d014      	beq.n	80042e8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c2:	4a4e      	ldr	r2, [pc, #312]	@ (80043fc <I2C_Slave_STOPF+0x258>)
 80042c4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fd ffaa 	bl	8002224 <HAL_DMA_Abort_IT>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80042e0:	4610      	mov	r0, r2
 80042e2:	4798      	blx	r3
 80042e4:	e000      	b.n	80042e8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042e6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d03e      	beq.n	8004370 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d112      	bne.n	8004326 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004330:	2b40      	cmp	r3, #64	@ 0x40
 8004332:	d112      	bne.n	800435a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691a      	ldr	r2, [r3, #16]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	f043 0204 	orr.w	r2, r3, #4
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f8b7 	bl	80044ec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800437e:	e039      	b.n	80043f4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	2b2a      	cmp	r3, #42	@ 0x2a
 8004384:	d109      	bne.n	800439a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2228      	movs	r2, #40	@ 0x28
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff f80d 	bl	80033b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b28      	cmp	r3, #40	@ 0x28
 80043a4:	d111      	bne.n	80043ca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a15      	ldr	r2, [pc, #84]	@ (8004400 <I2C_Slave_STOPF+0x25c>)
 80043aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff f80e 	bl	80033e4 <HAL_I2C_ListenCpltCallback>
}
 80043c8:	e014      	b.n	80043f4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ce:	2b22      	cmp	r3, #34	@ 0x22
 80043d0:	d002      	beq.n	80043d8 <I2C_Slave_STOPF+0x234>
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	2b22      	cmp	r3, #34	@ 0x22
 80043d6:	d10d      	bne.n	80043f4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fe ffe0 	bl	80033b4 <HAL_I2C_SlaveRxCpltCallback>
}
 80043f4:	bf00      	nop
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	08004855 	.word	0x08004855
 8004400:	ffff0000 	.word	0xffff0000

08004404 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004412:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004418:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b08      	cmp	r3, #8
 800441e:	d002      	beq.n	8004426 <I2C_Slave_AF+0x22>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b20      	cmp	r3, #32
 8004424:	d129      	bne.n	800447a <I2C_Slave_AF+0x76>
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	2b28      	cmp	r3, #40	@ 0x28
 800442a:	d126      	bne.n	800447a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a2e      	ldr	r2, [pc, #184]	@ (80044e8 <I2C_Slave_AF+0xe4>)
 8004430:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004440:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800444a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800445a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fe ffb6 	bl	80033e4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004478:	e031      	b.n	80044de <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	2b21      	cmp	r3, #33	@ 0x21
 800447e:	d129      	bne.n	80044d4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a19      	ldr	r2, [pc, #100]	@ (80044e8 <I2C_Slave_AF+0xe4>)
 8004484:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2221      	movs	r2, #33	@ 0x21
 800448a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044aa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044b4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044c4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fe fc50 	bl	8002d6c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7fe ff67 	bl	80033a0 <HAL_I2C_SlaveTxCpltCallback>
}
 80044d2:	e004      	b.n	80044de <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044dc:	615a      	str	r2, [r3, #20]
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	ffff0000 	.word	0xffff0000

080044ec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004502:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004504:	7bbb      	ldrb	r3, [r7, #14]
 8004506:	2b10      	cmp	r3, #16
 8004508:	d002      	beq.n	8004510 <I2C_ITError+0x24>
 800450a:	7bbb      	ldrb	r3, [r7, #14]
 800450c:	2b40      	cmp	r3, #64	@ 0x40
 800450e:	d10a      	bne.n	8004526 <I2C_ITError+0x3a>
 8004510:	7bfb      	ldrb	r3, [r7, #15]
 8004512:	2b22      	cmp	r3, #34	@ 0x22
 8004514:	d107      	bne.n	8004526 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004524:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800452c:	2b28      	cmp	r3, #40	@ 0x28
 800452e:	d107      	bne.n	8004540 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2228      	movs	r2, #40	@ 0x28
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800453e:	e015      	b.n	800456c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800454a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800454e:	d00a      	beq.n	8004566 <I2C_ITError+0x7a>
 8004550:	7bfb      	ldrb	r3, [r7, #15]
 8004552:	2b60      	cmp	r3, #96	@ 0x60
 8004554:	d007      	beq.n	8004566 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004576:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800457a:	d162      	bne.n	8004642 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800458a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004590:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b01      	cmp	r3, #1
 8004598:	d020      	beq.n	80045dc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800459e:	4a6a      	ldr	r2, [pc, #424]	@ (8004748 <I2C_ITError+0x25c>)
 80045a0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fd fe3c 	bl	8002224 <HAL_DMA_Abort_IT>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 8089 	beq.w	80046c6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0201 	bic.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045d6:	4610      	mov	r0, r2
 80045d8:	4798      	blx	r3
 80045da:	e074      	b.n	80046c6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e0:	4a59      	ldr	r2, [pc, #356]	@ (8004748 <I2C_ITError+0x25c>)
 80045e2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fd fe1b 	bl	8002224 <HAL_DMA_Abort_IT>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d068      	beq.n	80046c6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045fe:	2b40      	cmp	r3, #64	@ 0x40
 8004600:	d10b      	bne.n	800461a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0201 	bic.w	r2, r2, #1
 8004628:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800463c:	4610      	mov	r0, r2
 800463e:	4798      	blx	r3
 8004640:	e041      	b.n	80046c6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b60      	cmp	r3, #96	@ 0x60
 800464c:	d125      	bne.n	800469a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004666:	2b40      	cmp	r3, #64	@ 0x40
 8004668:	d10b      	bne.n	8004682 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0201 	bic.w	r2, r2, #1
 8004690:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fe fece 	bl	8003434 <HAL_I2C_AbortCpltCallback>
 8004698:	e015      	b.n	80046c6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a4:	2b40      	cmp	r3, #64	@ 0x40
 80046a6:	d10b      	bne.n	80046c0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7fe fead 	bl	8003420 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10e      	bne.n	80046f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d109      	bne.n	80046f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d104      	bne.n	80046f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d007      	beq.n	8004704 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004702:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800470a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b04      	cmp	r3, #4
 8004716:	d113      	bne.n	8004740 <I2C_ITError+0x254>
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	2b28      	cmp	r3, #40	@ 0x28
 800471c:	d110      	bne.n	8004740 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a0a      	ldr	r2, [pc, #40]	@ (800474c <I2C_ITError+0x260>)
 8004722:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fe fe52 	bl	80033e4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004740:	bf00      	nop
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	08004855 	.word	0x08004855
 800474c:	ffff0000 	.word	0xffff0000

08004750 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	607a      	str	r2, [r7, #4]
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	460b      	mov	r3, r1
 800475e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d006      	beq.n	800477a <I2C_MasterRequestWrite+0x2a>
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d003      	beq.n	800477a <I2C_MasterRequestWrite+0x2a>
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004778:	d108      	bne.n	800478c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	e00b      	b.n	80047a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004790:	2b12      	cmp	r3, #18
 8004792:	d107      	bne.n	80047a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f8f7 	bl	80049a4 <I2C_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00d      	beq.n	80047d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ca:	d103      	bne.n	80047d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e035      	b.n	8004844 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047e0:	d108      	bne.n	80047f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047e2:	897b      	ldrh	r3, [r7, #10]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047f0:	611a      	str	r2, [r3, #16]
 80047f2:	e01b      	b.n	800482c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047f4:	897b      	ldrh	r3, [r7, #10]
 80047f6:	11db      	asrs	r3, r3, #7
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	f003 0306 	and.w	r3, r3, #6
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	f063 030f 	orn	r3, r3, #15
 8004804:	b2da      	uxtb	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	490e      	ldr	r1, [pc, #56]	@ (800484c <I2C_MasterRequestWrite+0xfc>)
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f940 	bl	8004a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e010      	b.n	8004844 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004822:	897b      	ldrh	r3, [r7, #10]
 8004824:	b2da      	uxtb	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	4907      	ldr	r1, [pc, #28]	@ (8004850 <I2C_MasterRequestWrite+0x100>)
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f930 	bl	8004a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	00010008 	.word	0x00010008
 8004850:	00010002 	.word	0x00010002

08004854 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004864:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800486c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800486e:	4b4b      	ldr	r3, [pc, #300]	@ (800499c <I2C_DMAAbort+0x148>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	08db      	lsrs	r3, r3, #3
 8004874:	4a4a      	ldr	r2, [pc, #296]	@ (80049a0 <I2C_DMAAbort+0x14c>)
 8004876:	fba2 2303 	umull	r2, r3, r2, r3
 800487a:	0a1a      	lsrs	r2, r3, #8
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	00da      	lsls	r2, r3, #3
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004892:	f043 0220 	orr.w	r2, r3, #32
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800489a:	e00a      	b.n	80048b2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3b01      	subs	r3, #1
 80048a0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048b0:	d0ea      	beq.n	8004888 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048be:	2200      	movs	r2, #0
 80048c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ce:	2200      	movs	r2, #0
 80048d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048e0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2200      	movs	r2, #0
 80048e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f4:	2200      	movs	r2, #0
 80048f6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004904:	2200      	movs	r2, #0
 8004906:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0201 	bic.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b60      	cmp	r3, #96	@ 0x60
 8004922:	d10e      	bne.n	8004942 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2200      	movs	r2, #0
 8004938:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800493a:	6978      	ldr	r0, [r7, #20]
 800493c:	f7fe fd7a 	bl	8003434 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004940:	e027      	b.n	8004992 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004942:	7cfb      	ldrb	r3, [r7, #19]
 8004944:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004948:	2b28      	cmp	r3, #40	@ 0x28
 800494a:	d117      	bne.n	800497c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800496a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2200      	movs	r2, #0
 8004970:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2228      	movs	r2, #40	@ 0x28
 8004976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800497a:	e007      	b.n	800498c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800498c:	6978      	ldr	r0, [r7, #20]
 800498e:	f7fe fd47 	bl	8003420 <HAL_I2C_ErrorCallback>
}
 8004992:	bf00      	nop
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000014 	.word	0x20000014
 80049a0:	14f8b589 	.word	0x14f8b589

080049a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	4613      	mov	r3, r2
 80049b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049b4:	e048      	b.n	8004a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d044      	beq.n	8004a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049be:	f7fd f979 	bl	8001cb4 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d302      	bcc.n	80049d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d139      	bne.n	8004a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	0c1b      	lsrs	r3, r3, #16
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d10d      	bne.n	80049fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	43da      	mvns	r2, r3
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	4013      	ands	r3, r2
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	bf0c      	ite	eq
 80049f0:	2301      	moveq	r3, #1
 80049f2:	2300      	movne	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	461a      	mov	r2, r3
 80049f8:	e00c      	b.n	8004a14 <I2C_WaitOnFlagUntilTimeout+0x70>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	43da      	mvns	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4013      	ands	r3, r2
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bf0c      	ite	eq
 8004a0c:	2301      	moveq	r3, #1
 8004a0e:	2300      	movne	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	461a      	mov	r2, r3
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d116      	bne.n	8004a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a34:	f043 0220 	orr.w	r2, r3, #32
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e023      	b.n	8004a90 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	0c1b      	lsrs	r3, r3, #16
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d10d      	bne.n	8004a6e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	43da      	mvns	r2, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bf0c      	ite	eq
 8004a64:	2301      	moveq	r3, #1
 8004a66:	2300      	movne	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	e00c      	b.n	8004a88 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	43da      	mvns	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	bf0c      	ite	eq
 8004a80:	2301      	moveq	r3, #1
 8004a82:	2300      	movne	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	79fb      	ldrb	r3, [r7, #7]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d093      	beq.n	80049b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004aa6:	e071      	b.n	8004b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ab6:	d123      	bne.n	8004b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ac6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ad0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	f043 0204 	orr.w	r2, r3, #4
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e067      	b.n	8004bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b06:	d041      	beq.n	8004b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b08:	f7fd f8d4 	bl	8001cb4 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d302      	bcc.n	8004b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d136      	bne.n	8004b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	0c1b      	lsrs	r3, r3, #16
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d10c      	bne.n	8004b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	43da      	mvns	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4013      	ands	r3, r2
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bf14      	ite	ne
 8004b3a:	2301      	movne	r3, #1
 8004b3c:	2300      	moveq	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	e00b      	b.n	8004b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	43da      	mvns	r2, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	bf14      	ite	ne
 8004b54:	2301      	movne	r3, #1
 8004b56:	2300      	moveq	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d016      	beq.n	8004b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b78:	f043 0220 	orr.w	r2, r3, #32
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e021      	b.n	8004bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	0c1b      	lsrs	r3, r3, #16
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d10c      	bne.n	8004bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	43da      	mvns	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf14      	ite	ne
 8004ba8:	2301      	movne	r3, #1
 8004baa:	2300      	moveq	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	e00b      	b.n	8004bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	43da      	mvns	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	bf14      	ite	ne
 8004bc2:	2301      	movne	r3, #1
 8004bc4:	2300      	moveq	r3, #0
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f47f af6d 	bne.w	8004aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004be4:	e034      	b.n	8004c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f8b8 	bl	8004d5c <I2C_IsAcknowledgeFailed>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e034      	b.n	8004c60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d028      	beq.n	8004c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfe:	f7fd f859 	bl	8001cb4 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d302      	bcc.n	8004c14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d11d      	bne.n	8004c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c1e:	2b80      	cmp	r3, #128	@ 0x80
 8004c20:	d016      	beq.n	8004c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3c:	f043 0220 	orr.w	r2, r3, #32
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e007      	b.n	8004c60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5a:	2b80      	cmp	r3, #128	@ 0x80
 8004c5c:	d1c3      	bne.n	8004be6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c74:	e034      	b.n	8004ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f870 	bl	8004d5c <I2C_IsAcknowledgeFailed>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e034      	b.n	8004cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d028      	beq.n	8004ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8e:	f7fd f811 	bl	8001cb4 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d302      	bcc.n	8004ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d11d      	bne.n	8004ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f003 0304 	and.w	r3, r3, #4
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d016      	beq.n	8004ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ccc:	f043 0220 	orr.w	r2, r3, #32
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e007      	b.n	8004cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d1c3      	bne.n	8004c76 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d04:	4b13      	ldr	r3, [pc, #76]	@ (8004d54 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	08db      	lsrs	r3, r3, #3
 8004d0a:	4a13      	ldr	r2, [pc, #76]	@ (8004d58 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d10:	0a1a      	lsrs	r2, r3, #8
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d107      	bne.n	8004d36 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	f043 0220 	orr.w	r2, r3, #32
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e008      	b.n	8004d48 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d44:	d0e9      	beq.n	8004d1a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	20000014 	.word	0x20000014
 8004d58:	14f8b589 	.word	0x14f8b589

08004d5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d72:	d11b      	bne.n	8004dac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d98:	f043 0204 	orr.w	r2, r3, #4
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e000      	b.n	8004dae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004dca:	d103      	bne.n	8004dd4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004dd2:	e007      	b.n	8004de4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004ddc:	d102      	bne.n	8004de4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2208      	movs	r2, #8
 8004de2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e0cc      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e04:	4b68      	ldr	r3, [pc, #416]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d90c      	bls.n	8004e2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e12:	4b65      	ldr	r3, [pc, #404]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1a:	4b63      	ldr	r3, [pc, #396]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d001      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0b8      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d020      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e44:	4b59      	ldr	r3, [pc, #356]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	4a58      	ldr	r2, [pc, #352]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e5c:	4b53      	ldr	r3, [pc, #332]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	4a52      	ldr	r2, [pc, #328]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e68:	4b50      	ldr	r3, [pc, #320]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	494d      	ldr	r1, [pc, #308]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d044      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d107      	bne.n	8004e9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8e:	4b47      	ldr	r3, [pc, #284]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d119      	bne.n	8004ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e07f      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d003      	beq.n	8004eae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d107      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eae:	4b3f      	ldr	r3, [pc, #252]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e06f      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e067      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ece:	4b37      	ldr	r3, [pc, #220]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f023 0203 	bic.w	r2, r3, #3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	4934      	ldr	r1, [pc, #208]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ee0:	f7fc fee8 	bl	8001cb4 <HAL_GetTick>
 8004ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee6:	e00a      	b.n	8004efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee8:	f7fc fee4 	bl	8001cb4 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e04f      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efe:	4b2b      	ldr	r3, [pc, #172]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 020c 	and.w	r2, r3, #12
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d1eb      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f10:	4b25      	ldr	r3, [pc, #148]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d20c      	bcs.n	8004f38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1e:	4b22      	ldr	r3, [pc, #136]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f26:	4b20      	ldr	r3, [pc, #128]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e032      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d008      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f44:	4b19      	ldr	r3, [pc, #100]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	4916      	ldr	r1, [pc, #88]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f62:	4b12      	ldr	r3, [pc, #72]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	490e      	ldr	r1, [pc, #56]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f76:	f000 f855 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	490a      	ldr	r1, [pc, #40]	@ (8004fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f88:	5ccb      	ldrb	r3, [r1, r3]
 8004f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f8e:	4a09      	ldr	r2, [pc, #36]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f92:	4b09      	ldr	r3, [pc, #36]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fc fe48 	bl	8001c2c <HAL_InitTick>

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	40023c00 	.word	0x40023c00
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	08007930 	.word	0x08007930
 8004fb4:	20000014 	.word	0x20000014
 8004fb8:	20000018 	.word	0x20000018

08004fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fc0:	4b03      	ldr	r3, [pc, #12]	@ (8004fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	20000014 	.word	0x20000014

08004fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fd8:	f7ff fff0 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	4b05      	ldr	r3, [pc, #20]	@ (8004ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	0a9b      	lsrs	r3, r3, #10
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	4903      	ldr	r1, [pc, #12]	@ (8004ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fea:	5ccb      	ldrb	r3, [r1, r3]
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	08007940 	.word	0x08007940

08004ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005000:	f7ff ffdc 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8005004:	4602      	mov	r2, r0
 8005006:	4b05      	ldr	r3, [pc, #20]	@ (800501c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	0b5b      	lsrs	r3, r3, #13
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	4903      	ldr	r1, [pc, #12]	@ (8005020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005012:	5ccb      	ldrb	r3, [r1, r3]
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005018:	4618      	mov	r0, r3
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40023800 	.word	0x40023800
 8005020:	08007940 	.word	0x08007940

08005024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005028:	b0a6      	sub	sp, #152	@ 0x98
 800502a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800504a:	4bc8      	ldr	r3, [pc, #800]	@ (800536c <HAL_RCC_GetSysClockFreq+0x348>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	2b0c      	cmp	r3, #12
 8005054:	f200 817e 	bhi.w	8005354 <HAL_RCC_GetSysClockFreq+0x330>
 8005058:	a201      	add	r2, pc, #4	@ (adr r2, 8005060 <HAL_RCC_GetSysClockFreq+0x3c>)
 800505a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505e:	bf00      	nop
 8005060:	08005095 	.word	0x08005095
 8005064:	08005355 	.word	0x08005355
 8005068:	08005355 	.word	0x08005355
 800506c:	08005355 	.word	0x08005355
 8005070:	0800509d 	.word	0x0800509d
 8005074:	08005355 	.word	0x08005355
 8005078:	08005355 	.word	0x08005355
 800507c:	08005355 	.word	0x08005355
 8005080:	080050a5 	.word	0x080050a5
 8005084:	08005355 	.word	0x08005355
 8005088:	08005355 	.word	0x08005355
 800508c:	08005355 	.word	0x08005355
 8005090:	0800520f 	.word	0x0800520f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005094:	4bb6      	ldr	r3, [pc, #728]	@ (8005370 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005096:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800509a:	e15f      	b.n	800535c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800509c:	4bb5      	ldr	r3, [pc, #724]	@ (8005374 <HAL_RCC_GetSysClockFreq+0x350>)
 800509e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80050a2:	e15b      	b.n	800535c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050a4:	4bb1      	ldr	r3, [pc, #708]	@ (800536c <HAL_RCC_GetSysClockFreq+0x348>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050b0:	4bae      	ldr	r3, [pc, #696]	@ (800536c <HAL_RCC_GetSysClockFreq+0x348>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d031      	beq.n	8005120 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050bc:	4bab      	ldr	r3, [pc, #684]	@ (800536c <HAL_RCC_GetSysClockFreq+0x348>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	099b      	lsrs	r3, r3, #6
 80050c2:	2200      	movs	r2, #0
 80050c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80050d0:	2300      	movs	r3, #0
 80050d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80050d4:	4ba7      	ldr	r3, [pc, #668]	@ (8005374 <HAL_RCC_GetSysClockFreq+0x350>)
 80050d6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80050da:	462a      	mov	r2, r5
 80050dc:	fb03 f202 	mul.w	r2, r3, r2
 80050e0:	2300      	movs	r3, #0
 80050e2:	4621      	mov	r1, r4
 80050e4:	fb01 f303 	mul.w	r3, r1, r3
 80050e8:	4413      	add	r3, r2
 80050ea:	4aa2      	ldr	r2, [pc, #648]	@ (8005374 <HAL_RCC_GetSysClockFreq+0x350>)
 80050ec:	4621      	mov	r1, r4
 80050ee:	fba1 1202 	umull	r1, r2, r1, r2
 80050f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80050f4:	460a      	mov	r2, r1
 80050f6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80050f8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80050fa:	4413      	add	r3, r2
 80050fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80050fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005102:	2200      	movs	r2, #0
 8005104:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005106:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005108:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800510c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005110:	f7fb f880 	bl	8000214 <__aeabi_uldivmod>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4613      	mov	r3, r2
 800511a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800511e:	e064      	b.n	80051ea <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005120:	4b92      	ldr	r3, [pc, #584]	@ (800536c <HAL_RCC_GetSysClockFreq+0x348>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	099b      	lsrs	r3, r3, #6
 8005126:	2200      	movs	r2, #0
 8005128:	653b      	str	r3, [r7, #80]	@ 0x50
 800512a:	657a      	str	r2, [r7, #84]	@ 0x54
 800512c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800512e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005132:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005134:	2300      	movs	r3, #0
 8005136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005138:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800513c:	4622      	mov	r2, r4
 800513e:	462b      	mov	r3, r5
 8005140:	f04f 0000 	mov.w	r0, #0
 8005144:	f04f 0100 	mov.w	r1, #0
 8005148:	0159      	lsls	r1, r3, #5
 800514a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800514e:	0150      	lsls	r0, r2, #5
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4621      	mov	r1, r4
 8005156:	1a51      	subs	r1, r2, r1
 8005158:	6139      	str	r1, [r7, #16]
 800515a:	4629      	mov	r1, r5
 800515c:	eb63 0301 	sbc.w	r3, r3, r1
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	f04f 0200 	mov.w	r2, #0
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800516e:	4659      	mov	r1, fp
 8005170:	018b      	lsls	r3, r1, #6
 8005172:	4651      	mov	r1, sl
 8005174:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005178:	4651      	mov	r1, sl
 800517a:	018a      	lsls	r2, r1, #6
 800517c:	4651      	mov	r1, sl
 800517e:	ebb2 0801 	subs.w	r8, r2, r1
 8005182:	4659      	mov	r1, fp
 8005184:	eb63 0901 	sbc.w	r9, r3, r1
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005194:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005198:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800519c:	4690      	mov	r8, r2
 800519e:	4699      	mov	r9, r3
 80051a0:	4623      	mov	r3, r4
 80051a2:	eb18 0303 	adds.w	r3, r8, r3
 80051a6:	60bb      	str	r3, [r7, #8]
 80051a8:	462b      	mov	r3, r5
 80051aa:	eb49 0303 	adc.w	r3, r9, r3
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051bc:	4629      	mov	r1, r5
 80051be:	028b      	lsls	r3, r1, #10
 80051c0:	4621      	mov	r1, r4
 80051c2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051c6:	4621      	mov	r1, r4
 80051c8:	028a      	lsls	r2, r1, #10
 80051ca:	4610      	mov	r0, r2
 80051cc:	4619      	mov	r1, r3
 80051ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051d2:	2200      	movs	r2, #0
 80051d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80051d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80051d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051dc:	f7fb f81a 	bl	8000214 <__aeabi_uldivmod>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4613      	mov	r3, r2
 80051e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80051ea:	4b60      	ldr	r3, [pc, #384]	@ (800536c <HAL_RCC_GetSysClockFreq+0x348>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	0c1b      	lsrs	r3, r3, #16
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	3301      	adds	r3, #1
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80051fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005200:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005204:	fbb2 f3f3 	udiv	r3, r2, r3
 8005208:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800520c:	e0a6      	b.n	800535c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800520e:	4b57      	ldr	r3, [pc, #348]	@ (800536c <HAL_RCC_GetSysClockFreq+0x348>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005216:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800521a:	4b54      	ldr	r3, [pc, #336]	@ (800536c <HAL_RCC_GetSysClockFreq+0x348>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d02a      	beq.n	800527c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005226:	4b51      	ldr	r3, [pc, #324]	@ (800536c <HAL_RCC_GetSysClockFreq+0x348>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	099b      	lsrs	r3, r3, #6
 800522c:	2200      	movs	r2, #0
 800522e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005230:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005234:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005238:	2100      	movs	r1, #0
 800523a:	4b4e      	ldr	r3, [pc, #312]	@ (8005374 <HAL_RCC_GetSysClockFreq+0x350>)
 800523c:	fb03 f201 	mul.w	r2, r3, r1
 8005240:	2300      	movs	r3, #0
 8005242:	fb00 f303 	mul.w	r3, r0, r3
 8005246:	4413      	add	r3, r2
 8005248:	4a4a      	ldr	r2, [pc, #296]	@ (8005374 <HAL_RCC_GetSysClockFreq+0x350>)
 800524a:	fba0 1202 	umull	r1, r2, r0, r2
 800524e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005250:	460a      	mov	r2, r1
 8005252:	673a      	str	r2, [r7, #112]	@ 0x70
 8005254:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005256:	4413      	add	r3, r2
 8005258:	677b      	str	r3, [r7, #116]	@ 0x74
 800525a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800525e:	2200      	movs	r2, #0
 8005260:	633b      	str	r3, [r7, #48]	@ 0x30
 8005262:	637a      	str	r2, [r7, #52]	@ 0x34
 8005264:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005268:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800526c:	f7fa ffd2 	bl	8000214 <__aeabi_uldivmod>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4613      	mov	r3, r2
 8005276:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800527a:	e05b      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800527c:	4b3b      	ldr	r3, [pc, #236]	@ (800536c <HAL_RCC_GetSysClockFreq+0x348>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	099b      	lsrs	r3, r3, #6
 8005282:	2200      	movs	r2, #0
 8005284:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005286:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800528e:	623b      	str	r3, [r7, #32]
 8005290:	2300      	movs	r3, #0
 8005292:	627b      	str	r3, [r7, #36]	@ 0x24
 8005294:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005298:	4642      	mov	r2, r8
 800529a:	464b      	mov	r3, r9
 800529c:	f04f 0000 	mov.w	r0, #0
 80052a0:	f04f 0100 	mov.w	r1, #0
 80052a4:	0159      	lsls	r1, r3, #5
 80052a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052aa:	0150      	lsls	r0, r2, #5
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	4641      	mov	r1, r8
 80052b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80052b6:	4649      	mov	r1, r9
 80052b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052d0:	ebb2 040a 	subs.w	r4, r2, sl
 80052d4:	eb63 050b 	sbc.w	r5, r3, fp
 80052d8:	f04f 0200 	mov.w	r2, #0
 80052dc:	f04f 0300 	mov.w	r3, #0
 80052e0:	00eb      	lsls	r3, r5, #3
 80052e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052e6:	00e2      	lsls	r2, r4, #3
 80052e8:	4614      	mov	r4, r2
 80052ea:	461d      	mov	r5, r3
 80052ec:	4643      	mov	r3, r8
 80052ee:	18e3      	adds	r3, r4, r3
 80052f0:	603b      	str	r3, [r7, #0]
 80052f2:	464b      	mov	r3, r9
 80052f4:	eb45 0303 	adc.w	r3, r5, r3
 80052f8:	607b      	str	r3, [r7, #4]
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005306:	4629      	mov	r1, r5
 8005308:	028b      	lsls	r3, r1, #10
 800530a:	4621      	mov	r1, r4
 800530c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005310:	4621      	mov	r1, r4
 8005312:	028a      	lsls	r2, r1, #10
 8005314:	4610      	mov	r0, r2
 8005316:	4619      	mov	r1, r3
 8005318:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800531c:	2200      	movs	r2, #0
 800531e:	61bb      	str	r3, [r7, #24]
 8005320:	61fa      	str	r2, [r7, #28]
 8005322:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005326:	f7fa ff75 	bl	8000214 <__aeabi_uldivmod>
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	4613      	mov	r3, r2
 8005330:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005334:	4b0d      	ldr	r3, [pc, #52]	@ (800536c <HAL_RCC_GetSysClockFreq+0x348>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	0f1b      	lsrs	r3, r3, #28
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8005342:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005346:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800534a:	fbb2 f3f3 	udiv	r3, r2, r3
 800534e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005352:	e003      	b.n	800535c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005354:	4b06      	ldr	r3, [pc, #24]	@ (8005370 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005356:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800535a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800535c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8005360:	4618      	mov	r0, r3
 8005362:	3798      	adds	r7, #152	@ 0x98
 8005364:	46bd      	mov	sp, r7
 8005366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800536a:	bf00      	nop
 800536c:	40023800 	.word	0x40023800
 8005370:	00f42400 	.word	0x00f42400
 8005374:	017d7840 	.word	0x017d7840

08005378 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e28d      	b.n	80058a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 8083 	beq.w	800549e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005398:	4b94      	ldr	r3, [pc, #592]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 030c 	and.w	r3, r3, #12
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d019      	beq.n	80053d8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80053a4:	4b91      	ldr	r3, [pc, #580]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 030c 	and.w	r3, r3, #12
        || \
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d106      	bne.n	80053be <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80053b0:	4b8e      	ldr	r3, [pc, #568]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053bc:	d00c      	beq.n	80053d8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053be:	4b8b      	ldr	r3, [pc, #556]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80053c6:	2b0c      	cmp	r3, #12
 80053c8:	d112      	bne.n	80053f0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ca:	4b88      	ldr	r3, [pc, #544]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053d6:	d10b      	bne.n	80053f0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d8:	4b84      	ldr	r3, [pc, #528]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d05b      	beq.n	800549c <HAL_RCC_OscConfig+0x124>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d157      	bne.n	800549c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e25a      	b.n	80058a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053f8:	d106      	bne.n	8005408 <HAL_RCC_OscConfig+0x90>
 80053fa:	4b7c      	ldr	r3, [pc, #496]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a7b      	ldr	r2, [pc, #492]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 8005400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	e01d      	b.n	8005444 <HAL_RCC_OscConfig+0xcc>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005410:	d10c      	bne.n	800542c <HAL_RCC_OscConfig+0xb4>
 8005412:	4b76      	ldr	r3, [pc, #472]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a75      	ldr	r2, [pc, #468]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 8005418:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	4b73      	ldr	r3, [pc, #460]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a72      	ldr	r2, [pc, #456]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 8005424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	e00b      	b.n	8005444 <HAL_RCC_OscConfig+0xcc>
 800542c:	4b6f      	ldr	r3, [pc, #444]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a6e      	ldr	r2, [pc, #440]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 8005432:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	4b6c      	ldr	r3, [pc, #432]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a6b      	ldr	r2, [pc, #428]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 800543e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d013      	beq.n	8005474 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544c:	f7fc fc32 	bl	8001cb4 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005454:	f7fc fc2e 	bl	8001cb4 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b64      	cmp	r3, #100	@ 0x64
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e21f      	b.n	80058a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005466:	4b61      	ldr	r3, [pc, #388]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0f0      	beq.n	8005454 <HAL_RCC_OscConfig+0xdc>
 8005472:	e014      	b.n	800549e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005474:	f7fc fc1e 	bl	8001cb4 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800547c:	f7fc fc1a 	bl	8001cb4 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b64      	cmp	r3, #100	@ 0x64
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e20b      	b.n	80058a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800548e:	4b57      	ldr	r3, [pc, #348]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f0      	bne.n	800547c <HAL_RCC_OscConfig+0x104>
 800549a:	e000      	b.n	800549e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800549c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d06f      	beq.n	800558a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80054aa:	4b50      	ldr	r3, [pc, #320]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 030c 	and.w	r3, r3, #12
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d017      	beq.n	80054e6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80054b6:	4b4d      	ldr	r3, [pc, #308]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 030c 	and.w	r3, r3, #12
        || \
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d105      	bne.n	80054ce <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80054c2:	4b4a      	ldr	r3, [pc, #296]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00b      	beq.n	80054e6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ce:	4b47      	ldr	r3, [pc, #284]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80054d6:	2b0c      	cmp	r3, #12
 80054d8:	d11c      	bne.n	8005514 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054da:	4b44      	ldr	r3, [pc, #272]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d116      	bne.n	8005514 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054e6:	4b41      	ldr	r3, [pc, #260]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <HAL_RCC_OscConfig+0x186>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d001      	beq.n	80054fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e1d3      	b.n	80058a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054fe:	4b3b      	ldr	r3, [pc, #236]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	00db      	lsls	r3, r3, #3
 800550c:	4937      	ldr	r1, [pc, #220]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 800550e:	4313      	orrs	r3, r2
 8005510:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005512:	e03a      	b.n	800558a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d020      	beq.n	800555e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800551c:	4b34      	ldr	r3, [pc, #208]	@ (80055f0 <HAL_RCC_OscConfig+0x278>)
 800551e:	2201      	movs	r2, #1
 8005520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005522:	f7fc fbc7 	bl	8001cb4 <HAL_GetTick>
 8005526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800552a:	f7fc fbc3 	bl	8001cb4 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e1b4      	b.n	80058a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800553c:	4b2b      	ldr	r3, [pc, #172]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0f0      	beq.n	800552a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005548:	4b28      	ldr	r3, [pc, #160]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	4925      	ldr	r1, [pc, #148]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 8005558:	4313      	orrs	r3, r2
 800555a:	600b      	str	r3, [r1, #0]
 800555c:	e015      	b.n	800558a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800555e:	4b24      	ldr	r3, [pc, #144]	@ (80055f0 <HAL_RCC_OscConfig+0x278>)
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005564:	f7fc fba6 	bl	8001cb4 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800556c:	f7fc fba2 	bl	8001cb4 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e193      	b.n	80058a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800557e:	4b1b      	ldr	r3, [pc, #108]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1f0      	bne.n	800556c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d036      	beq.n	8005604 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d016      	beq.n	80055cc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800559e:	4b15      	ldr	r3, [pc, #84]	@ (80055f4 <HAL_RCC_OscConfig+0x27c>)
 80055a0:	2201      	movs	r2, #1
 80055a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a4:	f7fc fb86 	bl	8001cb4 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055ac:	f7fc fb82 	bl	8001cb4 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e173      	b.n	80058a6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055be:	4b0b      	ldr	r3, [pc, #44]	@ (80055ec <HAL_RCC_OscConfig+0x274>)
 80055c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0f0      	beq.n	80055ac <HAL_RCC_OscConfig+0x234>
 80055ca:	e01b      	b.n	8005604 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055cc:	4b09      	ldr	r3, [pc, #36]	@ (80055f4 <HAL_RCC_OscConfig+0x27c>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d2:	f7fc fb6f 	bl	8001cb4 <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055d8:	e00e      	b.n	80055f8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055da:	f7fc fb6b 	bl	8001cb4 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d907      	bls.n	80055f8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e15c      	b.n	80058a6 <HAL_RCC_OscConfig+0x52e>
 80055ec:	40023800 	.word	0x40023800
 80055f0:	42470000 	.word	0x42470000
 80055f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f8:	4b8a      	ldr	r3, [pc, #552]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 80055fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1ea      	bne.n	80055da <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 8097 	beq.w	8005740 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005612:	2300      	movs	r3, #0
 8005614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005616:	4b83      	ldr	r3, [pc, #524]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 8005618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10f      	bne.n	8005642 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005622:	2300      	movs	r3, #0
 8005624:	60bb      	str	r3, [r7, #8]
 8005626:	4b7f      	ldr	r3, [pc, #508]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 8005628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562a:	4a7e      	ldr	r2, [pc, #504]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 800562c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005630:	6413      	str	r3, [r2, #64]	@ 0x40
 8005632:	4b7c      	ldr	r3, [pc, #496]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 8005634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800563a:	60bb      	str	r3, [r7, #8]
 800563c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800563e:	2301      	movs	r3, #1
 8005640:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005642:	4b79      	ldr	r3, [pc, #484]	@ (8005828 <HAL_RCC_OscConfig+0x4b0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800564a:	2b00      	cmp	r3, #0
 800564c:	d118      	bne.n	8005680 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800564e:	4b76      	ldr	r3, [pc, #472]	@ (8005828 <HAL_RCC_OscConfig+0x4b0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a75      	ldr	r2, [pc, #468]	@ (8005828 <HAL_RCC_OscConfig+0x4b0>)
 8005654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800565a:	f7fc fb2b 	bl	8001cb4 <HAL_GetTick>
 800565e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005660:	e008      	b.n	8005674 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005662:	f7fc fb27 	bl	8001cb4 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e118      	b.n	80058a6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005674:	4b6c      	ldr	r3, [pc, #432]	@ (8005828 <HAL_RCC_OscConfig+0x4b0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0f0      	beq.n	8005662 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d106      	bne.n	8005696 <HAL_RCC_OscConfig+0x31e>
 8005688:	4b66      	ldr	r3, [pc, #408]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 800568a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800568c:	4a65      	ldr	r2, [pc, #404]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 800568e:	f043 0301 	orr.w	r3, r3, #1
 8005692:	6713      	str	r3, [r2, #112]	@ 0x70
 8005694:	e01c      	b.n	80056d0 <HAL_RCC_OscConfig+0x358>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	2b05      	cmp	r3, #5
 800569c:	d10c      	bne.n	80056b8 <HAL_RCC_OscConfig+0x340>
 800569e:	4b61      	ldr	r3, [pc, #388]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 80056a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a2:	4a60      	ldr	r2, [pc, #384]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 80056a4:	f043 0304 	orr.w	r3, r3, #4
 80056a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80056aa:	4b5e      	ldr	r3, [pc, #376]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 80056ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ae:	4a5d      	ldr	r2, [pc, #372]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 80056b0:	f043 0301 	orr.w	r3, r3, #1
 80056b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80056b6:	e00b      	b.n	80056d0 <HAL_RCC_OscConfig+0x358>
 80056b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 80056ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056bc:	4a59      	ldr	r2, [pc, #356]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 80056be:	f023 0301 	bic.w	r3, r3, #1
 80056c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80056c4:	4b57      	ldr	r3, [pc, #348]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 80056c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c8:	4a56      	ldr	r2, [pc, #344]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 80056ca:	f023 0304 	bic.w	r3, r3, #4
 80056ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d015      	beq.n	8005704 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d8:	f7fc faec 	bl	8001cb4 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056de:	e00a      	b.n	80056f6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e0:	f7fc fae8 	bl	8001cb4 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e0d7      	b.n	80058a6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 80056f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0ee      	beq.n	80056e0 <HAL_RCC_OscConfig+0x368>
 8005702:	e014      	b.n	800572e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005704:	f7fc fad6 	bl	8001cb4 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800570a:	e00a      	b.n	8005722 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800570c:	f7fc fad2 	bl	8001cb4 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800571a:	4293      	cmp	r3, r2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e0c1      	b.n	80058a6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005722:	4b40      	ldr	r3, [pc, #256]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 8005724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1ee      	bne.n	800570c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800572e:	7dfb      	ldrb	r3, [r7, #23]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d105      	bne.n	8005740 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005734:	4b3b      	ldr	r3, [pc, #236]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 8005736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005738:	4a3a      	ldr	r2, [pc, #232]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 800573a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800573e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 80ad 	beq.w	80058a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800574a:	4b36      	ldr	r3, [pc, #216]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 030c 	and.w	r3, r3, #12
 8005752:	2b08      	cmp	r3, #8
 8005754:	d060      	beq.n	8005818 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d145      	bne.n	80057ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800575e:	4b33      	ldr	r3, [pc, #204]	@ (800582c <HAL_RCC_OscConfig+0x4b4>)
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005764:	f7fc faa6 	bl	8001cb4 <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800576c:	f7fc faa2 	bl	8001cb4 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e093      	b.n	80058a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800577e:	4b29      	ldr	r3, [pc, #164]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f0      	bne.n	800576c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69da      	ldr	r2, [r3, #28]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005798:	019b      	lsls	r3, r3, #6
 800579a:	431a      	orrs	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	3b01      	subs	r3, #1
 80057a4:	041b      	lsls	r3, r3, #16
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ac:	061b      	lsls	r3, r3, #24
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b4:	071b      	lsls	r3, r3, #28
 80057b6:	491b      	ldr	r1, [pc, #108]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057bc:	4b1b      	ldr	r3, [pc, #108]	@ (800582c <HAL_RCC_OscConfig+0x4b4>)
 80057be:	2201      	movs	r2, #1
 80057c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c2:	f7fc fa77 	bl	8001cb4 <HAL_GetTick>
 80057c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c8:	e008      	b.n	80057dc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ca:	f7fc fa73 	bl	8001cb4 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e064      	b.n	80058a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057dc:	4b11      	ldr	r3, [pc, #68]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0f0      	beq.n	80057ca <HAL_RCC_OscConfig+0x452>
 80057e8:	e05c      	b.n	80058a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ea:	4b10      	ldr	r3, [pc, #64]	@ (800582c <HAL_RCC_OscConfig+0x4b4>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f0:	f7fc fa60 	bl	8001cb4 <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057f6:	e008      	b.n	800580a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f8:	f7fc fa5c 	bl	8001cb4 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e04d      	b.n	80058a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800580a:	4b06      	ldr	r3, [pc, #24]	@ (8005824 <HAL_RCC_OscConfig+0x4ac>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f0      	bne.n	80057f8 <HAL_RCC_OscConfig+0x480>
 8005816:	e045      	b.n	80058a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d107      	bne.n	8005830 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e040      	b.n	80058a6 <HAL_RCC_OscConfig+0x52e>
 8005824:	40023800 	.word	0x40023800
 8005828:	40007000 	.word	0x40007000
 800582c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005830:	4b1f      	ldr	r3, [pc, #124]	@ (80058b0 <HAL_RCC_OscConfig+0x538>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d030      	beq.n	80058a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d129      	bne.n	80058a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005856:	429a      	cmp	r2, r3
 8005858:	d122      	bne.n	80058a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005860:	4013      	ands	r3, r2
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005866:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005868:	4293      	cmp	r3, r2
 800586a:	d119      	bne.n	80058a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005876:	085b      	lsrs	r3, r3, #1
 8005878:	3b01      	subs	r3, #1
 800587a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800587c:	429a      	cmp	r2, r3
 800587e:	d10f      	bne.n	80058a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800588c:	429a      	cmp	r2, r3
 800588e:	d107      	bne.n	80058a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800589c:	429a      	cmp	r2, r3
 800589e:	d001      	beq.n	80058a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e000      	b.n	80058a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40023800 	.word	0x40023800

080058b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e041      	b.n	800594a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7fb ffc8 	bl	8001870 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3304      	adds	r3, #4
 80058f0:	4619      	mov	r1, r3
 80058f2:	4610      	mov	r0, r2
 80058f4:	f000 fcc0 	bl	8006278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d109      	bne.n	8005980 <HAL_TIM_PWM_Start_DMA+0x2c>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	bf0c      	ite	eq
 8005978:	2301      	moveq	r3, #1
 800597a:	2300      	movne	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	e022      	b.n	80059c6 <HAL_TIM_PWM_Start_DMA+0x72>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2b04      	cmp	r3, #4
 8005984:	d109      	bne.n	800599a <HAL_TIM_PWM_Start_DMA+0x46>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	bf0c      	ite	eq
 8005992:	2301      	moveq	r3, #1
 8005994:	2300      	movne	r3, #0
 8005996:	b2db      	uxtb	r3, r3
 8005998:	e015      	b.n	80059c6 <HAL_TIM_PWM_Start_DMA+0x72>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b08      	cmp	r3, #8
 800599e:	d109      	bne.n	80059b4 <HAL_TIM_PWM_Start_DMA+0x60>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	bf0c      	ite	eq
 80059ac:	2301      	moveq	r3, #1
 80059ae:	2300      	movne	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	e008      	b.n	80059c6 <HAL_TIM_PWM_Start_DMA+0x72>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	bf0c      	ite	eq
 80059c0:	2301      	moveq	r3, #1
 80059c2:	2300      	movne	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80059ca:	2302      	movs	r3, #2
 80059cc:	e171      	b.n	8005cb2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d109      	bne.n	80059e8 <HAL_TIM_PWM_Start_DMA+0x94>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	bf0c      	ite	eq
 80059e0:	2301      	moveq	r3, #1
 80059e2:	2300      	movne	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	e022      	b.n	8005a2e <HAL_TIM_PWM_Start_DMA+0xda>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d109      	bne.n	8005a02 <HAL_TIM_PWM_Start_DMA+0xae>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	bf0c      	ite	eq
 80059fa:	2301      	moveq	r3, #1
 80059fc:	2300      	movne	r3, #0
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	e015      	b.n	8005a2e <HAL_TIM_PWM_Start_DMA+0xda>
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d109      	bne.n	8005a1c <HAL_TIM_PWM_Start_DMA+0xc8>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	bf0c      	ite	eq
 8005a14:	2301      	moveq	r3, #1
 8005a16:	2300      	movne	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	e008      	b.n	8005a2e <HAL_TIM_PWM_Start_DMA+0xda>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	bf0c      	ite	eq
 8005a28:	2301      	moveq	r3, #1
 8005a2a:	2300      	movne	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d024      	beq.n	8005a7c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <HAL_TIM_PWM_Start_DMA+0xea>
 8005a38:	887b      	ldrh	r3, [r7, #2]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e137      	b.n	8005cb2 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d104      	bne.n	8005a52 <HAL_TIM_PWM_Start_DMA+0xfe>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a50:	e016      	b.n	8005a80 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d104      	bne.n	8005a62 <HAL_TIM_PWM_Start_DMA+0x10e>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a60:	e00e      	b.n	8005a80 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d104      	bne.n	8005a72 <HAL_TIM_PWM_Start_DMA+0x11e>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a70:	e006      	b.n	8005a80 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2202      	movs	r2, #2
 8005a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a7a:	e001      	b.n	8005a80 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e118      	b.n	8005cb2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b0c      	cmp	r3, #12
 8005a84:	f200 80ae 	bhi.w	8005be4 <HAL_TIM_PWM_Start_DMA+0x290>
 8005a88:	a201      	add	r2, pc, #4	@ (adr r2, 8005a90 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005ac5 	.word	0x08005ac5
 8005a94:	08005be5 	.word	0x08005be5
 8005a98:	08005be5 	.word	0x08005be5
 8005a9c:	08005be5 	.word	0x08005be5
 8005aa0:	08005b0d 	.word	0x08005b0d
 8005aa4:	08005be5 	.word	0x08005be5
 8005aa8:	08005be5 	.word	0x08005be5
 8005aac:	08005be5 	.word	0x08005be5
 8005ab0:	08005b55 	.word	0x08005b55
 8005ab4:	08005be5 	.word	0x08005be5
 8005ab8:	08005be5 	.word	0x08005be5
 8005abc:	08005be5 	.word	0x08005be5
 8005ac0:	08005b9d 	.word	0x08005b9d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac8:	4a7c      	ldr	r2, [pc, #496]	@ (8005cbc <HAL_TIM_PWM_Start_DMA+0x368>)
 8005aca:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad0:	4a7b      	ldr	r2, [pc, #492]	@ (8005cc0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005ad2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad8:	4a7a      	ldr	r2, [pc, #488]	@ (8005cc4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005ada:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3334      	adds	r3, #52	@ 0x34
 8005ae8:	461a      	mov	r2, r3
 8005aea:	887b      	ldrh	r3, [r7, #2]
 8005aec:	f7fc fad2 	bl	8002094 <HAL_DMA_Start_IT>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e0db      	b.n	8005cb2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68da      	ldr	r2, [r3, #12]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b08:	60da      	str	r2, [r3, #12]
      break;
 8005b0a:	e06e      	b.n	8005bea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b10:	4a6a      	ldr	r2, [pc, #424]	@ (8005cbc <HAL_TIM_PWM_Start_DMA+0x368>)
 8005b12:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b18:	4a69      	ldr	r2, [pc, #420]	@ (8005cc0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005b1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b20:	4a68      	ldr	r2, [pc, #416]	@ (8005cc4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005b22:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3338      	adds	r3, #56	@ 0x38
 8005b30:	461a      	mov	r2, r3
 8005b32:	887b      	ldrh	r3, [r7, #2]
 8005b34:	f7fc faae 	bl	8002094 <HAL_DMA_Start_IT>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e0b7      	b.n	8005cb2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b50:	60da      	str	r2, [r3, #12]
      break;
 8005b52:	e04a      	b.n	8005bea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b58:	4a58      	ldr	r2, [pc, #352]	@ (8005cbc <HAL_TIM_PWM_Start_DMA+0x368>)
 8005b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b60:	4a57      	ldr	r2, [pc, #348]	@ (8005cc0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005b62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b68:	4a56      	ldr	r2, [pc, #344]	@ (8005cc4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005b6a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005b70:	6879      	ldr	r1, [r7, #4]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	333c      	adds	r3, #60	@ 0x3c
 8005b78:	461a      	mov	r2, r3
 8005b7a:	887b      	ldrh	r3, [r7, #2]
 8005b7c:	f7fc fa8a 	bl	8002094 <HAL_DMA_Start_IT>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e093      	b.n	8005cb2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b98:	60da      	str	r2, [r3, #12]
      break;
 8005b9a:	e026      	b.n	8005bea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba0:	4a46      	ldr	r2, [pc, #280]	@ (8005cbc <HAL_TIM_PWM_Start_DMA+0x368>)
 8005ba2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba8:	4a45      	ldr	r2, [pc, #276]	@ (8005cc0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005baa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb0:	4a44      	ldr	r2, [pc, #272]	@ (8005cc4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005bb2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005bb8:	6879      	ldr	r1, [r7, #4]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3340      	adds	r3, #64	@ 0x40
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	887b      	ldrh	r3, [r7, #2]
 8005bc4:	f7fc fa66 	bl	8002094 <HAL_DMA_Start_IT>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e06f      	b.n	8005cb2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005be0:	60da      	str	r2, [r3, #12]
      break;
 8005be2:	e002      	b.n	8005bea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	75fb      	strb	r3, [r7, #23]
      break;
 8005be8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d15f      	bne.n	8005cb0 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fd99 	bl	8006730 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a31      	ldr	r2, [pc, #196]	@ (8005cc8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d004      	beq.n	8005c12 <HAL_TIM_PWM_Start_DMA+0x2be>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a2f      	ldr	r2, [pc, #188]	@ (8005ccc <HAL_TIM_PWM_Start_DMA+0x378>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d101      	bne.n	8005c16 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8005c12:	2301      	movs	r3, #1
 8005c14:	e000      	b.n	8005c18 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8005c16:	2300      	movs	r3, #0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d007      	beq.n	8005c2c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c2a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a25      	ldr	r2, [pc, #148]	@ (8005cc8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d022      	beq.n	8005c7c <HAL_TIM_PWM_Start_DMA+0x328>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c3e:	d01d      	beq.n	8005c7c <HAL_TIM_PWM_Start_DMA+0x328>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a22      	ldr	r2, [pc, #136]	@ (8005cd0 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d018      	beq.n	8005c7c <HAL_TIM_PWM_Start_DMA+0x328>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a21      	ldr	r2, [pc, #132]	@ (8005cd4 <HAL_TIM_PWM_Start_DMA+0x380>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d013      	beq.n	8005c7c <HAL_TIM_PWM_Start_DMA+0x328>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a1f      	ldr	r2, [pc, #124]	@ (8005cd8 <HAL_TIM_PWM_Start_DMA+0x384>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00e      	beq.n	8005c7c <HAL_TIM_PWM_Start_DMA+0x328>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a1a      	ldr	r2, [pc, #104]	@ (8005ccc <HAL_TIM_PWM_Start_DMA+0x378>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d009      	beq.n	8005c7c <HAL_TIM_PWM_Start_DMA+0x328>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8005cdc <HAL_TIM_PWM_Start_DMA+0x388>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d004      	beq.n	8005c7c <HAL_TIM_PWM_Start_DMA+0x328>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a1a      	ldr	r2, [pc, #104]	@ (8005ce0 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d111      	bne.n	8005ca0 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	2b06      	cmp	r3, #6
 8005c8c:	d010      	beq.n	8005cb0 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0201 	orr.w	r2, r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c9e:	e007      	b.n	8005cb0 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0201 	orr.w	r2, r2, #1
 8005cae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	08006167 	.word	0x08006167
 8005cc0:	0800620f 	.word	0x0800620f
 8005cc4:	080060d5 	.word	0x080060d5
 8005cc8:	40010000 	.word	0x40010000
 8005ccc:	40010400 	.word	0x40010400
 8005cd0:	40000400 	.word	0x40000400
 8005cd4:	40000800 	.word	0x40000800
 8005cd8:	40000c00 	.word	0x40000c00
 8005cdc:	40014000 	.word	0x40014000
 8005ce0:	40001800 	.word	0x40001800

08005ce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d020      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01b      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f06f 0202 	mvn.w	r2, #2
 8005d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f99e 	bl	8006070 <HAL_TIM_IC_CaptureCallback>
 8005d34:	e005      	b.n	8005d42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f990 	bl	800605c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f9a1 	bl	8006084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d020      	beq.n	8005d94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01b      	beq.n	8005d94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f06f 0204 	mvn.w	r2, #4
 8005d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f978 	bl	8006070 <HAL_TIM_IC_CaptureCallback>
 8005d80:	e005      	b.n	8005d8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f96a 	bl	800605c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f97b 	bl	8006084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f003 0308 	and.w	r3, r3, #8
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d020      	beq.n	8005de0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f003 0308 	and.w	r3, r3, #8
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01b      	beq.n	8005de0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f06f 0208 	mvn.w	r2, #8
 8005db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2204      	movs	r2, #4
 8005db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	f003 0303 	and.w	r3, r3, #3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f952 	bl	8006070 <HAL_TIM_IC_CaptureCallback>
 8005dcc:	e005      	b.n	8005dda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f944 	bl	800605c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f955 	bl	8006084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f003 0310 	and.w	r3, r3, #16
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d020      	beq.n	8005e2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f003 0310 	and.w	r3, r3, #16
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d01b      	beq.n	8005e2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f06f 0210 	mvn.w	r2, #16
 8005dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2208      	movs	r2, #8
 8005e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f92c 	bl	8006070 <HAL_TIM_IC_CaptureCallback>
 8005e18:	e005      	b.n	8005e26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f91e 	bl	800605c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f92f 	bl	8006084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00c      	beq.n	8005e50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d007      	beq.n	8005e50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0201 	mvn.w	r2, #1
 8005e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f8fc 	bl	8006048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00c      	beq.n	8005e74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d007      	beq.n	8005e74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fd0a 	bl	8006888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00c      	beq.n	8005e98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d007      	beq.n	8005e98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f90a 	bl	80060ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00c      	beq.n	8005ebc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d007      	beq.n	8005ebc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f06f 0220 	mvn.w	r2, #32
 8005eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fcdc 	bl	8006874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ebc:	bf00      	nop
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d101      	bne.n	8005ee2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ede:	2302      	movs	r3, #2
 8005ee0:	e0ae      	b.n	8006040 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b0c      	cmp	r3, #12
 8005eee:	f200 809f 	bhi.w	8006030 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef8:	08005f2d 	.word	0x08005f2d
 8005efc:	08006031 	.word	0x08006031
 8005f00:	08006031 	.word	0x08006031
 8005f04:	08006031 	.word	0x08006031
 8005f08:	08005f6d 	.word	0x08005f6d
 8005f0c:	08006031 	.word	0x08006031
 8005f10:	08006031 	.word	0x08006031
 8005f14:	08006031 	.word	0x08006031
 8005f18:	08005faf 	.word	0x08005faf
 8005f1c:	08006031 	.word	0x08006031
 8005f20:	08006031 	.word	0x08006031
 8005f24:	08006031 	.word	0x08006031
 8005f28:	08005fef 	.word	0x08005fef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68b9      	ldr	r1, [r7, #8]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fa4c 	bl	80063d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0208 	orr.w	r2, r2, #8
 8005f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699a      	ldr	r2, [r3, #24]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0204 	bic.w	r2, r2, #4
 8005f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6999      	ldr	r1, [r3, #24]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	691a      	ldr	r2, [r3, #16]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	619a      	str	r2, [r3, #24]
      break;
 8005f6a:	e064      	b.n	8006036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68b9      	ldr	r1, [r7, #8]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fa9c 	bl	80064b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699a      	ldr	r2, [r3, #24]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6999      	ldr	r1, [r3, #24]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	021a      	lsls	r2, r3, #8
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	619a      	str	r2, [r3, #24]
      break;
 8005fac:	e043      	b.n	8006036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 faf1 	bl	800659c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69da      	ldr	r2, [r3, #28]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f042 0208 	orr.w	r2, r2, #8
 8005fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69da      	ldr	r2, [r3, #28]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0204 	bic.w	r2, r2, #4
 8005fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69d9      	ldr	r1, [r3, #28]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	61da      	str	r2, [r3, #28]
      break;
 8005fec:	e023      	b.n	8006036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 fb45 	bl	8006684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69da      	ldr	r2, [r3, #28]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69d9      	ldr	r1, [r3, #28]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	021a      	lsls	r2, r3, #8
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	61da      	str	r2, [r3, #28]
      break;
 800602e:	e002      	b.n	8006036 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	75fb      	strb	r3, [r7, #23]
      break;
 8006034:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800603e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d107      	bne.n	80060fc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060fa:	e02a      	b.n	8006152 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	429a      	cmp	r2, r3
 8006104:	d107      	bne.n	8006116 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2202      	movs	r2, #2
 800610a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006114:	e01d      	b.n	8006152 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	429a      	cmp	r2, r3
 800611e:	d107      	bne.n	8006130 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2204      	movs	r2, #4
 8006124:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800612e:	e010      	b.n	8006152 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	429a      	cmp	r2, r3
 8006138:	d107      	bne.n	800614a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2208      	movs	r2, #8
 800613e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006148:	e003      	b.n	8006152 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f7ff ffb4 	bl	80060c0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	771a      	strb	r2, [r3, #28]
}
 800615e:	bf00      	nop
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006172:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	429a      	cmp	r2, r3
 800617c:	d10b      	bne.n	8006196 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2201      	movs	r2, #1
 8006182:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d136      	bne.n	80061fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006194:	e031      	b.n	80061fa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	429a      	cmp	r2, r3
 800619e:	d10b      	bne.n	80061b8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2202      	movs	r2, #2
 80061a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d125      	bne.n	80061fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061b6:	e020      	b.n	80061fa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d10b      	bne.n	80061da <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2204      	movs	r2, #4
 80061c6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d114      	bne.n	80061fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061d8:	e00f      	b.n	80061fa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d10a      	bne.n	80061fa <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2208      	movs	r2, #8
 80061e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d103      	bne.n	80061fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f7ff ff42 	bl	8006084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	771a      	strb	r2, [r3, #28]
}
 8006206:	bf00      	nop
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	429a      	cmp	r2, r3
 8006224:	d103      	bne.n	800622e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2201      	movs	r2, #1
 800622a:	771a      	strb	r2, [r3, #28]
 800622c:	e019      	b.n	8006262 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	429a      	cmp	r2, r3
 8006236:	d103      	bne.n	8006240 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2202      	movs	r2, #2
 800623c:	771a      	strb	r2, [r3, #28]
 800623e:	e010      	b.n	8006262 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	429a      	cmp	r2, r3
 8006248:	d103      	bne.n	8006252 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2204      	movs	r2, #4
 800624e:	771a      	strb	r2, [r3, #28]
 8006250:	e007      	b.n	8006262 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	429a      	cmp	r2, r3
 800625a:	d102      	bne.n	8006262 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2208      	movs	r2, #8
 8006260:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f7ff ff18 	bl	8006098 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	771a      	strb	r2, [r3, #28]
}
 800626e:	bf00      	nop
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a46      	ldr	r2, [pc, #280]	@ (80063a4 <TIM_Base_SetConfig+0x12c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d013      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006296:	d00f      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a43      	ldr	r2, [pc, #268]	@ (80063a8 <TIM_Base_SetConfig+0x130>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00b      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a42      	ldr	r2, [pc, #264]	@ (80063ac <TIM_Base_SetConfig+0x134>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d007      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a41      	ldr	r2, [pc, #260]	@ (80063b0 <TIM_Base_SetConfig+0x138>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d003      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a40      	ldr	r2, [pc, #256]	@ (80063b4 <TIM_Base_SetConfig+0x13c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d108      	bne.n	80062ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a35      	ldr	r2, [pc, #212]	@ (80063a4 <TIM_Base_SetConfig+0x12c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d02b      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062d8:	d027      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a32      	ldr	r2, [pc, #200]	@ (80063a8 <TIM_Base_SetConfig+0x130>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d023      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a31      	ldr	r2, [pc, #196]	@ (80063ac <TIM_Base_SetConfig+0x134>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d01f      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a30      	ldr	r2, [pc, #192]	@ (80063b0 <TIM_Base_SetConfig+0x138>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d01b      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a2f      	ldr	r2, [pc, #188]	@ (80063b4 <TIM_Base_SetConfig+0x13c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d017      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a2e      	ldr	r2, [pc, #184]	@ (80063b8 <TIM_Base_SetConfig+0x140>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d013      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a2d      	ldr	r2, [pc, #180]	@ (80063bc <TIM_Base_SetConfig+0x144>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d00f      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a2c      	ldr	r2, [pc, #176]	@ (80063c0 <TIM_Base_SetConfig+0x148>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00b      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a2b      	ldr	r2, [pc, #172]	@ (80063c4 <TIM_Base_SetConfig+0x14c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d007      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a2a      	ldr	r2, [pc, #168]	@ (80063c8 <TIM_Base_SetConfig+0x150>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d003      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a29      	ldr	r2, [pc, #164]	@ (80063cc <TIM_Base_SetConfig+0x154>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d108      	bne.n	800633c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a10      	ldr	r2, [pc, #64]	@ (80063a4 <TIM_Base_SetConfig+0x12c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d003      	beq.n	8006370 <TIM_Base_SetConfig+0xf8>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a12      	ldr	r2, [pc, #72]	@ (80063b4 <TIM_Base_SetConfig+0x13c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d103      	bne.n	8006378 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	691a      	ldr	r2, [r3, #16]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b01      	cmp	r3, #1
 8006388:	d105      	bne.n	8006396 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f023 0201 	bic.w	r2, r3, #1
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	611a      	str	r2, [r3, #16]
  }
}
 8006396:	bf00      	nop
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40010000 	.word	0x40010000
 80063a8:	40000400 	.word	0x40000400
 80063ac:	40000800 	.word	0x40000800
 80063b0:	40000c00 	.word	0x40000c00
 80063b4:	40010400 	.word	0x40010400
 80063b8:	40014000 	.word	0x40014000
 80063bc:	40014400 	.word	0x40014400
 80063c0:	40014800 	.word	0x40014800
 80063c4:	40001800 	.word	0x40001800
 80063c8:	40001c00 	.word	0x40001c00
 80063cc:	40002000 	.word	0x40002000

080063d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	f023 0201 	bic.w	r2, r3, #1
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f023 0302 	bic.w	r3, r3, #2
 8006418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	4313      	orrs	r3, r2
 8006422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a20      	ldr	r2, [pc, #128]	@ (80064a8 <TIM_OC1_SetConfig+0xd8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d003      	beq.n	8006434 <TIM_OC1_SetConfig+0x64>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a1f      	ldr	r2, [pc, #124]	@ (80064ac <TIM_OC1_SetConfig+0xdc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d10c      	bne.n	800644e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f023 0308 	bic.w	r3, r3, #8
 800643a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f023 0304 	bic.w	r3, r3, #4
 800644c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a15      	ldr	r2, [pc, #84]	@ (80064a8 <TIM_OC1_SetConfig+0xd8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d003      	beq.n	800645e <TIM_OC1_SetConfig+0x8e>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a14      	ldr	r2, [pc, #80]	@ (80064ac <TIM_OC1_SetConfig+0xdc>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d111      	bne.n	8006482 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800646c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	4313      	orrs	r3, r2
 8006476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4313      	orrs	r3, r2
 8006480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	621a      	str	r2, [r3, #32]
}
 800649c:	bf00      	nop
 800649e:	371c      	adds	r7, #28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	40010000 	.word	0x40010000
 80064ac:	40010400 	.word	0x40010400

080064b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	f023 0210 	bic.w	r2, r3, #16
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	021b      	lsls	r3, r3, #8
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f023 0320 	bic.w	r3, r3, #32
 80064fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	011b      	lsls	r3, r3, #4
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	4313      	orrs	r3, r2
 8006506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a22      	ldr	r2, [pc, #136]	@ (8006594 <TIM_OC2_SetConfig+0xe4>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d003      	beq.n	8006518 <TIM_OC2_SetConfig+0x68>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a21      	ldr	r2, [pc, #132]	@ (8006598 <TIM_OC2_SetConfig+0xe8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d10d      	bne.n	8006534 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800651e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	011b      	lsls	r3, r3, #4
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4313      	orrs	r3, r2
 800652a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006532:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a17      	ldr	r2, [pc, #92]	@ (8006594 <TIM_OC2_SetConfig+0xe4>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d003      	beq.n	8006544 <TIM_OC2_SetConfig+0x94>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a16      	ldr	r2, [pc, #88]	@ (8006598 <TIM_OC2_SetConfig+0xe8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d113      	bne.n	800656c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800654a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	4313      	orrs	r3, r2
 800656a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	621a      	str	r2, [r3, #32]
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40010000 	.word	0x40010000
 8006598:	40010400 	.word	0x40010400

0800659c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f023 0303 	bic.w	r3, r3, #3
 80065d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	021b      	lsls	r3, r3, #8
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a21      	ldr	r2, [pc, #132]	@ (800667c <TIM_OC3_SetConfig+0xe0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d003      	beq.n	8006602 <TIM_OC3_SetConfig+0x66>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a20      	ldr	r2, [pc, #128]	@ (8006680 <TIM_OC3_SetConfig+0xe4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d10d      	bne.n	800661e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800661c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a16      	ldr	r2, [pc, #88]	@ (800667c <TIM_OC3_SetConfig+0xe0>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d003      	beq.n	800662e <TIM_OC3_SetConfig+0x92>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a15      	ldr	r2, [pc, #84]	@ (8006680 <TIM_OC3_SetConfig+0xe4>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d113      	bne.n	8006656 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800663c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	4313      	orrs	r3, r2
 8006654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	621a      	str	r2, [r3, #32]
}
 8006670:	bf00      	nop
 8006672:	371c      	adds	r7, #28
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	40010000 	.word	0x40010000
 8006680:	40010400 	.word	0x40010400

08006684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	021b      	lsls	r3, r3, #8
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	031b      	lsls	r3, r3, #12
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a12      	ldr	r2, [pc, #72]	@ (8006728 <TIM_OC4_SetConfig+0xa4>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d003      	beq.n	80066ec <TIM_OC4_SetConfig+0x68>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a11      	ldr	r2, [pc, #68]	@ (800672c <TIM_OC4_SetConfig+0xa8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d109      	bne.n	8006700 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	019b      	lsls	r3, r3, #6
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	621a      	str	r2, [r3, #32]
}
 800671a:	bf00      	nop
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	40010000 	.word	0x40010000
 800672c:	40010400 	.word	0x40010400

08006730 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f003 031f 	and.w	r3, r3, #31
 8006742:	2201      	movs	r2, #1
 8006744:	fa02 f303 	lsl.w	r3, r2, r3
 8006748:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6a1a      	ldr	r2, [r3, #32]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	43db      	mvns	r3, r3
 8006752:	401a      	ands	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a1a      	ldr	r2, [r3, #32]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f003 031f 	and.w	r3, r3, #31
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	fa01 f303 	lsl.w	r3, r1, r3
 8006768:	431a      	orrs	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
	...

0800677c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800678c:	2b01      	cmp	r3, #1
 800678e:	d101      	bne.n	8006794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006790:	2302      	movs	r3, #2
 8006792:	e05a      	b.n	800684a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2202      	movs	r2, #2
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a21      	ldr	r2, [pc, #132]	@ (8006858 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d022      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067e0:	d01d      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a1d      	ldr	r2, [pc, #116]	@ (800685c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d018      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006860 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d013      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006864 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d00e      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a18      	ldr	r2, [pc, #96]	@ (8006868 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d009      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a17      	ldr	r2, [pc, #92]	@ (800686c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d004      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a15      	ldr	r2, [pc, #84]	@ (8006870 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d10c      	bne.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006824:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	4313      	orrs	r3, r2
 800682e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40010000 	.word	0x40010000
 800685c:	40000400 	.word	0x40000400
 8006860:	40000800 	.word	0x40000800
 8006864:	40000c00 	.word	0x40000c00
 8006868:	40010400 	.word	0x40010400
 800686c:	40014000 	.word	0x40014000
 8006870:	40001800 	.word	0x40001800

08006874 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e042      	b.n	8006934 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d106      	bne.n	80068c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7fb f870 	bl	80019a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2224      	movs	r2, #36	@ 0x24
 80068cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fd69 	bl	80073b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	691a      	ldr	r2, [r3, #16]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	695a      	ldr	r2, [r3, #20]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2220      	movs	r2, #32
 8006920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08a      	sub	sp, #40	@ 0x28
 8006940:	af02      	add	r7, sp, #8
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	4613      	mov	r3, r2
 800694a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b20      	cmp	r3, #32
 800695a:	d175      	bne.n	8006a48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <HAL_UART_Transmit+0x2c>
 8006962:	88fb      	ldrh	r3, [r7, #6]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e06e      	b.n	8006a4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2221      	movs	r2, #33	@ 0x21
 8006976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800697a:	f7fb f99b 	bl	8001cb4 <HAL_GetTick>
 800697e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	88fa      	ldrh	r2, [r7, #6]
 8006984:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	88fa      	ldrh	r2, [r7, #6]
 800698a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006994:	d108      	bne.n	80069a8 <HAL_UART_Transmit+0x6c>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d104      	bne.n	80069a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800699e:	2300      	movs	r3, #0
 80069a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	61bb      	str	r3, [r7, #24]
 80069a6:	e003      	b.n	80069b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069ac:	2300      	movs	r3, #0
 80069ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069b0:	e02e      	b.n	8006a10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2200      	movs	r2, #0
 80069ba:	2180      	movs	r1, #128	@ 0x80
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 fb05 	bl	8006fcc <UART_WaitOnFlagUntilTimeout>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d005      	beq.n	80069d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e03a      	b.n	8006a4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10b      	bne.n	80069f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	3302      	adds	r3, #2
 80069ee:	61bb      	str	r3, [r7, #24]
 80069f0:	e007      	b.n	8006a02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	781a      	ldrb	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	3301      	adds	r3, #1
 8006a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1cb      	bne.n	80069b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2200      	movs	r2, #0
 8006a22:	2140      	movs	r1, #64	@ 0x40
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 fad1 	bl	8006fcc <UART_WaitOnFlagUntilTimeout>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d005      	beq.n	8006a3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e006      	b.n	8006a4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	e000      	b.n	8006a4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006a48:	2302      	movs	r3, #2
  }
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3720      	adds	r7, #32
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
	...

08006a54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b0ba      	sub	sp, #232	@ 0xe8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10f      	bne.n	8006aba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a9e:	f003 0320 	and.w	r3, r3, #32
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d009      	beq.n	8006aba <HAL_UART_IRQHandler+0x66>
 8006aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aaa:	f003 0320 	and.w	r3, r3, #32
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fbc2 	bl	800723c <UART_Receive_IT>
      return;
 8006ab8:	e25b      	b.n	8006f72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006aba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 80de 	beq.w	8006c80 <HAL_UART_IRQHandler+0x22c>
 8006ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d106      	bne.n	8006ade <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ad4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 80d1 	beq.w	8006c80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00b      	beq.n	8006b02 <HAL_UART_IRQHandler+0xae>
 8006aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d005      	beq.n	8006b02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006afa:	f043 0201 	orr.w	r2, r3, #1
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b06:	f003 0304 	and.w	r3, r3, #4
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00b      	beq.n	8006b26 <HAL_UART_IRQHandler+0xd2>
 8006b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d005      	beq.n	8006b26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b1e:	f043 0202 	orr.w	r2, r3, #2
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00b      	beq.n	8006b4a <HAL_UART_IRQHandler+0xf6>
 8006b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d005      	beq.n	8006b4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b42:	f043 0204 	orr.w	r2, r3, #4
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d011      	beq.n	8006b7a <HAL_UART_IRQHandler+0x126>
 8006b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b5a:	f003 0320 	and.w	r3, r3, #32
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d105      	bne.n	8006b6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d005      	beq.n	8006b7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b72:	f043 0208 	orr.w	r2, r3, #8
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 81f2 	beq.w	8006f68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b88:	f003 0320 	and.w	r3, r3, #32
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d008      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x14e>
 8006b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fb4d 	bl	800723c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bac:	2b40      	cmp	r3, #64	@ 0x40
 8006bae:	bf0c      	ite	eq
 8006bb0:	2301      	moveq	r3, #1
 8006bb2:	2300      	movne	r3, #0
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d103      	bne.n	8006bce <HAL_UART_IRQHandler+0x17a>
 8006bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d04f      	beq.n	8006c6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fa55 	bl	800707e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bde:	2b40      	cmp	r3, #64	@ 0x40
 8006be0:	d141      	bne.n	8006c66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3314      	adds	r3, #20
 8006be8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006bf0:	e853 3f00 	ldrex	r3, [r3]
 8006bf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3314      	adds	r3, #20
 8006c0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1d9      	bne.n	8006be2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d013      	beq.n	8006c5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c3a:	4a7e      	ldr	r2, [pc, #504]	@ (8006e34 <HAL_UART_IRQHandler+0x3e0>)
 8006c3c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fb faee 	bl	8002224 <HAL_DMA_Abort_IT>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d016      	beq.n	8006c7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006c58:	4610      	mov	r0, r2
 8006c5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c5c:	e00e      	b.n	8006c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f99e 	bl	8006fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c64:	e00a      	b.n	8006c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f99a 	bl	8006fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6c:	e006      	b.n	8006c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f996 	bl	8006fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006c7a:	e175      	b.n	8006f68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c7c:	bf00      	nop
    return;
 8006c7e:	e173      	b.n	8006f68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	f040 814f 	bne.w	8006f28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c8e:	f003 0310 	and.w	r3, r3, #16
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 8148 	beq.w	8006f28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c9c:	f003 0310 	and.w	r3, r3, #16
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 8141 	beq.w	8006f28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60bb      	str	r3, [r7, #8]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	60bb      	str	r3, [r7, #8]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	60bb      	str	r3, [r7, #8]
 8006cba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc6:	2b40      	cmp	r3, #64	@ 0x40
 8006cc8:	f040 80b6 	bne.w	8006e38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 8145 	beq.w	8006f6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cea:	429a      	cmp	r2, r3
 8006cec:	f080 813e 	bcs.w	8006f6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cf6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d02:	f000 8088 	beq.w	8006e16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	330c      	adds	r3, #12
 8006d0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	330c      	adds	r3, #12
 8006d2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006d32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d42:	e841 2300 	strex	r3, r2, [r1]
 8006d46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1d9      	bne.n	8006d06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3314      	adds	r3, #20
 8006d58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d64:	f023 0301 	bic.w	r3, r3, #1
 8006d68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3314      	adds	r3, #20
 8006d72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e1      	bne.n	8006d52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3314      	adds	r3, #20
 8006d94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006d9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006da0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006da4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3314      	adds	r3, #20
 8006dae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006db2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006db4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006db8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006dba:	e841 2300 	strex	r3, r2, [r1]
 8006dbe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006dc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1e3      	bne.n	8006d8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	330c      	adds	r3, #12
 8006dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006de4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006de6:	f023 0310 	bic.w	r3, r3, #16
 8006dea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	330c      	adds	r3, #12
 8006df4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006df8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006dfa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006dfe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e00:	e841 2300 	strex	r3, r2, [r1]
 8006e04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1e3      	bne.n	8006dd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fb f997 	bl	8002144 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2202      	movs	r2, #2
 8006e1a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f8c1 	bl	8006fb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e32:	e09b      	b.n	8006f6c <HAL_UART_IRQHandler+0x518>
 8006e34:	08007145 	.word	0x08007145
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 808e 	beq.w	8006f70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006e54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 8089 	beq.w	8006f70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	330c      	adds	r3, #12
 8006e64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006e82:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e3      	bne.n	8006e5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3314      	adds	r3, #20
 8006e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	f023 0301 	bic.w	r3, r3, #1
 8006eac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3314      	adds	r3, #20
 8006eb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006eba:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e3      	bne.n	8006e96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	330c      	adds	r3, #12
 8006ee2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	60fb      	str	r3, [r7, #12]
   return(result);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0310 	bic.w	r3, r3, #16
 8006ef2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	330c      	adds	r3, #12
 8006efc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006f00:	61fa      	str	r2, [r7, #28]
 8006f02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f04:	69b9      	ldr	r1, [r7, #24]
 8006f06:	69fa      	ldr	r2, [r7, #28]
 8006f08:	e841 2300 	strex	r3, r2, [r1]
 8006f0c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e3      	bne.n	8006edc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f847 	bl	8006fb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f26:	e023      	b.n	8006f70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d009      	beq.n	8006f48 <HAL_UART_IRQHandler+0x4f4>
 8006f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d003      	beq.n	8006f48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f913 	bl	800716c <UART_Transmit_IT>
    return;
 8006f46:	e014      	b.n	8006f72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00e      	beq.n	8006f72 <HAL_UART_IRQHandler+0x51e>
 8006f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d008      	beq.n	8006f72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f953 	bl	800720c <UART_EndTransmit_IT>
    return;
 8006f66:	e004      	b.n	8006f72 <HAL_UART_IRQHandler+0x51e>
    return;
 8006f68:	bf00      	nop
 8006f6a:	e002      	b.n	8006f72 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f6c:	bf00      	nop
 8006f6e:	e000      	b.n	8006f72 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f70:	bf00      	nop
  }
}
 8006f72:	37e8      	adds	r7, #232	@ 0xe8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fdc:	e03b      	b.n	8007056 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe4:	d037      	beq.n	8007056 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe6:	f7fa fe65 	bl	8001cb4 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	6a3a      	ldr	r2, [r7, #32]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d302      	bcc.n	8006ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e03a      	b.n	8007076 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f003 0304 	and.w	r3, r3, #4
 800700a:	2b00      	cmp	r3, #0
 800700c:	d023      	beq.n	8007056 <UART_WaitOnFlagUntilTimeout+0x8a>
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b80      	cmp	r3, #128	@ 0x80
 8007012:	d020      	beq.n	8007056 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b40      	cmp	r3, #64	@ 0x40
 8007018:	d01d      	beq.n	8007056 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0308 	and.w	r3, r3, #8
 8007024:	2b08      	cmp	r3, #8
 8007026:	d116      	bne.n	8007056 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007028:	2300      	movs	r3, #0
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 f81d 	bl	800707e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2208      	movs	r2, #8
 8007048:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e00f      	b.n	8007076 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	4013      	ands	r3, r2
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	429a      	cmp	r2, r3
 8007064:	bf0c      	ite	eq
 8007066:	2301      	moveq	r3, #1
 8007068:	2300      	movne	r3, #0
 800706a:	b2db      	uxtb	r3, r3
 800706c:	461a      	mov	r2, r3
 800706e:	79fb      	ldrb	r3, [r7, #7]
 8007070:	429a      	cmp	r2, r3
 8007072:	d0b4      	beq.n	8006fde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800707e:	b480      	push	{r7}
 8007080:	b095      	sub	sp, #84	@ 0x54
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	330c      	adds	r3, #12
 800708c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007090:	e853 3f00 	ldrex	r3, [r3]
 8007094:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007098:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800709c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	330c      	adds	r3, #12
 80070a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80070a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e5      	bne.n	8007086 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3314      	adds	r3, #20
 80070c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	e853 3f00 	ldrex	r3, [r3]
 80070c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	f023 0301 	bic.w	r3, r3, #1
 80070d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3314      	adds	r3, #20
 80070d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e5      	bne.n	80070ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d119      	bne.n	800712a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	330c      	adds	r3, #12
 80070fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	e853 3f00 	ldrex	r3, [r3]
 8007104:	60bb      	str	r3, [r7, #8]
   return(result);
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	f023 0310 	bic.w	r3, r3, #16
 800710c:	647b      	str	r3, [r7, #68]	@ 0x44
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	330c      	adds	r3, #12
 8007114:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007116:	61ba      	str	r2, [r7, #24]
 8007118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711a:	6979      	ldr	r1, [r7, #20]
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	e841 2300 	strex	r3, r2, [r1]
 8007122:	613b      	str	r3, [r7, #16]
   return(result);
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1e5      	bne.n	80070f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2220      	movs	r2, #32
 800712e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007138:	bf00      	nop
 800713a:	3754      	adds	r7, #84	@ 0x54
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007150:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f7ff ff1e 	bl	8006fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007164:	bf00      	nop
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b21      	cmp	r3, #33	@ 0x21
 800717e:	d13e      	bne.n	80071fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007188:	d114      	bne.n	80071b4 <UART_Transmit_IT+0x48>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d110      	bne.n	80071b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	1c9a      	adds	r2, r3, #2
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	621a      	str	r2, [r3, #32]
 80071b2:	e008      	b.n	80071c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a1b      	ldr	r3, [r3, #32]
 80071b8:	1c59      	adds	r1, r3, #1
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	6211      	str	r1, [r2, #32]
 80071be:	781a      	ldrb	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	3b01      	subs	r3, #1
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	4619      	mov	r1, r3
 80071d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10f      	bne.n	80071fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68da      	ldr	r2, [r3, #12]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68da      	ldr	r2, [r3, #12]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	e000      	b.n	8007200 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071fe:	2302      	movs	r3, #2
  }
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68da      	ldr	r2, [r3, #12]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007222:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2220      	movs	r2, #32
 8007228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f7ff fea3 	bl	8006f78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08c      	sub	sp, #48	@ 0x30
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b22      	cmp	r3, #34	@ 0x22
 800724e:	f040 80ae 	bne.w	80073ae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800725a:	d117      	bne.n	800728c <UART_Receive_IT+0x50>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d113      	bne.n	800728c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007264:	2300      	movs	r3, #0
 8007266:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800726c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	b29b      	uxth	r3, r3
 8007276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727a:	b29a      	uxth	r2, r3
 800727c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007284:	1c9a      	adds	r2, r3, #2
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	629a      	str	r2, [r3, #40]	@ 0x28
 800728a:	e026      	b.n	80072da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007290:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007292:	2300      	movs	r3, #0
 8007294:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800729e:	d007      	beq.n	80072b0 <UART_Receive_IT+0x74>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10a      	bne.n	80072be <UART_Receive_IT+0x82>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d106      	bne.n	80072be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ba:	701a      	strb	r2, [r3, #0]
 80072bc:	e008      	b.n	80072d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072de:	b29b      	uxth	r3, r3
 80072e0:	3b01      	subs	r3, #1
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	4619      	mov	r1, r3
 80072e8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d15d      	bne.n	80073aa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68da      	ldr	r2, [r3, #12]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f022 0220 	bic.w	r2, r2, #32
 80072fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68da      	ldr	r2, [r3, #12]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800730c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	695a      	ldr	r2, [r3, #20]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0201 	bic.w	r2, r2, #1
 800731c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2220      	movs	r2, #32
 8007322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007330:	2b01      	cmp	r3, #1
 8007332:	d135      	bne.n	80073a0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	330c      	adds	r3, #12
 8007340:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	e853 3f00 	ldrex	r3, [r3]
 8007348:	613b      	str	r3, [r7, #16]
   return(result);
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	f023 0310 	bic.w	r3, r3, #16
 8007350:	627b      	str	r3, [r7, #36]	@ 0x24
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	330c      	adds	r3, #12
 8007358:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800735a:	623a      	str	r2, [r7, #32]
 800735c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735e:	69f9      	ldr	r1, [r7, #28]
 8007360:	6a3a      	ldr	r2, [r7, #32]
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	61bb      	str	r3, [r7, #24]
   return(result);
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e5      	bne.n	800733a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0310 	and.w	r3, r3, #16
 8007378:	2b10      	cmp	r3, #16
 800737a:	d10a      	bne.n	8007392 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800737c:	2300      	movs	r3, #0
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	60fb      	str	r3, [r7, #12]
 8007390:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f7ff fe0b 	bl	8006fb4 <HAL_UARTEx_RxEventCallback>
 800739e:	e002      	b.n	80073a6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff fdf3 	bl	8006f8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	e002      	b.n	80073b0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	e000      	b.n	80073b0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80073ae:	2302      	movs	r3, #2
  }
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3730      	adds	r7, #48	@ 0x30
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073bc:	b0c0      	sub	sp, #256	@ 0x100
 80073be:	af00      	add	r7, sp, #0
 80073c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80073d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d4:	68d9      	ldr	r1, [r3, #12]
 80073d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	ea40 0301 	orr.w	r3, r0, r1
 80073e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e6:	689a      	ldr	r2, [r3, #8]
 80073e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	431a      	orrs	r2, r3
 80073f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	431a      	orrs	r2, r3
 80073f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	4313      	orrs	r3, r2
 8007400:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007410:	f021 010c 	bic.w	r1, r1, #12
 8007414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800741e:	430b      	orrs	r3, r1
 8007420:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800742e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007432:	6999      	ldr	r1, [r3, #24]
 8007434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	ea40 0301 	orr.w	r3, r0, r1
 800743e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	4b8f      	ldr	r3, [pc, #572]	@ (8007684 <UART_SetConfig+0x2cc>)
 8007448:	429a      	cmp	r2, r3
 800744a:	d005      	beq.n	8007458 <UART_SetConfig+0xa0>
 800744c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	4b8d      	ldr	r3, [pc, #564]	@ (8007688 <UART_SetConfig+0x2d0>)
 8007454:	429a      	cmp	r2, r3
 8007456:	d104      	bne.n	8007462 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007458:	f7fd fdd0 	bl	8004ffc <HAL_RCC_GetPCLK2Freq>
 800745c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007460:	e003      	b.n	800746a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007462:	f7fd fdb7 	bl	8004fd4 <HAL_RCC_GetPCLK1Freq>
 8007466:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800746a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007474:	f040 810c 	bne.w	8007690 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800747c:	2200      	movs	r2, #0
 800747e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007482:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007486:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800748a:	4622      	mov	r2, r4
 800748c:	462b      	mov	r3, r5
 800748e:	1891      	adds	r1, r2, r2
 8007490:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007492:	415b      	adcs	r3, r3
 8007494:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007496:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800749a:	4621      	mov	r1, r4
 800749c:	eb12 0801 	adds.w	r8, r2, r1
 80074a0:	4629      	mov	r1, r5
 80074a2:	eb43 0901 	adc.w	r9, r3, r1
 80074a6:	f04f 0200 	mov.w	r2, #0
 80074aa:	f04f 0300 	mov.w	r3, #0
 80074ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074ba:	4690      	mov	r8, r2
 80074bc:	4699      	mov	r9, r3
 80074be:	4623      	mov	r3, r4
 80074c0:	eb18 0303 	adds.w	r3, r8, r3
 80074c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074c8:	462b      	mov	r3, r5
 80074ca:	eb49 0303 	adc.w	r3, r9, r3
 80074ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80074d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80074e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80074e6:	460b      	mov	r3, r1
 80074e8:	18db      	adds	r3, r3, r3
 80074ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80074ec:	4613      	mov	r3, r2
 80074ee:	eb42 0303 	adc.w	r3, r2, r3
 80074f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80074f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80074f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80074fc:	f7f8 fe8a 	bl	8000214 <__aeabi_uldivmod>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4b61      	ldr	r3, [pc, #388]	@ (800768c <UART_SetConfig+0x2d4>)
 8007506:	fba3 2302 	umull	r2, r3, r3, r2
 800750a:	095b      	lsrs	r3, r3, #5
 800750c:	011c      	lsls	r4, r3, #4
 800750e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007512:	2200      	movs	r2, #0
 8007514:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007518:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800751c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007520:	4642      	mov	r2, r8
 8007522:	464b      	mov	r3, r9
 8007524:	1891      	adds	r1, r2, r2
 8007526:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007528:	415b      	adcs	r3, r3
 800752a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800752c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007530:	4641      	mov	r1, r8
 8007532:	eb12 0a01 	adds.w	sl, r2, r1
 8007536:	4649      	mov	r1, r9
 8007538:	eb43 0b01 	adc.w	fp, r3, r1
 800753c:	f04f 0200 	mov.w	r2, #0
 8007540:	f04f 0300 	mov.w	r3, #0
 8007544:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007548:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800754c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007550:	4692      	mov	sl, r2
 8007552:	469b      	mov	fp, r3
 8007554:	4643      	mov	r3, r8
 8007556:	eb1a 0303 	adds.w	r3, sl, r3
 800755a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800755e:	464b      	mov	r3, r9
 8007560:	eb4b 0303 	adc.w	r3, fp, r3
 8007564:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007574:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007578:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800757c:	460b      	mov	r3, r1
 800757e:	18db      	adds	r3, r3, r3
 8007580:	643b      	str	r3, [r7, #64]	@ 0x40
 8007582:	4613      	mov	r3, r2
 8007584:	eb42 0303 	adc.w	r3, r2, r3
 8007588:	647b      	str	r3, [r7, #68]	@ 0x44
 800758a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800758e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007592:	f7f8 fe3f 	bl	8000214 <__aeabi_uldivmod>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4611      	mov	r1, r2
 800759c:	4b3b      	ldr	r3, [pc, #236]	@ (800768c <UART_SetConfig+0x2d4>)
 800759e:	fba3 2301 	umull	r2, r3, r3, r1
 80075a2:	095b      	lsrs	r3, r3, #5
 80075a4:	2264      	movs	r2, #100	@ 0x64
 80075a6:	fb02 f303 	mul.w	r3, r2, r3
 80075aa:	1acb      	subs	r3, r1, r3
 80075ac:	00db      	lsls	r3, r3, #3
 80075ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80075b2:	4b36      	ldr	r3, [pc, #216]	@ (800768c <UART_SetConfig+0x2d4>)
 80075b4:	fba3 2302 	umull	r2, r3, r3, r2
 80075b8:	095b      	lsrs	r3, r3, #5
 80075ba:	005b      	lsls	r3, r3, #1
 80075bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80075c0:	441c      	add	r4, r3
 80075c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075c6:	2200      	movs	r2, #0
 80075c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80075d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80075d4:	4642      	mov	r2, r8
 80075d6:	464b      	mov	r3, r9
 80075d8:	1891      	adds	r1, r2, r2
 80075da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80075dc:	415b      	adcs	r3, r3
 80075de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80075e4:	4641      	mov	r1, r8
 80075e6:	1851      	adds	r1, r2, r1
 80075e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80075ea:	4649      	mov	r1, r9
 80075ec:	414b      	adcs	r3, r1
 80075ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f0:	f04f 0200 	mov.w	r2, #0
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80075fc:	4659      	mov	r1, fp
 80075fe:	00cb      	lsls	r3, r1, #3
 8007600:	4651      	mov	r1, sl
 8007602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007606:	4651      	mov	r1, sl
 8007608:	00ca      	lsls	r2, r1, #3
 800760a:	4610      	mov	r0, r2
 800760c:	4619      	mov	r1, r3
 800760e:	4603      	mov	r3, r0
 8007610:	4642      	mov	r2, r8
 8007612:	189b      	adds	r3, r3, r2
 8007614:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007618:	464b      	mov	r3, r9
 800761a:	460a      	mov	r2, r1
 800761c:	eb42 0303 	adc.w	r3, r2, r3
 8007620:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007630:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007634:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007638:	460b      	mov	r3, r1
 800763a:	18db      	adds	r3, r3, r3
 800763c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800763e:	4613      	mov	r3, r2
 8007640:	eb42 0303 	adc.w	r3, r2, r3
 8007644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007646:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800764a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800764e:	f7f8 fde1 	bl	8000214 <__aeabi_uldivmod>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	4b0d      	ldr	r3, [pc, #52]	@ (800768c <UART_SetConfig+0x2d4>)
 8007658:	fba3 1302 	umull	r1, r3, r3, r2
 800765c:	095b      	lsrs	r3, r3, #5
 800765e:	2164      	movs	r1, #100	@ 0x64
 8007660:	fb01 f303 	mul.w	r3, r1, r3
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	3332      	adds	r3, #50	@ 0x32
 800766a:	4a08      	ldr	r2, [pc, #32]	@ (800768c <UART_SetConfig+0x2d4>)
 800766c:	fba2 2303 	umull	r2, r3, r2, r3
 8007670:	095b      	lsrs	r3, r3, #5
 8007672:	f003 0207 	and.w	r2, r3, #7
 8007676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4422      	add	r2, r4
 800767e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007680:	e106      	b.n	8007890 <UART_SetConfig+0x4d8>
 8007682:	bf00      	nop
 8007684:	40011000 	.word	0x40011000
 8007688:	40011400 	.word	0x40011400
 800768c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007694:	2200      	movs	r2, #0
 8007696:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800769a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800769e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80076a2:	4642      	mov	r2, r8
 80076a4:	464b      	mov	r3, r9
 80076a6:	1891      	adds	r1, r2, r2
 80076a8:	6239      	str	r1, [r7, #32]
 80076aa:	415b      	adcs	r3, r3
 80076ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80076ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076b2:	4641      	mov	r1, r8
 80076b4:	1854      	adds	r4, r2, r1
 80076b6:	4649      	mov	r1, r9
 80076b8:	eb43 0501 	adc.w	r5, r3, r1
 80076bc:	f04f 0200 	mov.w	r2, #0
 80076c0:	f04f 0300 	mov.w	r3, #0
 80076c4:	00eb      	lsls	r3, r5, #3
 80076c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076ca:	00e2      	lsls	r2, r4, #3
 80076cc:	4614      	mov	r4, r2
 80076ce:	461d      	mov	r5, r3
 80076d0:	4643      	mov	r3, r8
 80076d2:	18e3      	adds	r3, r4, r3
 80076d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076d8:	464b      	mov	r3, r9
 80076da:	eb45 0303 	adc.w	r3, r5, r3
 80076de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80076f2:	f04f 0200 	mov.w	r2, #0
 80076f6:	f04f 0300 	mov.w	r3, #0
 80076fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80076fe:	4629      	mov	r1, r5
 8007700:	008b      	lsls	r3, r1, #2
 8007702:	4621      	mov	r1, r4
 8007704:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007708:	4621      	mov	r1, r4
 800770a:	008a      	lsls	r2, r1, #2
 800770c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007710:	f7f8 fd80 	bl	8000214 <__aeabi_uldivmod>
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	4b60      	ldr	r3, [pc, #384]	@ (800789c <UART_SetConfig+0x4e4>)
 800771a:	fba3 2302 	umull	r2, r3, r3, r2
 800771e:	095b      	lsrs	r3, r3, #5
 8007720:	011c      	lsls	r4, r3, #4
 8007722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007726:	2200      	movs	r2, #0
 8007728:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800772c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007730:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007734:	4642      	mov	r2, r8
 8007736:	464b      	mov	r3, r9
 8007738:	1891      	adds	r1, r2, r2
 800773a:	61b9      	str	r1, [r7, #24]
 800773c:	415b      	adcs	r3, r3
 800773e:	61fb      	str	r3, [r7, #28]
 8007740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007744:	4641      	mov	r1, r8
 8007746:	1851      	adds	r1, r2, r1
 8007748:	6139      	str	r1, [r7, #16]
 800774a:	4649      	mov	r1, r9
 800774c:	414b      	adcs	r3, r1
 800774e:	617b      	str	r3, [r7, #20]
 8007750:	f04f 0200 	mov.w	r2, #0
 8007754:	f04f 0300 	mov.w	r3, #0
 8007758:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800775c:	4659      	mov	r1, fp
 800775e:	00cb      	lsls	r3, r1, #3
 8007760:	4651      	mov	r1, sl
 8007762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007766:	4651      	mov	r1, sl
 8007768:	00ca      	lsls	r2, r1, #3
 800776a:	4610      	mov	r0, r2
 800776c:	4619      	mov	r1, r3
 800776e:	4603      	mov	r3, r0
 8007770:	4642      	mov	r2, r8
 8007772:	189b      	adds	r3, r3, r2
 8007774:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007778:	464b      	mov	r3, r9
 800777a:	460a      	mov	r2, r1
 800777c:	eb42 0303 	adc.w	r3, r2, r3
 8007780:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800778e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007790:	f04f 0200 	mov.w	r2, #0
 8007794:	f04f 0300 	mov.w	r3, #0
 8007798:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800779c:	4649      	mov	r1, r9
 800779e:	008b      	lsls	r3, r1, #2
 80077a0:	4641      	mov	r1, r8
 80077a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077a6:	4641      	mov	r1, r8
 80077a8:	008a      	lsls	r2, r1, #2
 80077aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80077ae:	f7f8 fd31 	bl	8000214 <__aeabi_uldivmod>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4611      	mov	r1, r2
 80077b8:	4b38      	ldr	r3, [pc, #224]	@ (800789c <UART_SetConfig+0x4e4>)
 80077ba:	fba3 2301 	umull	r2, r3, r3, r1
 80077be:	095b      	lsrs	r3, r3, #5
 80077c0:	2264      	movs	r2, #100	@ 0x64
 80077c2:	fb02 f303 	mul.w	r3, r2, r3
 80077c6:	1acb      	subs	r3, r1, r3
 80077c8:	011b      	lsls	r3, r3, #4
 80077ca:	3332      	adds	r3, #50	@ 0x32
 80077cc:	4a33      	ldr	r2, [pc, #204]	@ (800789c <UART_SetConfig+0x4e4>)
 80077ce:	fba2 2303 	umull	r2, r3, r2, r3
 80077d2:	095b      	lsrs	r3, r3, #5
 80077d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077d8:	441c      	add	r4, r3
 80077da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077de:	2200      	movs	r2, #0
 80077e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80077e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80077e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80077e8:	4642      	mov	r2, r8
 80077ea:	464b      	mov	r3, r9
 80077ec:	1891      	adds	r1, r2, r2
 80077ee:	60b9      	str	r1, [r7, #8]
 80077f0:	415b      	adcs	r3, r3
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077f8:	4641      	mov	r1, r8
 80077fa:	1851      	adds	r1, r2, r1
 80077fc:	6039      	str	r1, [r7, #0]
 80077fe:	4649      	mov	r1, r9
 8007800:	414b      	adcs	r3, r1
 8007802:	607b      	str	r3, [r7, #4]
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	f04f 0300 	mov.w	r3, #0
 800780c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007810:	4659      	mov	r1, fp
 8007812:	00cb      	lsls	r3, r1, #3
 8007814:	4651      	mov	r1, sl
 8007816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800781a:	4651      	mov	r1, sl
 800781c:	00ca      	lsls	r2, r1, #3
 800781e:	4610      	mov	r0, r2
 8007820:	4619      	mov	r1, r3
 8007822:	4603      	mov	r3, r0
 8007824:	4642      	mov	r2, r8
 8007826:	189b      	adds	r3, r3, r2
 8007828:	66bb      	str	r3, [r7, #104]	@ 0x68
 800782a:	464b      	mov	r3, r9
 800782c:	460a      	mov	r2, r1
 800782e:	eb42 0303 	adc.w	r3, r2, r3
 8007832:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	663b      	str	r3, [r7, #96]	@ 0x60
 800783e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007840:	f04f 0200 	mov.w	r2, #0
 8007844:	f04f 0300 	mov.w	r3, #0
 8007848:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800784c:	4649      	mov	r1, r9
 800784e:	008b      	lsls	r3, r1, #2
 8007850:	4641      	mov	r1, r8
 8007852:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007856:	4641      	mov	r1, r8
 8007858:	008a      	lsls	r2, r1, #2
 800785a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800785e:	f7f8 fcd9 	bl	8000214 <__aeabi_uldivmod>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	4b0d      	ldr	r3, [pc, #52]	@ (800789c <UART_SetConfig+0x4e4>)
 8007868:	fba3 1302 	umull	r1, r3, r3, r2
 800786c:	095b      	lsrs	r3, r3, #5
 800786e:	2164      	movs	r1, #100	@ 0x64
 8007870:	fb01 f303 	mul.w	r3, r1, r3
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	011b      	lsls	r3, r3, #4
 8007878:	3332      	adds	r3, #50	@ 0x32
 800787a:	4a08      	ldr	r2, [pc, #32]	@ (800789c <UART_SetConfig+0x4e4>)
 800787c:	fba2 2303 	umull	r2, r3, r2, r3
 8007880:	095b      	lsrs	r3, r3, #5
 8007882:	f003 020f 	and.w	r2, r3, #15
 8007886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4422      	add	r2, r4
 800788e:	609a      	str	r2, [r3, #8]
}
 8007890:	bf00      	nop
 8007892:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007896:	46bd      	mov	sp, r7
 8007898:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800789c:	51eb851f 	.word	0x51eb851f

080078a0 <memset>:
 80078a0:	4402      	add	r2, r0
 80078a2:	4603      	mov	r3, r0
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d100      	bne.n	80078aa <memset+0xa>
 80078a8:	4770      	bx	lr
 80078aa:	f803 1b01 	strb.w	r1, [r3], #1
 80078ae:	e7f9      	b.n	80078a4 <memset+0x4>

080078b0 <__libc_init_array>:
 80078b0:	b570      	push	{r4, r5, r6, lr}
 80078b2:	4d0d      	ldr	r5, [pc, #52]	@ (80078e8 <__libc_init_array+0x38>)
 80078b4:	4c0d      	ldr	r4, [pc, #52]	@ (80078ec <__libc_init_array+0x3c>)
 80078b6:	1b64      	subs	r4, r4, r5
 80078b8:	10a4      	asrs	r4, r4, #2
 80078ba:	2600      	movs	r6, #0
 80078bc:	42a6      	cmp	r6, r4
 80078be:	d109      	bne.n	80078d4 <__libc_init_array+0x24>
 80078c0:	4d0b      	ldr	r5, [pc, #44]	@ (80078f0 <__libc_init_array+0x40>)
 80078c2:	4c0c      	ldr	r4, [pc, #48]	@ (80078f4 <__libc_init_array+0x44>)
 80078c4:	f000 f818 	bl	80078f8 <_init>
 80078c8:	1b64      	subs	r4, r4, r5
 80078ca:	10a4      	asrs	r4, r4, #2
 80078cc:	2600      	movs	r6, #0
 80078ce:	42a6      	cmp	r6, r4
 80078d0:	d105      	bne.n	80078de <__libc_init_array+0x2e>
 80078d2:	bd70      	pop	{r4, r5, r6, pc}
 80078d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80078d8:	4798      	blx	r3
 80078da:	3601      	adds	r6, #1
 80078dc:	e7ee      	b.n	80078bc <__libc_init_array+0xc>
 80078de:	f855 3b04 	ldr.w	r3, [r5], #4
 80078e2:	4798      	blx	r3
 80078e4:	3601      	adds	r6, #1
 80078e6:	e7f2      	b.n	80078ce <__libc_init_array+0x1e>
 80078e8:	08007958 	.word	0x08007958
 80078ec:	08007958 	.word	0x08007958
 80078f0:	08007958 	.word	0x08007958
 80078f4:	0800795c 	.word	0x0800795c

080078f8 <_init>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	bf00      	nop
 80078fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fe:	bc08      	pop	{r3}
 8007900:	469e      	mov	lr, r3
 8007902:	4770      	bx	lr

08007904 <_fini>:
 8007904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007906:	bf00      	nop
 8007908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800790a:	bc08      	pop	{r3}
 800790c:	469e      	mov	lr, r3
 800790e:	4770      	bx	lr
