
MAESTRO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006438  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080065fc  080065fc  000075fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800661c  0800661c  00008020  2**0
                  CONTENTS
  4 .ARM          00000008  0800661c  0800661c  0000761c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006624  08006624  00008020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006624  08006624  00007624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006628  08006628  00007628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  0800662c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  20000020  0800664c  00008020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  0800664c  00008648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7aa  00000000  00000000  00008050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eda  00000000  00000000  000157fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  000176d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0f  00000000  00000000  000184f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022022  00000000  00000000  00018fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001113c  00000000  00000000  0003b021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d108a  00000000  00000000  0004c15d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d1e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd4  00000000  00000000  0011d22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00120e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000020 	.word	0x20000020
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080065e4 	.word	0x080065e4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000024 	.word	0x20000024
 8000200:	080065e4 	.word	0x080065e4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_GPIO_EXTI_Callback>:
	rgb_color black_color = {0, 0, 0};
	uint16_t led_pos_counter = 0;

	  uint8_t data = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af02      	add	r7, sp, #8
 80004fa:	4603      	mov	r3, r0
 80004fc:	80fb      	strh	r3, [r7, #6]
    uint32_t current_time = HAL_GetTick(); // Obtener el tiempo actual en ms
 80004fe:	f001 fad5 	bl	8001aac <HAL_GetTick>
 8000502:	60f8      	str	r0, [r7, #12]
    activador = 1;
 8000504:	4b93      	ldr	r3, [pc, #588]	@ (8000754 <HAL_GPIO_EXTI_Callback+0x260>)
 8000506:	2201      	movs	r2, #1
 8000508:	701a      	strb	r2, [r3, #0]

    if (GPIO_Pin == sensor1_Pin) {
 800050a:	88fb      	ldrh	r3, [r7, #6]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d15d      	bne.n	80005cc <HAL_GPIO_EXTI_Callback+0xd8>
        if ((current_time - last_interrupt_time) > debounce_delay) {
 8000510:	4b91      	ldr	r3, [pc, #580]	@ (8000758 <HAL_GPIO_EXTI_Callback+0x264>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	68fa      	ldr	r2, [r7, #12]
 8000516:	1ad2      	subs	r2, r2, r3
 8000518:	4b90      	ldr	r3, [pc, #576]	@ (800075c <HAL_GPIO_EXTI_Callback+0x268>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	429a      	cmp	r2, r3
 800051e:	f240 8335 	bls.w	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
            if (activa1 == 0) {
 8000522:	4b8f      	ldr	r3, [pc, #572]	@ (8000760 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d119      	bne.n	800055e <HAL_GPIO_EXTI_Callback+0x6a>
                espacios_disponibles--;
 800052a:	4b8e      	ldr	r3, [pc, #568]	@ (8000764 <HAL_GPIO_EXTI_Callback+0x270>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	3b01      	subs	r3, #1
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4b8c      	ldr	r3, [pc, #560]	@ (8000764 <HAL_GPIO_EXTI_Callback+0x270>)
 8000534:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 0, &black_color);
 8000536:	4a8c      	ldr	r2, [pc, #560]	@ (8000768 <HAL_GPIO_EXTI_Callback+0x274>)
 8000538:	2100      	movs	r1, #0
 800053a:	488c      	ldr	r0, [pc, #560]	@ (800076c <HAL_GPIO_EXTI_Callback+0x278>)
 800053c:	f000 ffbc 	bl	80014b8 <set_specific_led>
                set_specific_led(leds, 0, &red_color);
 8000540:	4a8b      	ldr	r2, [pc, #556]	@ (8000770 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000542:	2100      	movs	r1, #0
 8000544:	4889      	ldr	r0, [pc, #548]	@ (800076c <HAL_GPIO_EXTI_Callback+0x278>)
 8000546:	f000 ffb7 	bl	80014b8 <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 800054a:	23d8      	movs	r3, #216	@ 0xd8
 800054c:	4a87      	ldr	r2, [pc, #540]	@ (800076c <HAL_GPIO_EXTI_Callback+0x278>)
 800054e:	2100      	movs	r1, #0
 8000550:	4888      	ldr	r0, [pc, #544]	@ (8000774 <HAL_GPIO_EXTI_Callback+0x280>)
 8000552:	f005 f877 	bl	8005644 <HAL_TIM_PWM_Start_DMA>

                activa1 = 1;
 8000556:	4b82      	ldr	r3, [pc, #520]	@ (8000760 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000558:	2201      	movs	r2, #1
 800055a:	701a      	strb	r2, [r3, #0]
 800055c:	e01c      	b.n	8000598 <HAL_GPIO_EXTI_Callback+0xa4>
            } else if (activa1 == 1) {
 800055e:	4b80      	ldr	r3, [pc, #512]	@ (8000760 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d118      	bne.n	8000598 <HAL_GPIO_EXTI_Callback+0xa4>
                espacios_disponibles++;
 8000566:	4b7f      	ldr	r3, [pc, #508]	@ (8000764 <HAL_GPIO_EXTI_Callback+0x270>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	3301      	adds	r3, #1
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4b7d      	ldr	r3, [pc, #500]	@ (8000764 <HAL_GPIO_EXTI_Callback+0x270>)
 8000570:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 0, &black_color);
 8000572:	4a7d      	ldr	r2, [pc, #500]	@ (8000768 <HAL_GPIO_EXTI_Callback+0x274>)
 8000574:	2100      	movs	r1, #0
 8000576:	487d      	ldr	r0, [pc, #500]	@ (800076c <HAL_GPIO_EXTI_Callback+0x278>)
 8000578:	f000 ff9e 	bl	80014b8 <set_specific_led>
               set_specific_led(leds, 0, &green_color);
 800057c:	4a7e      	ldr	r2, [pc, #504]	@ (8000778 <HAL_GPIO_EXTI_Callback+0x284>)
 800057e:	2100      	movs	r1, #0
 8000580:	487a      	ldr	r0, [pc, #488]	@ (800076c <HAL_GPIO_EXTI_Callback+0x278>)
 8000582:	f000 ff99 	bl	80014b8 <set_specific_led>
               HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000586:	23d8      	movs	r3, #216	@ 0xd8
 8000588:	4a78      	ldr	r2, [pc, #480]	@ (800076c <HAL_GPIO_EXTI_Callback+0x278>)
 800058a:	2100      	movs	r1, #0
 800058c:	4879      	ldr	r0, [pc, #484]	@ (8000774 <HAL_GPIO_EXTI_Callback+0x280>)
 800058e:	f005 f859 	bl	8005644 <HAL_TIM_PWM_Start_DMA>
                activa1 = 0;
 8000592:	4b73      	ldr	r3, [pc, #460]	@ (8000760 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
            }
            last_interrupt_time = current_time;
 8000598:	4a6f      	ldr	r2, [pc, #444]	@ (8000758 <HAL_GPIO_EXTI_Callback+0x264>)
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	6013      	str	r3, [r2, #0]

             data = 0x08; // Declarar una variable de tipo uint8_t con el dato a enviar
 800059e:	4b77      	ldr	r3, [pc, #476]	@ (800077c <HAL_GPIO_EXTI_Callback+0x288>)
 80005a0:	2208      	movs	r2, #8
 80005a2:	701a      	strb	r2, [r3, #0]

           					 // Enviar datos al ESP32
	  if (HAL_I2C_Master_Transmit(&hi2c1, ESP32_ADDRESS << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 80005a4:	4b76      	ldr	r3, [pc, #472]	@ (8000780 <HAL_GPIO_EXTI_Callback+0x28c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	b299      	uxth	r1, r3
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2301      	movs	r3, #1
 80005b6:	4a71      	ldr	r2, [pc, #452]	@ (800077c <HAL_GPIO_EXTI_Callback+0x288>)
 80005b8:	4872      	ldr	r0, [pc, #456]	@ (8000784 <HAL_GPIO_EXTI_Callback+0x290>)
 80005ba:	f002 fa79 	bl	8002ab0 <HAL_I2C_Master_Transmit>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	f000 82e3 	beq.w	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
			  // Manejar el error
			  Error_Handler();
 80005c6:	f000 ff2b 	bl	8001420 <Error_Handler>
			  Error_Handler();
		  }*/

        }
    }
}
 80005ca:	e2df      	b.n	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
    } else if (GPIO_Pin == sensor2_Pin) {
 80005cc:	88fb      	ldrh	r3, [r7, #6]
 80005ce:	2b02      	cmp	r3, #2
 80005d0:	d15d      	bne.n	800068e <HAL_GPIO_EXTI_Callback+0x19a>
        if ((current_time - last_interrupt_time) > debounce_delay) {
 80005d2:	4b61      	ldr	r3, [pc, #388]	@ (8000758 <HAL_GPIO_EXTI_Callback+0x264>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	1ad2      	subs	r2, r2, r3
 80005da:	4b60      	ldr	r3, [pc, #384]	@ (800075c <HAL_GPIO_EXTI_Callback+0x268>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	f240 82d4 	bls.w	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
            if (activa2 == 0) {
 80005e4:	4b68      	ldr	r3, [pc, #416]	@ (8000788 <HAL_GPIO_EXTI_Callback+0x294>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d119      	bne.n	8000620 <HAL_GPIO_EXTI_Callback+0x12c>
                espacios_disponibles--;
 80005ec:	4b5d      	ldr	r3, [pc, #372]	@ (8000764 <HAL_GPIO_EXTI_Callback+0x270>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b5b      	ldr	r3, [pc, #364]	@ (8000764 <HAL_GPIO_EXTI_Callback+0x270>)
 80005f6:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 1, &black_color);
 80005f8:	4a5b      	ldr	r2, [pc, #364]	@ (8000768 <HAL_GPIO_EXTI_Callback+0x274>)
 80005fa:	2101      	movs	r1, #1
 80005fc:	485b      	ldr	r0, [pc, #364]	@ (800076c <HAL_GPIO_EXTI_Callback+0x278>)
 80005fe:	f000 ff5b 	bl	80014b8 <set_specific_led>
                set_specific_led(leds, 1, &red_color);
 8000602:	4a5b      	ldr	r2, [pc, #364]	@ (8000770 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000604:	2101      	movs	r1, #1
 8000606:	4859      	ldr	r0, [pc, #356]	@ (800076c <HAL_GPIO_EXTI_Callback+0x278>)
 8000608:	f000 ff56 	bl	80014b8 <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 800060c:	23d8      	movs	r3, #216	@ 0xd8
 800060e:	4a57      	ldr	r2, [pc, #348]	@ (800076c <HAL_GPIO_EXTI_Callback+0x278>)
 8000610:	2100      	movs	r1, #0
 8000612:	4858      	ldr	r0, [pc, #352]	@ (8000774 <HAL_GPIO_EXTI_Callback+0x280>)
 8000614:	f005 f816 	bl	8005644 <HAL_TIM_PWM_Start_DMA>
                activa2 = 1;
 8000618:	4b5b      	ldr	r3, [pc, #364]	@ (8000788 <HAL_GPIO_EXTI_Callback+0x294>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	e01c      	b.n	800065a <HAL_GPIO_EXTI_Callback+0x166>
            } else if (activa2 == 1) {
 8000620:	4b59      	ldr	r3, [pc, #356]	@ (8000788 <HAL_GPIO_EXTI_Callback+0x294>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d118      	bne.n	800065a <HAL_GPIO_EXTI_Callback+0x166>
                espacios_disponibles++;
 8000628:	4b4e      	ldr	r3, [pc, #312]	@ (8000764 <HAL_GPIO_EXTI_Callback+0x270>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	3301      	adds	r3, #1
 800062e:	b2da      	uxtb	r2, r3
 8000630:	4b4c      	ldr	r3, [pc, #304]	@ (8000764 <HAL_GPIO_EXTI_Callback+0x270>)
 8000632:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 1, &black_color);
 8000634:	4a4c      	ldr	r2, [pc, #304]	@ (8000768 <HAL_GPIO_EXTI_Callback+0x274>)
 8000636:	2101      	movs	r1, #1
 8000638:	484c      	ldr	r0, [pc, #304]	@ (800076c <HAL_GPIO_EXTI_Callback+0x278>)
 800063a:	f000 ff3d 	bl	80014b8 <set_specific_led>
                set_specific_led(leds, 1, &green_color);
 800063e:	4a4e      	ldr	r2, [pc, #312]	@ (8000778 <HAL_GPIO_EXTI_Callback+0x284>)
 8000640:	2101      	movs	r1, #1
 8000642:	484a      	ldr	r0, [pc, #296]	@ (800076c <HAL_GPIO_EXTI_Callback+0x278>)
 8000644:	f000 ff38 	bl	80014b8 <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000648:	23d8      	movs	r3, #216	@ 0xd8
 800064a:	4a48      	ldr	r2, [pc, #288]	@ (800076c <HAL_GPIO_EXTI_Callback+0x278>)
 800064c:	2100      	movs	r1, #0
 800064e:	4849      	ldr	r0, [pc, #292]	@ (8000774 <HAL_GPIO_EXTI_Callback+0x280>)
 8000650:	f004 fff8 	bl	8005644 <HAL_TIM_PWM_Start_DMA>
                activa2 = 0;
 8000654:	4b4c      	ldr	r3, [pc, #304]	@ (8000788 <HAL_GPIO_EXTI_Callback+0x294>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
            last_interrupt_time = current_time;
 800065a:	4a3f      	ldr	r2, [pc, #252]	@ (8000758 <HAL_GPIO_EXTI_Callback+0x264>)
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	6013      	str	r3, [r2, #0]
          data = 0x07; // Declarar una variable de tipo uint8_t con el dato a enviar
 8000660:	4b46      	ldr	r3, [pc, #280]	@ (800077c <HAL_GPIO_EXTI_Callback+0x288>)
 8000662:	2207      	movs	r2, #7
 8000664:	701a      	strb	r2, [r3, #0]
		  if (HAL_I2C_Master_Transmit(&hi2c1, ESP32_ADDRESS << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000666:	4b46      	ldr	r3, [pc, #280]	@ (8000780 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	b29b      	uxth	r3, r3
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	b299      	uxth	r1, r3
 8000670:	f04f 33ff 	mov.w	r3, #4294967295
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2301      	movs	r3, #1
 8000678:	4a40      	ldr	r2, [pc, #256]	@ (800077c <HAL_GPIO_EXTI_Callback+0x288>)
 800067a:	4842      	ldr	r0, [pc, #264]	@ (8000784 <HAL_GPIO_EXTI_Callback+0x290>)
 800067c:	f002 fa18 	bl	8002ab0 <HAL_I2C_Master_Transmit>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	f000 8282 	beq.w	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
			  Error_Handler();
 8000688:	f000 feca 	bl	8001420 <Error_Handler>
}
 800068c:	e27e      	b.n	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
    } else if (GPIO_Pin == sensor3_Pin) {
 800068e:	88fb      	ldrh	r3, [r7, #6]
 8000690:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000694:	d17c      	bne.n	8000790 <HAL_GPIO_EXTI_Callback+0x29c>
        if ((current_time - last_interrupt_time) > debounce_delay) {
 8000696:	4b30      	ldr	r3, [pc, #192]	@ (8000758 <HAL_GPIO_EXTI_Callback+0x264>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	1ad2      	subs	r2, r2, r3
 800069e:	4b2f      	ldr	r3, [pc, #188]	@ (800075c <HAL_GPIO_EXTI_Callback+0x268>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	f240 8272 	bls.w	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
            if (activa3 == 0) {
 80006a8:	4b38      	ldr	r3, [pc, #224]	@ (800078c <HAL_GPIO_EXTI_Callback+0x298>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d119      	bne.n	80006e4 <HAL_GPIO_EXTI_Callback+0x1f0>
                espacios_disponibles--;
 80006b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000764 <HAL_GPIO_EXTI_Callback+0x270>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	3b01      	subs	r3, #1
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000764 <HAL_GPIO_EXTI_Callback+0x270>)
 80006ba:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 6, &black_color);
 80006bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000768 <HAL_GPIO_EXTI_Callback+0x274>)
 80006be:	2106      	movs	r1, #6
 80006c0:	482a      	ldr	r0, [pc, #168]	@ (800076c <HAL_GPIO_EXTI_Callback+0x278>)
 80006c2:	f000 fef9 	bl	80014b8 <set_specific_led>
                set_specific_led(leds, 6, &red_color);
 80006c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000770 <HAL_GPIO_EXTI_Callback+0x27c>)
 80006c8:	2106      	movs	r1, #6
 80006ca:	4828      	ldr	r0, [pc, #160]	@ (800076c <HAL_GPIO_EXTI_Callback+0x278>)
 80006cc:	f000 fef4 	bl	80014b8 <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 80006d0:	23d8      	movs	r3, #216	@ 0xd8
 80006d2:	4a26      	ldr	r2, [pc, #152]	@ (800076c <HAL_GPIO_EXTI_Callback+0x278>)
 80006d4:	2100      	movs	r1, #0
 80006d6:	4827      	ldr	r0, [pc, #156]	@ (8000774 <HAL_GPIO_EXTI_Callback+0x280>)
 80006d8:	f004 ffb4 	bl	8005644 <HAL_TIM_PWM_Start_DMA>
                activa3 = 1;
 80006dc:	4b2b      	ldr	r3, [pc, #172]	@ (800078c <HAL_GPIO_EXTI_Callback+0x298>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	e01c      	b.n	800071e <HAL_GPIO_EXTI_Callback+0x22a>
            } else if (activa3 == 1) {
 80006e4:	4b29      	ldr	r3, [pc, #164]	@ (800078c <HAL_GPIO_EXTI_Callback+0x298>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d118      	bne.n	800071e <HAL_GPIO_EXTI_Callback+0x22a>
                espacios_disponibles++;
 80006ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <HAL_GPIO_EXTI_Callback+0x270>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	3301      	adds	r3, #1
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <HAL_GPIO_EXTI_Callback+0x270>)
 80006f6:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 6, &black_color);
 80006f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000768 <HAL_GPIO_EXTI_Callback+0x274>)
 80006fa:	2106      	movs	r1, #6
 80006fc:	481b      	ldr	r0, [pc, #108]	@ (800076c <HAL_GPIO_EXTI_Callback+0x278>)
 80006fe:	f000 fedb 	bl	80014b8 <set_specific_led>
                set_specific_led(leds, 6, &green_color);
 8000702:	4a1d      	ldr	r2, [pc, #116]	@ (8000778 <HAL_GPIO_EXTI_Callback+0x284>)
 8000704:	2106      	movs	r1, #6
 8000706:	4819      	ldr	r0, [pc, #100]	@ (800076c <HAL_GPIO_EXTI_Callback+0x278>)
 8000708:	f000 fed6 	bl	80014b8 <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 800070c:	23d8      	movs	r3, #216	@ 0xd8
 800070e:	4a17      	ldr	r2, [pc, #92]	@ (800076c <HAL_GPIO_EXTI_Callback+0x278>)
 8000710:	2100      	movs	r1, #0
 8000712:	4818      	ldr	r0, [pc, #96]	@ (8000774 <HAL_GPIO_EXTI_Callback+0x280>)
 8000714:	f004 ff96 	bl	8005644 <HAL_TIM_PWM_Start_DMA>
                activa3 = 0;
 8000718:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <HAL_GPIO_EXTI_Callback+0x298>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
            last_interrupt_time = current_time;
 800071e:	4a0e      	ldr	r2, [pc, #56]	@ (8000758 <HAL_GPIO_EXTI_Callback+0x264>)
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6013      	str	r3, [r2, #0]
            data = 0x02; // Declarar una variable de tipo uint8_t con el dato a enviar
 8000724:	4b15      	ldr	r3, [pc, #84]	@ (800077c <HAL_GPIO_EXTI_Callback+0x288>)
 8000726:	2202      	movs	r2, #2
 8000728:	701a      	strb	r2, [r3, #0]
		  if (HAL_I2C_Master_Transmit(&hi2c1, ESP32_ADDRESS << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 800072a:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <HAL_GPIO_EXTI_Callback+0x28c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	b29b      	uxth	r3, r3
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	b299      	uxth	r1, r3
 8000734:	f04f 33ff 	mov.w	r3, #4294967295
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2301      	movs	r3, #1
 800073c:	4a0f      	ldr	r2, [pc, #60]	@ (800077c <HAL_GPIO_EXTI_Callback+0x288>)
 800073e:	4811      	ldr	r0, [pc, #68]	@ (8000784 <HAL_GPIO_EXTI_Callback+0x290>)
 8000740:	f002 f9b6 	bl	8002ab0 <HAL_I2C_Master_Transmit>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	f000 8220 	beq.w	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
			  Error_Handler();
 800074c:	f000 fe68 	bl	8001420 <Error_Handler>
}
 8000750:	e21c      	b.n	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
 8000752:	bf00      	nop
 8000754:	20000044 	.word	0x20000044
 8000758:	20000048 	.word	0x20000048
 800075c:	20000008 	.word	0x20000008
 8000760:	2000003c 	.word	0x2000003c
 8000764:	20000000 	.word	0x20000000
 8000768:	20000640 	.word	0x20000640
 800076c:	20000148 	.word	0x20000148
 8000770:	2000000c 	.word	0x2000000c
 8000774:	200000a0 	.word	0x200000a0
 8000778:	20000010 	.word	0x20000010
 800077c:	20000643 	.word	0x20000643
 8000780:	20000004 	.word	0x20000004
 8000784:	2000004c 	.word	0x2000004c
 8000788:	2000003d 	.word	0x2000003d
 800078c:	2000003e 	.word	0x2000003e
    } else if (GPIO_Pin == sensor4_Pin) {
 8000790:	88fb      	ldrh	r3, [r7, #6]
 8000792:	2b10      	cmp	r3, #16
 8000794:	d15d      	bne.n	8000852 <HAL_GPIO_EXTI_Callback+0x35e>
        if ((current_time - last_interrupt_time) > debounce_delay) {
 8000796:	4b90      	ldr	r3, [pc, #576]	@ (80009d8 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	1ad2      	subs	r2, r2, r3
 800079e:	4b8f      	ldr	r3, [pc, #572]	@ (80009dc <HAL_GPIO_EXTI_Callback+0x4e8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	f240 81f2 	bls.w	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
            if (activa4 == 0) {
 80007a8:	4b8d      	ldr	r3, [pc, #564]	@ (80009e0 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d119      	bne.n	80007e4 <HAL_GPIO_EXTI_Callback+0x2f0>
                espacios_disponibles--;
 80007b0:	4b8c      	ldr	r3, [pc, #560]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0x4f0>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	3b01      	subs	r3, #1
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b8a      	ldr	r3, [pc, #552]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0x4f0>)
 80007ba:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 3, &black_color);
 80007bc:	4a8a      	ldr	r2, [pc, #552]	@ (80009e8 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80007be:	2103      	movs	r1, #3
 80007c0:	488a      	ldr	r0, [pc, #552]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x4f8>)
 80007c2:	f000 fe79 	bl	80014b8 <set_specific_led>
                set_specific_led(leds, 3, &red_color);
 80007c6:	4a8a      	ldr	r2, [pc, #552]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0x4fc>)
 80007c8:	2103      	movs	r1, #3
 80007ca:	4888      	ldr	r0, [pc, #544]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x4f8>)
 80007cc:	f000 fe74 	bl	80014b8 <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 80007d0:	23d8      	movs	r3, #216	@ 0xd8
 80007d2:	4a86      	ldr	r2, [pc, #536]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x4f8>)
 80007d4:	2100      	movs	r1, #0
 80007d6:	4887      	ldr	r0, [pc, #540]	@ (80009f4 <HAL_GPIO_EXTI_Callback+0x500>)
 80007d8:	f004 ff34 	bl	8005644 <HAL_TIM_PWM_Start_DMA>
                activa4 = 1;
 80007dc:	4b80      	ldr	r3, [pc, #512]	@ (80009e0 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80007de:	2201      	movs	r2, #1
 80007e0:	701a      	strb	r2, [r3, #0]
 80007e2:	e01c      	b.n	800081e <HAL_GPIO_EXTI_Callback+0x32a>
            } else if (activa4 == 1) {
 80007e4:	4b7e      	ldr	r3, [pc, #504]	@ (80009e0 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d118      	bne.n	800081e <HAL_GPIO_EXTI_Callback+0x32a>
                espacios_disponibles++;
 80007ec:	4b7d      	ldr	r3, [pc, #500]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0x4f0>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b7b      	ldr	r3, [pc, #492]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0x4f0>)
 80007f6:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 3, &black_color);
 80007f8:	4a7b      	ldr	r2, [pc, #492]	@ (80009e8 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80007fa:	2103      	movs	r1, #3
 80007fc:	487b      	ldr	r0, [pc, #492]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x4f8>)
 80007fe:	f000 fe5b 	bl	80014b8 <set_specific_led>
                set_specific_led(leds, 3, &green_color);
 8000802:	4a7d      	ldr	r2, [pc, #500]	@ (80009f8 <HAL_GPIO_EXTI_Callback+0x504>)
 8000804:	2103      	movs	r1, #3
 8000806:	4879      	ldr	r0, [pc, #484]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x4f8>)
 8000808:	f000 fe56 	bl	80014b8 <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 800080c:	23d8      	movs	r3, #216	@ 0xd8
 800080e:	4a77      	ldr	r2, [pc, #476]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x4f8>)
 8000810:	2100      	movs	r1, #0
 8000812:	4878      	ldr	r0, [pc, #480]	@ (80009f4 <HAL_GPIO_EXTI_Callback+0x500>)
 8000814:	f004 ff16 	bl	8005644 <HAL_TIM_PWM_Start_DMA>
                activa4 = 0;
 8000818:	4b71      	ldr	r3, [pc, #452]	@ (80009e0 <HAL_GPIO_EXTI_Callback+0x4ec>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
            last_interrupt_time = current_time;
 800081e:	4a6e      	ldr	r2, [pc, #440]	@ (80009d8 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	6013      	str	r3, [r2, #0]
            data = 0x05; // Declarar una variable de tipo uint8_t con el dato a enviar
 8000824:	4b75      	ldr	r3, [pc, #468]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x508>)
 8000826:	2205      	movs	r2, #5
 8000828:	701a      	strb	r2, [r3, #0]
		  if (HAL_I2C_Master_Transmit(&hi2c1, ESP32_ADDRESS << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 800082a:	4b75      	ldr	r3, [pc, #468]	@ (8000a00 <HAL_GPIO_EXTI_Callback+0x50c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	b29b      	uxth	r3, r3
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	b299      	uxth	r1, r3
 8000834:	f04f 33ff 	mov.w	r3, #4294967295
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2301      	movs	r3, #1
 800083c:	4a6f      	ldr	r2, [pc, #444]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x508>)
 800083e:	4871      	ldr	r0, [pc, #452]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x510>)
 8000840:	f002 f936 	bl	8002ab0 <HAL_I2C_Master_Transmit>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	f000 81a0 	beq.w	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
			  Error_Handler();
 800084c:	f000 fde8 	bl	8001420 <Error_Handler>
}
 8000850:	e19c      	b.n	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
    } else if (GPIO_Pin == sensor5_Pin) {
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000858:	d15d      	bne.n	8000916 <HAL_GPIO_EXTI_Callback+0x422>
        if ((current_time - last_interrupt_time) > debounce_delay) {
 800085a:	4b5f      	ldr	r3, [pc, #380]	@ (80009d8 <HAL_GPIO_EXTI_Callback+0x4e4>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	1ad2      	subs	r2, r2, r3
 8000862:	4b5e      	ldr	r3, [pc, #376]	@ (80009dc <HAL_GPIO_EXTI_Callback+0x4e8>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	429a      	cmp	r2, r3
 8000868:	f240 8190 	bls.w	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
            if (activa5 == 0) {
 800086c:	4b66      	ldr	r3, [pc, #408]	@ (8000a08 <HAL_GPIO_EXTI_Callback+0x514>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d119      	bne.n	80008a8 <HAL_GPIO_EXTI_Callback+0x3b4>
                espacios_disponibles--;
 8000874:	4b5b      	ldr	r3, [pc, #364]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0x4f0>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	3b01      	subs	r3, #1
 800087a:	b2da      	uxtb	r2, r3
 800087c:	4b59      	ldr	r3, [pc, #356]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0x4f0>)
 800087e:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 4, &black_color);
 8000880:	4a59      	ldr	r2, [pc, #356]	@ (80009e8 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8000882:	2104      	movs	r1, #4
 8000884:	4859      	ldr	r0, [pc, #356]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x4f8>)
 8000886:	f000 fe17 	bl	80014b8 <set_specific_led>
                set_specific_led(leds, 4, &red_color);
 800088a:	4a59      	ldr	r2, [pc, #356]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0x4fc>)
 800088c:	2104      	movs	r1, #4
 800088e:	4857      	ldr	r0, [pc, #348]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x4f8>)
 8000890:	f000 fe12 	bl	80014b8 <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000894:	23d8      	movs	r3, #216	@ 0xd8
 8000896:	4a55      	ldr	r2, [pc, #340]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x4f8>)
 8000898:	2100      	movs	r1, #0
 800089a:	4856      	ldr	r0, [pc, #344]	@ (80009f4 <HAL_GPIO_EXTI_Callback+0x500>)
 800089c:	f004 fed2 	bl	8005644 <HAL_TIM_PWM_Start_DMA>
                activa5 = 1;
 80008a0:	4b59      	ldr	r3, [pc, #356]	@ (8000a08 <HAL_GPIO_EXTI_Callback+0x514>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
 80008a6:	e01c      	b.n	80008e2 <HAL_GPIO_EXTI_Callback+0x3ee>
            } else if (activa5 == 1) {
 80008a8:	4b57      	ldr	r3, [pc, #348]	@ (8000a08 <HAL_GPIO_EXTI_Callback+0x514>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d118      	bne.n	80008e2 <HAL_GPIO_EXTI_Callback+0x3ee>
                espacios_disponibles++;
 80008b0:	4b4c      	ldr	r3, [pc, #304]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0x4f0>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	3301      	adds	r3, #1
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	4b4a      	ldr	r3, [pc, #296]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0x4f0>)
 80008ba:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 4, &black_color);
 80008bc:	4a4a      	ldr	r2, [pc, #296]	@ (80009e8 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80008be:	2104      	movs	r1, #4
 80008c0:	484a      	ldr	r0, [pc, #296]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x4f8>)
 80008c2:	f000 fdf9 	bl	80014b8 <set_specific_led>
                set_specific_led(leds, 4, &green_color);
 80008c6:	4a4c      	ldr	r2, [pc, #304]	@ (80009f8 <HAL_GPIO_EXTI_Callback+0x504>)
 80008c8:	2104      	movs	r1, #4
 80008ca:	4848      	ldr	r0, [pc, #288]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x4f8>)
 80008cc:	f000 fdf4 	bl	80014b8 <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 80008d0:	23d8      	movs	r3, #216	@ 0xd8
 80008d2:	4a46      	ldr	r2, [pc, #280]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x4f8>)
 80008d4:	2100      	movs	r1, #0
 80008d6:	4847      	ldr	r0, [pc, #284]	@ (80009f4 <HAL_GPIO_EXTI_Callback+0x500>)
 80008d8:	f004 feb4 	bl	8005644 <HAL_TIM_PWM_Start_DMA>
                activa5 = 0;
 80008dc:	4b4a      	ldr	r3, [pc, #296]	@ (8000a08 <HAL_GPIO_EXTI_Callback+0x514>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
            last_interrupt_time = current_time;
 80008e2:	4a3d      	ldr	r2, [pc, #244]	@ (80009d8 <HAL_GPIO_EXTI_Callback+0x4e4>)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	6013      	str	r3, [r2, #0]
             data = 0x04; // Declarar una variable de tipo uint8_t con el dato a enviar
 80008e8:	4b44      	ldr	r3, [pc, #272]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x508>)
 80008ea:	2204      	movs	r2, #4
 80008ec:	701a      	strb	r2, [r3, #0]
			  if (HAL_I2C_Master_Transmit(&hi2c1, ESP32_ADDRESS << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 80008ee:	4b44      	ldr	r3, [pc, #272]	@ (8000a00 <HAL_GPIO_EXTI_Callback+0x50c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	b299      	uxth	r1, r3
 80008f8:	f04f 33ff 	mov.w	r3, #4294967295
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2301      	movs	r3, #1
 8000900:	4a3e      	ldr	r2, [pc, #248]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x508>)
 8000902:	4840      	ldr	r0, [pc, #256]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x510>)
 8000904:	f002 f8d4 	bl	8002ab0 <HAL_I2C_Master_Transmit>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	f000 813e 	beq.w	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
				  Error_Handler();
 8000910:	f000 fd86 	bl	8001420 <Error_Handler>
}
 8000914:	e13a      	b.n	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
    } else if (GPIO_Pin == sensor6_Pin) {
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	2b20      	cmp	r3, #32
 800091a:	d179      	bne.n	8000a10 <HAL_GPIO_EXTI_Callback+0x51c>
        if ((current_time - last_interrupt_time) > debounce_delay) {
 800091c:	4b2e      	ldr	r3, [pc, #184]	@ (80009d8 <HAL_GPIO_EXTI_Callback+0x4e4>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	68fa      	ldr	r2, [r7, #12]
 8000922:	1ad2      	subs	r2, r2, r3
 8000924:	4b2d      	ldr	r3, [pc, #180]	@ (80009dc <HAL_GPIO_EXTI_Callback+0x4e8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	429a      	cmp	r2, r3
 800092a:	f240 812f 	bls.w	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
            if (activa6 == 0) {
 800092e:	4b37      	ldr	r3, [pc, #220]	@ (8000a0c <HAL_GPIO_EXTI_Callback+0x518>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d119      	bne.n	800096a <HAL_GPIO_EXTI_Callback+0x476>
                espacios_disponibles--;
 8000936:	4b2b      	ldr	r3, [pc, #172]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0x4f0>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	3b01      	subs	r3, #1
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b29      	ldr	r3, [pc, #164]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0x4f0>)
 8000940:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 5, &black_color);
 8000942:	4a29      	ldr	r2, [pc, #164]	@ (80009e8 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8000944:	2105      	movs	r1, #5
 8000946:	4829      	ldr	r0, [pc, #164]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x4f8>)
 8000948:	f000 fdb6 	bl	80014b8 <set_specific_led>
                set_specific_led(leds, 5, &red_color);
 800094c:	4a28      	ldr	r2, [pc, #160]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0x4fc>)
 800094e:	2105      	movs	r1, #5
 8000950:	4826      	ldr	r0, [pc, #152]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x4f8>)
 8000952:	f000 fdb1 	bl	80014b8 <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000956:	23d8      	movs	r3, #216	@ 0xd8
 8000958:	4a24      	ldr	r2, [pc, #144]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x4f8>)
 800095a:	2100      	movs	r1, #0
 800095c:	4825      	ldr	r0, [pc, #148]	@ (80009f4 <HAL_GPIO_EXTI_Callback+0x500>)
 800095e:	f004 fe71 	bl	8005644 <HAL_TIM_PWM_Start_DMA>
                activa6 = 1;
 8000962:	4b2a      	ldr	r3, [pc, #168]	@ (8000a0c <HAL_GPIO_EXTI_Callback+0x518>)
 8000964:	2201      	movs	r2, #1
 8000966:	701a      	strb	r2, [r3, #0]
 8000968:	e01c      	b.n	80009a4 <HAL_GPIO_EXTI_Callback+0x4b0>
            } else if (activa6 == 1) {
 800096a:	4b28      	ldr	r3, [pc, #160]	@ (8000a0c <HAL_GPIO_EXTI_Callback+0x518>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d118      	bne.n	80009a4 <HAL_GPIO_EXTI_Callback+0x4b0>
                espacios_disponibles++;
 8000972:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0x4f0>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	3301      	adds	r3, #1
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0x4f0>)
 800097c:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 5, &black_color);
 800097e:	4a1a      	ldr	r2, [pc, #104]	@ (80009e8 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8000980:	2105      	movs	r1, #5
 8000982:	481a      	ldr	r0, [pc, #104]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x4f8>)
 8000984:	f000 fd98 	bl	80014b8 <set_specific_led>
                set_specific_led(leds, 5, &green_color);
 8000988:	4a1b      	ldr	r2, [pc, #108]	@ (80009f8 <HAL_GPIO_EXTI_Callback+0x504>)
 800098a:	2105      	movs	r1, #5
 800098c:	4817      	ldr	r0, [pc, #92]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x4f8>)
 800098e:	f000 fd93 	bl	80014b8 <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000992:	23d8      	movs	r3, #216	@ 0xd8
 8000994:	4a15      	ldr	r2, [pc, #84]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x4f8>)
 8000996:	2100      	movs	r1, #0
 8000998:	4816      	ldr	r0, [pc, #88]	@ (80009f4 <HAL_GPIO_EXTI_Callback+0x500>)
 800099a:	f004 fe53 	bl	8005644 <HAL_TIM_PWM_Start_DMA>
                activa6 = 0;
 800099e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <HAL_GPIO_EXTI_Callback+0x518>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]
            last_interrupt_time = current_time;
 80009a4:	4a0c      	ldr	r2, [pc, #48]	@ (80009d8 <HAL_GPIO_EXTI_Callback+0x4e4>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	6013      	str	r3, [r2, #0]
             data = 0x03; // Declarar una variable de tipo uint8_t con el dato a enviar
 80009aa:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x508>)
 80009ac:	2203      	movs	r2, #3
 80009ae:	701a      	strb	r2, [r3, #0]
			  if (HAL_I2C_Master_Transmit(&hi2c1, ESP32_ADDRESS << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 80009b0:	4b13      	ldr	r3, [pc, #76]	@ (8000a00 <HAL_GPIO_EXTI_Callback+0x50c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	b299      	uxth	r1, r3
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	2301      	movs	r3, #1
 80009c2:	4a0e      	ldr	r2, [pc, #56]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x508>)
 80009c4:	480f      	ldr	r0, [pc, #60]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x510>)
 80009c6:	f002 f873 	bl	8002ab0 <HAL_I2C_Master_Transmit>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f000 80dd 	beq.w	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
				  Error_Handler();
 80009d2:	f000 fd25 	bl	8001420 <Error_Handler>
}
 80009d6:	e0d9      	b.n	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
 80009d8:	20000048 	.word	0x20000048
 80009dc:	20000008 	.word	0x20000008
 80009e0:	2000003f 	.word	0x2000003f
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20000640 	.word	0x20000640
 80009ec:	20000148 	.word	0x20000148
 80009f0:	2000000c 	.word	0x2000000c
 80009f4:	200000a0 	.word	0x200000a0
 80009f8:	20000010 	.word	0x20000010
 80009fc:	20000643 	.word	0x20000643
 8000a00:	20000004 	.word	0x20000004
 8000a04:	2000004c 	.word	0x2000004c
 8000a08:	20000040 	.word	0x20000040
 8000a0c:	20000041 	.word	0x20000041
    } else if (GPIO_Pin == sensor7_Pin) {
 8000a10:	88fb      	ldrh	r3, [r7, #6]
 8000a12:	2b08      	cmp	r3, #8
 8000a14:	d15c      	bne.n	8000ad0 <HAL_GPIO_EXTI_Callback+0x5dc>
        if ((current_time - last_interrupt_time) > debounce_delay) {
 8000a16:	4b5f      	ldr	r3, [pc, #380]	@ (8000b94 <HAL_GPIO_EXTI_Callback+0x6a0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	1ad2      	subs	r2, r2, r3
 8000a1e:	4b5e      	ldr	r3, [pc, #376]	@ (8000b98 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	f240 80b2 	bls.w	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
            if (activa7 == 0) {
 8000a28:	4b5c      	ldr	r3, [pc, #368]	@ (8000b9c <HAL_GPIO_EXTI_Callback+0x6a8>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d119      	bne.n	8000a64 <HAL_GPIO_EXTI_Callback+0x570>
                espacios_disponibles--;
 8000a30:	4b5b      	ldr	r3, [pc, #364]	@ (8000ba0 <HAL_GPIO_EXTI_Callback+0x6ac>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	3b01      	subs	r3, #1
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b59      	ldr	r3, [pc, #356]	@ (8000ba0 <HAL_GPIO_EXTI_Callback+0x6ac>)
 8000a3a:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 2, &black_color);
 8000a3c:	4a59      	ldr	r2, [pc, #356]	@ (8000ba4 <HAL_GPIO_EXTI_Callback+0x6b0>)
 8000a3e:	2102      	movs	r1, #2
 8000a40:	4859      	ldr	r0, [pc, #356]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x6b4>)
 8000a42:	f000 fd39 	bl	80014b8 <set_specific_led>
                set_specific_led(leds, 2, &red_color);
 8000a46:	4a59      	ldr	r2, [pc, #356]	@ (8000bac <HAL_GPIO_EXTI_Callback+0x6b8>)
 8000a48:	2102      	movs	r1, #2
 8000a4a:	4857      	ldr	r0, [pc, #348]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x6b4>)
 8000a4c:	f000 fd34 	bl	80014b8 <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000a50:	23d8      	movs	r3, #216	@ 0xd8
 8000a52:	4a55      	ldr	r2, [pc, #340]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x6b4>)
 8000a54:	2100      	movs	r1, #0
 8000a56:	4856      	ldr	r0, [pc, #344]	@ (8000bb0 <HAL_GPIO_EXTI_Callback+0x6bc>)
 8000a58:	f004 fdf4 	bl	8005644 <HAL_TIM_PWM_Start_DMA>
                activa7 = 1;
 8000a5c:	4b4f      	ldr	r3, [pc, #316]	@ (8000b9c <HAL_GPIO_EXTI_Callback+0x6a8>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	701a      	strb	r2, [r3, #0]
 8000a62:	e01c      	b.n	8000a9e <HAL_GPIO_EXTI_Callback+0x5aa>
            } else if (activa7 == 1) {
 8000a64:	4b4d      	ldr	r3, [pc, #308]	@ (8000b9c <HAL_GPIO_EXTI_Callback+0x6a8>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d118      	bne.n	8000a9e <HAL_GPIO_EXTI_Callback+0x5aa>
                espacios_disponibles++;
 8000a6c:	4b4c      	ldr	r3, [pc, #304]	@ (8000ba0 <HAL_GPIO_EXTI_Callback+0x6ac>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	4b4a      	ldr	r3, [pc, #296]	@ (8000ba0 <HAL_GPIO_EXTI_Callback+0x6ac>)
 8000a76:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 2, &black_color);
 8000a78:	4a4a      	ldr	r2, [pc, #296]	@ (8000ba4 <HAL_GPIO_EXTI_Callback+0x6b0>)
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	484a      	ldr	r0, [pc, #296]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x6b4>)
 8000a7e:	f000 fd1b 	bl	80014b8 <set_specific_led>
                set_specific_led(leds, 2, &green_color);
 8000a82:	4a4c      	ldr	r2, [pc, #304]	@ (8000bb4 <HAL_GPIO_EXTI_Callback+0x6c0>)
 8000a84:	2102      	movs	r1, #2
 8000a86:	4848      	ldr	r0, [pc, #288]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x6b4>)
 8000a88:	f000 fd16 	bl	80014b8 <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000a8c:	23d8      	movs	r3, #216	@ 0xd8
 8000a8e:	4a46      	ldr	r2, [pc, #280]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x6b4>)
 8000a90:	2100      	movs	r1, #0
 8000a92:	4847      	ldr	r0, [pc, #284]	@ (8000bb0 <HAL_GPIO_EXTI_Callback+0x6bc>)
 8000a94:	f004 fdd6 	bl	8005644 <HAL_TIM_PWM_Start_DMA>
                activa7 = 0;
 8000a98:	4b40      	ldr	r3, [pc, #256]	@ (8000b9c <HAL_GPIO_EXTI_Callback+0x6a8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
            last_interrupt_time = current_time;
 8000a9e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b94 <HAL_GPIO_EXTI_Callback+0x6a0>)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	6013      	str	r3, [r2, #0]
            data = 0x06; // Declarar una variable de tipo uint8_t con el dato a enviar
 8000aa4:	4b44      	ldr	r3, [pc, #272]	@ (8000bb8 <HAL_GPIO_EXTI_Callback+0x6c4>)
 8000aa6:	2206      	movs	r2, #6
 8000aa8:	701a      	strb	r2, [r3, #0]
			  if (HAL_I2C_Master_Transmit(&hi2c1, ESP32_ADDRESS << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000aaa:	4b44      	ldr	r3, [pc, #272]	@ (8000bbc <HAL_GPIO_EXTI_Callback+0x6c8>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	b299      	uxth	r1, r3
 8000ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	2301      	movs	r3, #1
 8000abc:	4a3e      	ldr	r2, [pc, #248]	@ (8000bb8 <HAL_GPIO_EXTI_Callback+0x6c4>)
 8000abe:	4840      	ldr	r0, [pc, #256]	@ (8000bc0 <HAL_GPIO_EXTI_Callback+0x6cc>)
 8000ac0:	f001 fff6 	bl	8002ab0 <HAL_I2C_Master_Transmit>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d060      	beq.n	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
				  Error_Handler();
 8000aca:	f000 fca9 	bl	8001420 <Error_Handler>
}
 8000ace:	e05d      	b.n	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
    } else if (GPIO_Pin == sensor8_Pin) {
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	2b80      	cmp	r3, #128	@ 0x80
 8000ad4:	d15a      	bne.n	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
        if ((current_time - last_interrupt_time) > debounce_delay) {
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8000b94 <HAL_GPIO_EXTI_Callback+0x6a0>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	1ad2      	subs	r2, r2, r3
 8000ade:	4b2e      	ldr	r3, [pc, #184]	@ (8000b98 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d952      	bls.n	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
            if (activa8 == 0) {
 8000ae6:	4b37      	ldr	r3, [pc, #220]	@ (8000bc4 <HAL_GPIO_EXTI_Callback+0x6d0>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d119      	bne.n	8000b22 <HAL_GPIO_EXTI_Callback+0x62e>
                espacios_disponibles--;
 8000aee:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba0 <HAL_GPIO_EXTI_Callback+0x6ac>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba0 <HAL_GPIO_EXTI_Callback+0x6ac>)
 8000af8:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 7, &black_color);
 8000afa:	4a2a      	ldr	r2, [pc, #168]	@ (8000ba4 <HAL_GPIO_EXTI_Callback+0x6b0>)
 8000afc:	2107      	movs	r1, #7
 8000afe:	482a      	ldr	r0, [pc, #168]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x6b4>)
 8000b00:	f000 fcda 	bl	80014b8 <set_specific_led>
                set_specific_led(leds, 7, &red_color);
 8000b04:	4a29      	ldr	r2, [pc, #164]	@ (8000bac <HAL_GPIO_EXTI_Callback+0x6b8>)
 8000b06:	2107      	movs	r1, #7
 8000b08:	4827      	ldr	r0, [pc, #156]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x6b4>)
 8000b0a:	f000 fcd5 	bl	80014b8 <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000b0e:	23d8      	movs	r3, #216	@ 0xd8
 8000b10:	4a25      	ldr	r2, [pc, #148]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x6b4>)
 8000b12:	2100      	movs	r1, #0
 8000b14:	4826      	ldr	r0, [pc, #152]	@ (8000bb0 <HAL_GPIO_EXTI_Callback+0x6bc>)
 8000b16:	f004 fd95 	bl	8005644 <HAL_TIM_PWM_Start_DMA>
                activa8 = 1;
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc4 <HAL_GPIO_EXTI_Callback+0x6d0>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	e01c      	b.n	8000b5c <HAL_GPIO_EXTI_Callback+0x668>
            } else if (activa8 == 1) {
 8000b22:	4b28      	ldr	r3, [pc, #160]	@ (8000bc4 <HAL_GPIO_EXTI_Callback+0x6d0>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d118      	bne.n	8000b5c <HAL_GPIO_EXTI_Callback+0x668>
                espacios_disponibles++;
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba0 <HAL_GPIO_EXTI_Callback+0x6ac>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba0 <HAL_GPIO_EXTI_Callback+0x6ac>)
 8000b34:	701a      	strb	r2, [r3, #0]
                set_specific_led(leds, 7, &black_color);
 8000b36:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba4 <HAL_GPIO_EXTI_Callback+0x6b0>)
 8000b38:	2107      	movs	r1, #7
 8000b3a:	481b      	ldr	r0, [pc, #108]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x6b4>)
 8000b3c:	f000 fcbc 	bl	80014b8 <set_specific_led>
                set_specific_led(leds, 7, &green_color);
 8000b40:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb4 <HAL_GPIO_EXTI_Callback+0x6c0>)
 8000b42:	2107      	movs	r1, #7
 8000b44:	4818      	ldr	r0, [pc, #96]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x6b4>)
 8000b46:	f000 fcb7 	bl	80014b8 <set_specific_led>
                HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000b4a:	23d8      	movs	r3, #216	@ 0xd8
 8000b4c:	4a16      	ldr	r2, [pc, #88]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x6b4>)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4817      	ldr	r0, [pc, #92]	@ (8000bb0 <HAL_GPIO_EXTI_Callback+0x6bc>)
 8000b52:	f004 fd77 	bl	8005644 <HAL_TIM_PWM_Start_DMA>
                activa8 = 0;
 8000b56:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc4 <HAL_GPIO_EXTI_Callback+0x6d0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
            last_interrupt_time = current_time;
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <HAL_GPIO_EXTI_Callback+0x6a0>)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6013      	str	r3, [r2, #0]
             data = 0x01; // Declarar una variable de tipo uint8_t con el dato a enviar
 8000b62:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <HAL_GPIO_EXTI_Callback+0x6c4>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
		 if (HAL_I2C_Master_Transmit(&hi2c1, ESP32_ADDRESS << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000b68:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <HAL_GPIO_EXTI_Callback+0x6c8>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	b299      	uxth	r1, r3
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb8 <HAL_GPIO_EXTI_Callback+0x6c4>)
 8000b7c:	4810      	ldr	r0, [pc, #64]	@ (8000bc0 <HAL_GPIO_EXTI_Callback+0x6cc>)
 8000b7e:	f001 ff97 	bl	8002ab0 <HAL_I2C_Master_Transmit>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <HAL_GPIO_EXTI_Callback+0x698>
			  Error_Handler();
 8000b88:	f000 fc4a 	bl	8001420 <Error_Handler>
}
 8000b8c:	bf00      	nop
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000048 	.word	0x20000048
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000042 	.word	0x20000042
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000640 	.word	0x20000640
 8000ba8:	20000148 	.word	0x20000148
 8000bac:	2000000c 	.word	0x2000000c
 8000bb0:	200000a0 	.word	0x200000a0
 8000bb4:	20000010 	.word	0x20000010
 8000bb8:	20000643 	.word	0x20000643
 8000bbc:	20000004 	.word	0x20000004
 8000bc0:	2000004c 	.word	0x2000004c
 8000bc4:	20000043 	.word	0x20000043

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */


	// Patterns
	for(int i = 0; i < NUMBER_OF_LEDS; i++){
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	e014      	b.n	8000bfe <main+0x36>
		led_pattern[i].b = (i%2) * 255;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	425b      	negs	r3, r3
 8000be4:	b2d8      	uxtb	r0, r3
 8000be6:	499d      	ldr	r1, [pc, #628]	@ (8000e5c <main+0x294>)
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	4613      	mov	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4413      	add	r3, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUMBER_OF_LEDS; i++){
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b07      	cmp	r3, #7
 8000c02:	dde7      	ble.n	8000bd4 <main+0xc>
	}

	// Some pattern
	led_pattern[0].b = 127;
 8000c04:	4b95      	ldr	r3, [pc, #596]	@ (8000e5c <main+0x294>)
 8000c06:	227f      	movs	r2, #127	@ 0x7f
 8000c08:	709a      	strb	r2, [r3, #2]
	led_pattern[0].r = (50);
 8000c0a:	4b94      	ldr	r3, [pc, #592]	@ (8000e5c <main+0x294>)
 8000c0c:	2232      	movs	r2, #50	@ 0x32
 8000c0e:	701a      	strb	r2, [r3, #0]
	led_pattern[0].g = 0;
 8000c10:	4b92      	ldr	r3, [pc, #584]	@ (8000e5c <main+0x294>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	705a      	strb	r2, [r3, #1]
	led_pattern[1].b = 255;
 8000c16:	4b91      	ldr	r3, [pc, #580]	@ (8000e5c <main+0x294>)
 8000c18:	22ff      	movs	r2, #255	@ 0xff
 8000c1a:	715a      	strb	r2, [r3, #5]
	led_pattern[1].r = (100);
 8000c1c:	4b8f      	ldr	r3, [pc, #572]	@ (8000e5c <main+0x294>)
 8000c1e:	2264      	movs	r2, #100	@ 0x64
 8000c20:	70da      	strb	r2, [r3, #3]
	led_pattern[1].g = 0;
 8000c22:	4b8e      	ldr	r3, [pc, #568]	@ (8000e5c <main+0x294>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	711a      	strb	r2, [r3, #4]
	led_pattern[2].b = 0;
 8000c28:	4b8c      	ldr	r3, [pc, #560]	@ (8000e5c <main+0x294>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	721a      	strb	r2, [r3, #8]
	led_pattern[2].r = (150);
 8000c2e:	4b8b      	ldr	r3, [pc, #556]	@ (8000e5c <main+0x294>)
 8000c30:	2296      	movs	r2, #150	@ 0x96
 8000c32:	719a      	strb	r2, [r3, #6]
	led_pattern[2].g = 127;
 8000c34:	4b89      	ldr	r3, [pc, #548]	@ (8000e5c <main+0x294>)
 8000c36:	227f      	movs	r2, #127	@ 0x7f
 8000c38:	71da      	strb	r2, [r3, #7]
	led_pattern[3].b = 0;
 8000c3a:	4b88      	ldr	r3, [pc, #544]	@ (8000e5c <main+0x294>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	72da      	strb	r2, [r3, #11]
	led_pattern[3].r = (150);
 8000c40:	4b86      	ldr	r3, [pc, #536]	@ (8000e5c <main+0x294>)
 8000c42:	2296      	movs	r2, #150	@ 0x96
 8000c44:	725a      	strb	r2, [r3, #9]
	led_pattern[3].g = 255;
 8000c46:	4b85      	ldr	r3, [pc, #532]	@ (8000e5c <main+0x294>)
 8000c48:	22ff      	movs	r2, #255	@ 0xff
 8000c4a:	729a      	strb	r2, [r3, #10]

	// Setting the pattern
	set_pattern_led(circular_pattern_led, led_pattern, NUMBER_OF_LEDS);
 8000c4c:	2208      	movs	r2, #8
 8000c4e:	4983      	ldr	r1, [pc, #524]	@ (8000e5c <main+0x294>)
 8000c50:	4883      	ldr	r0, [pc, #524]	@ (8000e60 <main+0x298>)
 8000c52:	f000 fcc1 	bl	80015d8 <set_pattern_led>
	set_pattern_led(circular_pattern_led + NUMBER_OF_LEDS, led_pattern, NUMBER_OF_LEDS);
 8000c56:	4b83      	ldr	r3, [pc, #524]	@ (8000e64 <main+0x29c>)
 8000c58:	2208      	movs	r2, #8
 8000c5a:	4980      	ldr	r1, [pc, #512]	@ (8000e5c <main+0x294>)
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 fcbb 	bl	80015d8 <set_pattern_led>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f000 febd 	bl	80019e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f90d 	bl	8000e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f000 fa1d 	bl	80010a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6e:	f000 f9fb 	bl	8001068 <MX_DMA_Init>
  MX_TIM3_Init();
 8000c72:	f000 f9a1 	bl	8000fb8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000c76:	f000 f971 	bl	8000f5c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


    reset_all_leds(leds, NUMBER_OF_LEDS); // Apagar todos los LEDs
 8000c7a:	2108      	movs	r1, #8
 8000c7c:	487a      	ldr	r0, [pc, #488]	@ (8000e68 <main+0x2a0>)
 8000c7e:	f000 fbd5 	bl	800142c <reset_all_leds>
    set_specific_led(leds, 0, &green_color); // Establecer LEDs en verde
 8000c82:	4a7a      	ldr	r2, [pc, #488]	@ (8000e6c <main+0x2a4>)
 8000c84:	2100      	movs	r1, #0
 8000c86:	4878      	ldr	r0, [pc, #480]	@ (8000e68 <main+0x2a0>)
 8000c88:	f000 fc16 	bl	80014b8 <set_specific_led>
    set_specific_led(leds, 1, &green_color);
 8000c8c:	4a77      	ldr	r2, [pc, #476]	@ (8000e6c <main+0x2a4>)
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4875      	ldr	r0, [pc, #468]	@ (8000e68 <main+0x2a0>)
 8000c92:	f000 fc11 	bl	80014b8 <set_specific_led>
    set_specific_led(leds, 2, &green_color);
 8000c96:	4a75      	ldr	r2, [pc, #468]	@ (8000e6c <main+0x2a4>)
 8000c98:	2102      	movs	r1, #2
 8000c9a:	4873      	ldr	r0, [pc, #460]	@ (8000e68 <main+0x2a0>)
 8000c9c:	f000 fc0c 	bl	80014b8 <set_specific_led>
    set_specific_led(leds, 3, &green_color);
 8000ca0:	4a72      	ldr	r2, [pc, #456]	@ (8000e6c <main+0x2a4>)
 8000ca2:	2103      	movs	r1, #3
 8000ca4:	4870      	ldr	r0, [pc, #448]	@ (8000e68 <main+0x2a0>)
 8000ca6:	f000 fc07 	bl	80014b8 <set_specific_led>
    set_specific_led(leds, 4, &green_color);
 8000caa:	4a70      	ldr	r2, [pc, #448]	@ (8000e6c <main+0x2a4>)
 8000cac:	2104      	movs	r1, #4
 8000cae:	486e      	ldr	r0, [pc, #440]	@ (8000e68 <main+0x2a0>)
 8000cb0:	f000 fc02 	bl	80014b8 <set_specific_led>
    set_specific_led(leds, 5, &green_color);
 8000cb4:	4a6d      	ldr	r2, [pc, #436]	@ (8000e6c <main+0x2a4>)
 8000cb6:	2105      	movs	r1, #5
 8000cb8:	486b      	ldr	r0, [pc, #428]	@ (8000e68 <main+0x2a0>)
 8000cba:	f000 fbfd 	bl	80014b8 <set_specific_led>
    set_specific_led(leds, 6, &green_color);
 8000cbe:	4a6b      	ldr	r2, [pc, #428]	@ (8000e6c <main+0x2a4>)
 8000cc0:	2106      	movs	r1, #6
 8000cc2:	4869      	ldr	r0, [pc, #420]	@ (8000e68 <main+0x2a0>)
 8000cc4:	f000 fbf8 	bl	80014b8 <set_specific_led>
    set_specific_led(leds, 7, &green_color);
 8000cc8:	4a68      	ldr	r2, [pc, #416]	@ (8000e6c <main+0x2a4>)
 8000cca:	2107      	movs	r1, #7
 8000ccc:	4866      	ldr	r0, [pc, #408]	@ (8000e68 <main+0x2a0>)
 8000cce:	f000 fbf3 	bl	80014b8 <set_specific_led>
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000cd2:	23d8      	movs	r3, #216	@ 0xd8
 8000cd4:	4a64      	ldr	r2, [pc, #400]	@ (8000e68 <main+0x2a0>)
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4865      	ldr	r0, [pc, #404]	@ (8000e70 <main+0x2a8>)
 8000cda:	f004 fcb3 	bl	8005644 <HAL_TIM_PWM_Start_DMA>


    HAL_Delay(3000);  //Retardo para estaperar a que el sistema se inicie bien
 8000cde:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000ce2:	f000 feef 	bl	8001ac4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(activador == 1|| activador1 == 0){
 8000ce6:	4b63      	ldr	r3, [pc, #396]	@ (8000e74 <main+0x2ac>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d004      	beq.n	8000cf8 <main+0x130>
 8000cee:	4b62      	ldr	r3, [pc, #392]	@ (8000e78 <main+0x2b0>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 80ae 	bne.w	8000e54 <main+0x28c>
		  activador1 = 1;
 8000cf8:	4b5f      	ldr	r3, [pc, #380]	@ (8000e78 <main+0x2b0>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]

		  	 if(espacios_disponibles <= 0 ){
 8000cfe:	4b5f      	ldr	r3, [pc, #380]	@ (8000e7c <main+0x2b4>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d137      	bne.n	8000d76 <main+0x1ae>
		 		  display0();
 8000d06:	f000 fae9 	bl	80012dc <display0>
		 		 reset_all_leds(leds, NUMBER_OF_LEDS); // Apagar todos los LEDs
 8000d0a:	2108      	movs	r1, #8
 8000d0c:	4856      	ldr	r0, [pc, #344]	@ (8000e68 <main+0x2a0>)
 8000d0e:	f000 fb8d 	bl	800142c <reset_all_leds>
		 		    set_specific_led(leds, 0, &red_color); // Establecer LED en rojo
 8000d12:	4a5b      	ldr	r2, [pc, #364]	@ (8000e80 <main+0x2b8>)
 8000d14:	2100      	movs	r1, #0
 8000d16:	4854      	ldr	r0, [pc, #336]	@ (8000e68 <main+0x2a0>)
 8000d18:	f000 fbce 	bl	80014b8 <set_specific_led>
		 		    set_specific_led(leds, 1, &red_color);
 8000d1c:	4a58      	ldr	r2, [pc, #352]	@ (8000e80 <main+0x2b8>)
 8000d1e:	2101      	movs	r1, #1
 8000d20:	4851      	ldr	r0, [pc, #324]	@ (8000e68 <main+0x2a0>)
 8000d22:	f000 fbc9 	bl	80014b8 <set_specific_led>
		 		    set_specific_led(leds, 2, &red_color);
 8000d26:	4a56      	ldr	r2, [pc, #344]	@ (8000e80 <main+0x2b8>)
 8000d28:	2102      	movs	r1, #2
 8000d2a:	484f      	ldr	r0, [pc, #316]	@ (8000e68 <main+0x2a0>)
 8000d2c:	f000 fbc4 	bl	80014b8 <set_specific_led>
		 		    set_specific_led(leds, 3, &red_color);
 8000d30:	4a53      	ldr	r2, [pc, #332]	@ (8000e80 <main+0x2b8>)
 8000d32:	2103      	movs	r1, #3
 8000d34:	484c      	ldr	r0, [pc, #304]	@ (8000e68 <main+0x2a0>)
 8000d36:	f000 fbbf 	bl	80014b8 <set_specific_led>
		 		    set_specific_led(leds, 4, &red_color);
 8000d3a:	4a51      	ldr	r2, [pc, #324]	@ (8000e80 <main+0x2b8>)
 8000d3c:	2104      	movs	r1, #4
 8000d3e:	484a      	ldr	r0, [pc, #296]	@ (8000e68 <main+0x2a0>)
 8000d40:	f000 fbba 	bl	80014b8 <set_specific_led>
		 		    set_specific_led(leds, 5, &red_color);
 8000d44:	4a4e      	ldr	r2, [pc, #312]	@ (8000e80 <main+0x2b8>)
 8000d46:	2105      	movs	r1, #5
 8000d48:	4847      	ldr	r0, [pc, #284]	@ (8000e68 <main+0x2a0>)
 8000d4a:	f000 fbb5 	bl	80014b8 <set_specific_led>
		 		    set_specific_led(leds, 6, &red_color);
 8000d4e:	4a4c      	ldr	r2, [pc, #304]	@ (8000e80 <main+0x2b8>)
 8000d50:	2106      	movs	r1, #6
 8000d52:	4845      	ldr	r0, [pc, #276]	@ (8000e68 <main+0x2a0>)
 8000d54:	f000 fbb0 	bl	80014b8 <set_specific_led>
		 		    set_specific_led(leds, 7, &red_color);
 8000d58:	4a49      	ldr	r2, [pc, #292]	@ (8000e80 <main+0x2b8>)
 8000d5a:	2107      	movs	r1, #7
 8000d5c:	4842      	ldr	r0, [pc, #264]	@ (8000e68 <main+0x2a0>)
 8000d5e:	f000 fbab 	bl	80014b8 <set_specific_led>
		 		    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000d62:	23d8      	movs	r3, #216	@ 0xd8
 8000d64:	4a40      	ldr	r2, [pc, #256]	@ (8000e68 <main+0x2a0>)
 8000d66:	2100      	movs	r1, #0
 8000d68:	4841      	ldr	r0, [pc, #260]	@ (8000e70 <main+0x2a8>)
 8000d6a:	f004 fc6b 	bl	8005644 <HAL_TIM_PWM_Start_DMA>


		 		  espacios_disponibles = 0;
 8000d6e:	4b43      	ldr	r3, [pc, #268]	@ (8000e7c <main+0x2b4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
 8000d74:	e06b      	b.n	8000e4e <main+0x286>
		 	  }
		 	  else if(espacios_disponibles == 1){
 8000d76:	4b41      	ldr	r3, [pc, #260]	@ (8000e7c <main+0x2b4>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d102      	bne.n	8000d84 <main+0x1bc>
		 		  display1();
 8000d7e:	f000 fabf 	bl	8001300 <display1>
 8000d82:	e064      	b.n	8000e4e <main+0x286>

		 	  }
		 	  else if(espacios_disponibles == 2){
 8000d84:	4b3d      	ldr	r3, [pc, #244]	@ (8000e7c <main+0x2b4>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d102      	bne.n	8000d92 <main+0x1ca>
		 	 		  display2();
 8000d8c:	f000 faca 	bl	8001324 <display2>
 8000d90:	e05d      	b.n	8000e4e <main+0x286>


}
		 	  else if(espacios_disponibles == 3){
 8000d92:	4b3a      	ldr	r3, [pc, #232]	@ (8000e7c <main+0x2b4>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d102      	bne.n	8000da0 <main+0x1d8>
		 	 		  display3();
 8000d9a:	f000 fad5 	bl	8001348 <display3>
 8000d9e:	e056      	b.n	8000e4e <main+0x286>


		 	  }
		 	  else if(espacios_disponibles == 4){
 8000da0:	4b36      	ldr	r3, [pc, #216]	@ (8000e7c <main+0x2b4>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d102      	bne.n	8000dae <main+0x1e6>
		 		  display4();
 8000da8:	f000 fae0 	bl	800136c <display4>
 8000dac:	e04f      	b.n	8000e4e <main+0x286>

		 	  }

		 	  else if(espacios_disponibles == 5){
 8000dae:	4b33      	ldr	r3, [pc, #204]	@ (8000e7c <main+0x2b4>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b05      	cmp	r3, #5
 8000db4:	d102      	bne.n	8000dbc <main+0x1f4>
		 	 		  display5();
 8000db6:	f000 faeb 	bl	8001390 <display5>
 8000dba:	e048      	b.n	8000e4e <main+0x286>


		 	 }
		 	  else if(espacios_disponibles == 6){
 8000dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8000e7c <main+0x2b4>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b06      	cmp	r3, #6
 8000dc2:	d102      	bne.n	8000dca <main+0x202>
		 	 		  display6();
 8000dc4:	f000 faf6 	bl	80013b4 <display6>
 8000dc8:	e041      	b.n	8000e4e <main+0x286>


		 	  }
		 	  else if(espacios_disponibles == 7){
 8000dca:	4b2c      	ldr	r3, [pc, #176]	@ (8000e7c <main+0x2b4>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b07      	cmp	r3, #7
 8000dd0:	d102      	bne.n	8000dd8 <main+0x210>
		 		  display7();
 8000dd2:	f000 fb01 	bl	80013d8 <display7>
 8000dd6:	e03a      	b.n	8000e4e <main+0x286>

		 	  }

		 	  else if(espacios_disponibles >= 8){
 8000dd8:	4b28      	ldr	r3, [pc, #160]	@ (8000e7c <main+0x2b4>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b07      	cmp	r3, #7
 8000dde:	d936      	bls.n	8000e4e <main+0x286>
		 	 		  display8();
 8000de0:	f000 fb0c 	bl	80013fc <display8>
		 	 		  reset_all_leds(leds, NUMBER_OF_LEDS); // Apagar todos los LEDs
 8000de4:	2108      	movs	r1, #8
 8000de6:	4820      	ldr	r0, [pc, #128]	@ (8000e68 <main+0x2a0>)
 8000de8:	f000 fb20 	bl	800142c <reset_all_leds>
		 	 		    set_specific_led(leds, 0, &green_color);
 8000dec:	4a1f      	ldr	r2, [pc, #124]	@ (8000e6c <main+0x2a4>)
 8000dee:	2100      	movs	r1, #0
 8000df0:	481d      	ldr	r0, [pc, #116]	@ (8000e68 <main+0x2a0>)
 8000df2:	f000 fb61 	bl	80014b8 <set_specific_led>
		 	 		    set_specific_led(leds, 1, &green_color);
 8000df6:	4a1d      	ldr	r2, [pc, #116]	@ (8000e6c <main+0x2a4>)
 8000df8:	2101      	movs	r1, #1
 8000dfa:	481b      	ldr	r0, [pc, #108]	@ (8000e68 <main+0x2a0>)
 8000dfc:	f000 fb5c 	bl	80014b8 <set_specific_led>
		 	 		    set_specific_led(leds, 2, &green_color);
 8000e00:	4a1a      	ldr	r2, [pc, #104]	@ (8000e6c <main+0x2a4>)
 8000e02:	2102      	movs	r1, #2
 8000e04:	4818      	ldr	r0, [pc, #96]	@ (8000e68 <main+0x2a0>)
 8000e06:	f000 fb57 	bl	80014b8 <set_specific_led>
		 	 		    set_specific_led(leds, 3, &green_color);
 8000e0a:	4a18      	ldr	r2, [pc, #96]	@ (8000e6c <main+0x2a4>)
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	4816      	ldr	r0, [pc, #88]	@ (8000e68 <main+0x2a0>)
 8000e10:	f000 fb52 	bl	80014b8 <set_specific_led>
		 	 		    set_specific_led(leds, 4, &green_color);
 8000e14:	4a15      	ldr	r2, [pc, #84]	@ (8000e6c <main+0x2a4>)
 8000e16:	2104      	movs	r1, #4
 8000e18:	4813      	ldr	r0, [pc, #76]	@ (8000e68 <main+0x2a0>)
 8000e1a:	f000 fb4d 	bl	80014b8 <set_specific_led>
		 	 		    set_specific_led(leds, 5, &green_color);
 8000e1e:	4a13      	ldr	r2, [pc, #76]	@ (8000e6c <main+0x2a4>)
 8000e20:	2105      	movs	r1, #5
 8000e22:	4811      	ldr	r0, [pc, #68]	@ (8000e68 <main+0x2a0>)
 8000e24:	f000 fb48 	bl	80014b8 <set_specific_led>
		 	 		    set_specific_led(leds, 6, &green_color);
 8000e28:	4a10      	ldr	r2, [pc, #64]	@ (8000e6c <main+0x2a4>)
 8000e2a:	2106      	movs	r1, #6
 8000e2c:	480e      	ldr	r0, [pc, #56]	@ (8000e68 <main+0x2a0>)
 8000e2e:	f000 fb43 	bl	80014b8 <set_specific_led>
		 	 		    set_specific_led(leds, 7, &green_color);
 8000e32:	4a0e      	ldr	r2, [pc, #56]	@ (8000e6c <main+0x2a4>)
 8000e34:	2107      	movs	r1, #7
 8000e36:	480c      	ldr	r0, [pc, #48]	@ (8000e68 <main+0x2a0>)
 8000e38:	f000 fb3e 	bl	80014b8 <set_specific_led>
		 	 		    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, NUMBER_OF_LEDS * 24 + 24); // Enviar datos a los LEDs
 8000e3c:	23d8      	movs	r3, #216	@ 0xd8
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <main+0x2a0>)
 8000e40:	2100      	movs	r1, #0
 8000e42:	480b      	ldr	r0, [pc, #44]	@ (8000e70 <main+0x2a8>)
 8000e44:	f004 fbfe 	bl	8005644 <HAL_TIM_PWM_Start_DMA>



		 	 		 espacios_disponibles = 8;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <main+0x2b4>)
 8000e4a:	2208      	movs	r2, #8
 8000e4c:	701a      	strb	r2, [r3, #0]
		 	 }

		  	 activador = 0;
 8000e4e:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <main+0x2ac>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]





  HAL_Delay(10); // Esperar 10ms
 8000e54:	200a      	movs	r0, #10
 8000e56:	f000 fe35 	bl	8001ac4 <HAL_Delay>
	  if(activador == 1|| activador1 == 0){
 8000e5a:	e744      	b.n	8000ce6 <main+0x11e>
 8000e5c:	20000628 	.word	0x20000628
 8000e60:	200002f8 	.word	0x200002f8
 8000e64:	20000478 	.word	0x20000478
 8000e68:	20000148 	.word	0x20000148
 8000e6c:	20000010 	.word	0x20000010
 8000e70:	200000a0 	.word	0x200000a0
 8000e74:	20000044 	.word	0x20000044
 8000e78:	20000045 	.word	0x20000045
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	2000000c 	.word	0x2000000c

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b094      	sub	sp, #80	@ 0x50
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	2234      	movs	r2, #52	@ 0x34
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f005 fb7a 	bl	800658c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	f107 0308 	add.w	r3, r7, #8
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	4b29      	ldr	r3, [pc, #164]	@ (8000f54 <SystemClock_Config+0xd0>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb0:	4a28      	ldr	r2, [pc, #160]	@ (8000f54 <SystemClock_Config+0xd0>)
 8000eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb8:	4b26      	ldr	r3, [pc, #152]	@ (8000f54 <SystemClock_Config+0xd0>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	4b23      	ldr	r3, [pc, #140]	@ (8000f58 <SystemClock_Config+0xd4>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a22      	ldr	r2, [pc, #136]	@ (8000f58 <SystemClock_Config+0xd4>)
 8000ece:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4b20      	ldr	r3, [pc, #128]	@ (8000f58 <SystemClock_Config+0xd4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee8:	2310      	movs	r3, #16
 8000eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eec:	2302      	movs	r3, #2
 8000eee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ef4:	2308      	movs	r3, #8
 8000ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000ef8:	23a0      	movs	r3, #160	@ 0xa0
 8000efa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f00:	2302      	movs	r3, #2
 8000f02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f004 f8ab 	bl	8005068 <HAL_RCC_OscConfig>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f18:	f000 fa82 	bl	8001420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1c:	230f      	movs	r3, #15
 8000f1e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f20:	2302      	movs	r3, #2
 8000f22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f28:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f32:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	2105      	movs	r1, #5
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 fde4 	bl	8004b08 <HAL_RCC_ClockConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f46:	f000 fa6b 	bl	8001420 <Error_Handler>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3750      	adds	r7, #80	@ 0x50
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40007000 	.word	0x40007000

08000f5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <MX_I2C1_Init+0x50>)
 8000f62:	4a13      	ldr	r2, [pc, #76]	@ (8000fb0 <MX_I2C1_Init+0x54>)
 8000f64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;  // Velocidad de reloj
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <MX_I2C1_Init+0x50>)
 8000f68:	4a12      	ldr	r2, [pc, #72]	@ (8000fb4 <MX_I2C1_Init+0x58>)
 8000f6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <MX_I2C1_Init+0x50>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0; // Dirección del maestro (no utilizada en modo maestro)
 8000f72:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <MX_I2C1_Init+0x50>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <MX_I2C1_Init+0x50>)
 8000f7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <MX_I2C1_Init+0x50>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f86:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <MX_I2C1_Init+0x50>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8c:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <MX_I2C1_Init+0x50>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <MX_I2C1_Init+0x50>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f98:	4804      	ldr	r0, [pc, #16]	@ (8000fac <MX_I2C1_Init+0x50>)
 8000f9a:	f001 fc2f 	bl	80027fc <HAL_I2C_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fa4:	f000 fa3c 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2000004c 	.word	0x2000004c
 8000fb0:	40005400 	.word	0x40005400
 8000fb4:	000186a0 	.word	0x000186a0

08000fb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	@ 0x28
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbe:	f107 0320 	add.w	r3, r7, #32
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]
 8000fd6:	615a      	str	r2, [r3, #20]
 8000fd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fda:	4b21      	ldr	r3, [pc, #132]	@ (8001060 <MX_TIM3_Init+0xa8>)
 8000fdc:	4a21      	ldr	r2, [pc, #132]	@ (8001064 <MX_TIM3_Init+0xac>)
 8000fde:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8001060 <MX_TIM3_Init+0xa8>)
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8001060 <MX_TIM3_Init+0xa8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 24;
 8000fec:	4b1c      	ldr	r3, [pc, #112]	@ (8001060 <MX_TIM3_Init+0xa8>)
 8000fee:	2218      	movs	r2, #24
 8000ff0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <MX_TIM3_Init+0xa8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ff8:	4b19      	ldr	r3, [pc, #100]	@ (8001060 <MX_TIM3_Init+0xa8>)
 8000ffa:	2280      	movs	r2, #128	@ 0x80
 8000ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ffe:	4818      	ldr	r0, [pc, #96]	@ (8001060 <MX_TIM3_Init+0xa8>)
 8001000:	f004 fad0 	bl	80055a4 <HAL_TIM_PWM_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800100a:	f000 fa09 	bl	8001420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001016:	f107 0320 	add.w	r3, r7, #32
 800101a:	4619      	mov	r1, r3
 800101c:	4810      	ldr	r0, [pc, #64]	@ (8001060 <MX_TIM3_Init+0xa8>)
 800101e:	f005 fa25 	bl	800646c <HAL_TIMEx_MasterConfigSynchronization>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001028:	f000 f9fa 	bl	8001420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102c:	2360      	movs	r3, #96	@ 0x60
 800102e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	4619      	mov	r1, r3
 8001042:	4807      	ldr	r0, [pc, #28]	@ (8001060 <MX_TIM3_Init+0xa8>)
 8001044:	f004 fdb6 	bl	8005bb4 <HAL_TIM_PWM_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800104e:	f000 f9e7 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001052:	4803      	ldr	r0, [pc, #12]	@ (8001060 <MX_TIM3_Init+0xa8>)
 8001054:	f000 fbc4 	bl	80017e0 <HAL_TIM_MspPostInit>

}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	@ 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200000a0 	.word	0x200000a0
 8001064:	40000400 	.word	0x40000400

08001068 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <MX_DMA_Init+0x3c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	4a0b      	ldr	r2, [pc, #44]	@ (80010a4 <MX_DMA_Init+0x3c>)
 8001078:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800107c:	6313      	str	r3, [r2, #48]	@ 0x30
 800107e:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <MX_DMA_Init+0x3c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	200f      	movs	r0, #15
 8001090:	f000 fe17 	bl	8001cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001094:	200f      	movs	r0, #15
 8001096:	f000 fe30 	bl	8001cfa <HAL_NVIC_EnableIRQ>

}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	@ 0x28
 80010ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b5e      	ldr	r3, [pc, #376]	@ (800123c <MX_GPIO_Init+0x194>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a5d      	ldr	r2, [pc, #372]	@ (800123c <MX_GPIO_Init+0x194>)
 80010c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b5b      	ldr	r3, [pc, #364]	@ (800123c <MX_GPIO_Init+0x194>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b57      	ldr	r3, [pc, #348]	@ (800123c <MX_GPIO_Init+0x194>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a56      	ldr	r2, [pc, #344]	@ (800123c <MX_GPIO_Init+0x194>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b54      	ldr	r3, [pc, #336]	@ (800123c <MX_GPIO_Init+0x194>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	4b50      	ldr	r3, [pc, #320]	@ (800123c <MX_GPIO_Init+0x194>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a4f      	ldr	r2, [pc, #316]	@ (800123c <MX_GPIO_Init+0x194>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b4d      	ldr	r3, [pc, #308]	@ (800123c <MX_GPIO_Init+0x194>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	4b49      	ldr	r3, [pc, #292]	@ (800123c <MX_GPIO_Init+0x194>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a48      	ldr	r2, [pc, #288]	@ (800123c <MX_GPIO_Init+0x194>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b46      	ldr	r3, [pc, #280]	@ (800123c <MX_GPIO_Init+0x194>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_C_Pin|D_D_Pin|D_E_Pin|D_A_Pin
 800112e:	2200      	movs	r2, #0
 8001130:	f24d 0106 	movw	r1, #53254	@ 0xd006
 8001134:	4842      	ldr	r0, [pc, #264]	@ (8001240 <MX_GPIO_Init+0x198>)
 8001136:	f001 fb2f 	bl	8002798 <HAL_GPIO_WritePin>
                          |D_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D_F_Pin|D_G_Pin, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001140:	4840      	ldr	r0, [pc, #256]	@ (8001244 <MX_GPIO_Init+0x19c>)
 8001142:	f001 fb29 	bl	8002798 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : sensor1_Pin sensor2_Pin */
  GPIO_InitStruct.Pin = sensor1_Pin|sensor2_Pin;
 8001146:	2303      	movs	r3, #3
 8001148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800114a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800114e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	483b      	ldr	r0, [pc, #236]	@ (8001248 <MX_GPIO_Init+0x1a0>)
 800115c:	f001 f988 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pins : sensor4_Pin sensor6_Pin sensor8_Pin sensor5_Pin
                           sensor3_Pin */
  GPIO_InitStruct.Pin = sensor4_Pin|sensor6_Pin|sensor8_Pin|sensor5_Pin
 8001160:	f44f 63d6 	mov.w	r3, #1712	@ 0x6b0
 8001164:	617b      	str	r3, [r7, #20]
                          |sensor3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001166:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	4833      	ldr	r0, [pc, #204]	@ (8001244 <MX_GPIO_Init+0x19c>)
 8001178:	f001 f97a 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_C_Pin D_D_Pin D_E_Pin D_A_Pin
                           D_B_Pin */
  GPIO_InitStruct.Pin = D_C_Pin|D_D_Pin|D_E_Pin|D_A_Pin
 800117c:	f24d 0306 	movw	r3, #53254	@ 0xd006
 8001180:	617b      	str	r3, [r7, #20]
                          |D_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	482a      	ldr	r0, [pc, #168]	@ (8001240 <MX_GPIO_Init+0x198>)
 8001196:	f001 f96b 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_F_Pin D_G_Pin */
  GPIO_InitStruct.Pin = D_F_Pin|D_G_Pin;
 800119a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	4824      	ldr	r0, [pc, #144]	@ (8001244 <MX_GPIO_Init+0x19c>)
 80011b4:	f001 f95c 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pin : sensor7_Pin */
  GPIO_InitStruct.Pin = sensor7_Pin;
 80011b8:	2308      	movs	r3, #8
 80011ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80011bc:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80011c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(sensor7_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	481c      	ldr	r0, [pc, #112]	@ (8001240 <MX_GPIO_Init+0x198>)
 80011ce:	f001 f94f 	bl	8002470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2006      	movs	r0, #6
 80011d8:	f000 fd73 	bl	8001cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011dc:	2006      	movs	r0, #6
 80011de:	f000 fd8c 	bl	8001cfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	2007      	movs	r0, #7
 80011e8:	f000 fd6b 	bl	8001cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011ec:	2007      	movs	r0, #7
 80011ee:	f000 fd84 	bl	8001cfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	2009      	movs	r0, #9
 80011f8:	f000 fd63 	bl	8001cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011fc:	2009      	movs	r0, #9
 80011fe:	f000 fd7c 	bl	8001cfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	200a      	movs	r0, #10
 8001208:	f000 fd5b 	bl	8001cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800120c:	200a      	movs	r0, #10
 800120e:	f000 fd74 	bl	8001cfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	2017      	movs	r0, #23
 8001218:	f000 fd53 	bl	8001cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800121c:	2017      	movs	r0, #23
 800121e:	f000 fd6c 	bl	8001cfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2028      	movs	r0, #40	@ 0x28
 8001228:	f000 fd4b 	bl	8001cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800122c:	2028      	movs	r0, #40	@ 0x28
 800122e:	f000 fd64 	bl	8001cfa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	@ 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40020400 	.word	0x40020400
 8001244:	40020000 	.word	0x40020000
 8001248:	40020800 	.word	0x40020800

0800124c <setSegment>:

/* USER CODE BEGIN 4 */

void setSegment(uint8_t a, uint8_t b, uint8_t c, uint8_t d, uint8_t e, uint8_t f, uint8_t g) {
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4604      	mov	r4, r0
 8001254:	4608      	mov	r0, r1
 8001256:	4611      	mov	r1, r2
 8001258:	461a      	mov	r2, r3
 800125a:	4623      	mov	r3, r4
 800125c:	71fb      	strb	r3, [r7, #7]
 800125e:	4603      	mov	r3, r0
 8001260:	71bb      	strb	r3, [r7, #6]
 8001262:	460b      	mov	r3, r1
 8001264:	717b      	strb	r3, [r7, #5]
 8001266:	4613      	mov	r3, r2
 8001268:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(D_A_GPIO_Port, D_A_Pin, a);
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	461a      	mov	r2, r3
 800126e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001272:	4818      	ldr	r0, [pc, #96]	@ (80012d4 <setSegment+0x88>)
 8001274:	f001 fa90 	bl	8002798 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D_B_GPIO_Port, D_B_Pin, b);
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	461a      	mov	r2, r3
 800127c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001280:	4814      	ldr	r0, [pc, #80]	@ (80012d4 <setSegment+0x88>)
 8001282:	f001 fa89 	bl	8002798 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D_C_GPIO_Port, D_C_Pin, c);
 8001286:	797b      	ldrb	r3, [r7, #5]
 8001288:	461a      	mov	r2, r3
 800128a:	2102      	movs	r1, #2
 800128c:	4811      	ldr	r0, [pc, #68]	@ (80012d4 <setSegment+0x88>)
 800128e:	f001 fa83 	bl	8002798 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D_D_GPIO_Port, D_D_Pin, d);
 8001292:	793b      	ldrb	r3, [r7, #4]
 8001294:	461a      	mov	r2, r3
 8001296:	2104      	movs	r1, #4
 8001298:	480e      	ldr	r0, [pc, #56]	@ (80012d4 <setSegment+0x88>)
 800129a:	f001 fa7d 	bl	8002798 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D_E_GPIO_Port, D_E_Pin, e);
 800129e:	7e3b      	ldrb	r3, [r7, #24]
 80012a0:	461a      	mov	r2, r3
 80012a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012a6:	480b      	ldr	r0, [pc, #44]	@ (80012d4 <setSegment+0x88>)
 80012a8:	f001 fa76 	bl	8002798 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D_F_GPIO_Port, D_F_Pin, f);
 80012ac:	7f3b      	ldrb	r3, [r7, #28]
 80012ae:	461a      	mov	r2, r3
 80012b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012b4:	4808      	ldr	r0, [pc, #32]	@ (80012d8 <setSegment+0x8c>)
 80012b6:	f001 fa6f 	bl	8002798 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D_G_GPIO_Port, D_G_Pin, g);
 80012ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012be:	461a      	mov	r2, r3
 80012c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012c4:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <setSegment+0x8c>)
 80012c6:	f001 fa67 	bl	8002798 <HAL_GPIO_WritePin>
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd90      	pop	{r4, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40020000 	.word	0x40020000

080012dc <display0>:


void display0() {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af04      	add	r7, sp, #16
    setSegment(1, 1, 1, 1, 1, 1, 0); // 0
 80012e2:	2300      	movs	r3, #0
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	2201      	movs	r2, #1
 80012f2:	2101      	movs	r1, #1
 80012f4:	2001      	movs	r0, #1
 80012f6:	f7ff ffa9 	bl	800124c <setSegment>
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <display1>:

void display1() {
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af04      	add	r7, sp, #16
    setSegment(0, 1, 1, 0, 0, 0, 0); // 1
 8001306:	2300      	movs	r3, #0
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2300      	movs	r3, #0
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	2300      	movs	r3, #0
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2300      	movs	r3, #0
 8001314:	2201      	movs	r2, #1
 8001316:	2101      	movs	r1, #1
 8001318:	2000      	movs	r0, #0
 800131a:	f7ff ff97 	bl	800124c <setSegment>
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <display2>:

void display2() {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af04      	add	r7, sp, #16
    setSegment(1, 1, 0, 1, 1, 0, 1); // 2
 800132a:	2301      	movs	r3, #1
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	2300      	movs	r3, #0
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	2301      	movs	r3, #1
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	2200      	movs	r2, #0
 800133a:	2101      	movs	r1, #1
 800133c:	2001      	movs	r0, #1
 800133e:	f7ff ff85 	bl	800124c <setSegment>
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <display3>:

void display3() {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af04      	add	r7, sp, #16
    setSegment(1, 1, 1, 1, 0, 0, 1); // 3
 800134e:	2301      	movs	r3, #1
 8001350:	9302      	str	r3, [sp, #8]
 8001352:	2300      	movs	r3, #0
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	2300      	movs	r3, #0
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2301      	movs	r3, #1
 800135c:	2201      	movs	r2, #1
 800135e:	2101      	movs	r1, #1
 8001360:	2001      	movs	r0, #1
 8001362:	f7ff ff73 	bl	800124c <setSegment>
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <display4>:

void display4() {
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af04      	add	r7, sp, #16
    setSegment(0, 1, 1, 0, 0, 1, 1); // 4
 8001372:	2301      	movs	r3, #1
 8001374:	9302      	str	r3, [sp, #8]
 8001376:	2301      	movs	r3, #1
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	2300      	movs	r3, #0
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2300      	movs	r3, #0
 8001380:	2201      	movs	r2, #1
 8001382:	2101      	movs	r1, #1
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff ff61 	bl	800124c <setSegment>
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <display5>:

void display5() {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af04      	add	r7, sp, #16
    setSegment(1, 0, 1, 1, 0, 1, 1); // 5
 8001396:	2301      	movs	r3, #1
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	2301      	movs	r3, #1
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	2300      	movs	r3, #0
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	2201      	movs	r2, #1
 80013a6:	2100      	movs	r1, #0
 80013a8:	2001      	movs	r0, #1
 80013aa:	f7ff ff4f 	bl	800124c <setSegment>
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <display6>:

void display6() {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af04      	add	r7, sp, #16
    setSegment(1, 0, 1, 1, 1, 1, 1); // 6
 80013ba:	2301      	movs	r3, #1
 80013bc:	9302      	str	r3, [sp, #8]
 80013be:	2301      	movs	r3, #1
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	2301      	movs	r3, #1
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2301      	movs	r3, #1
 80013c8:	2201      	movs	r2, #1
 80013ca:	2100      	movs	r1, #0
 80013cc:	2001      	movs	r0, #1
 80013ce:	f7ff ff3d 	bl	800124c <setSegment>
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <display7>:

void display7() {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af04      	add	r7, sp, #16
    setSegment(1, 1, 1, 0, 0, 0, 0); // 7
 80013de:	2300      	movs	r3, #0
 80013e0:	9302      	str	r3, [sp, #8]
 80013e2:	2300      	movs	r3, #0
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	2300      	movs	r3, #0
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2300      	movs	r3, #0
 80013ec:	2201      	movs	r2, #1
 80013ee:	2101      	movs	r1, #1
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff ff2b 	bl	800124c <setSegment>
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <display8>:

void display8() {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af04      	add	r7, sp, #16
    setSegment(1, 1, 1, 1, 1, 1, 1); // 8
 8001402:	2301      	movs	r3, #1
 8001404:	9302      	str	r3, [sp, #8]
 8001406:	2301      	movs	r3, #1
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	2301      	movs	r3, #1
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2301      	movs	r3, #1
 8001410:	2201      	movs	r2, #1
 8001412:	2101      	movs	r1, #1
 8001414:	2001      	movs	r0, #1
 8001416:	f7ff ff19 	bl	800124c <setSegment>
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001424:	b672      	cpsid	i
}
 8001426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <Error_Handler+0x8>

0800142c <reset_all_leds>:


#include "neo_pixel.h"

// Function to reset all LEDs
void reset_all_leds(neopixel_led* leds, uint16_t number_leds){
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]

	for(int i = 0; i < number_leds; i++){
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	e031      	b.n	80014a2 <reset_all_leds+0x76>

		for(int j = 0; j < 8; j++){
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	e028      	b.n	8001496 <reset_all_leds+0x6a>

			(leds + i) ->r[j] = LED_LOGICAL_ZERO;
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	461a      	mov	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4413      	add	r3, r2
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	3208      	adds	r2, #8
 8001458:	2107      	movs	r1, #7
 800145a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			(leds + i) ->g[j] = LED_LOGICAL_ZERO;
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	461a      	mov	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	2107      	movs	r1, #7
 8001472:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			(leds + i) ->b[j] = LED_LOGICAL_ZERO;
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	011b      	lsls	r3, r3, #4
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	3210      	adds	r2, #16
 800148a:	2107      	movs	r1, #7
 800148c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(int j = 0; j < 8; j++){
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	3301      	adds	r3, #1
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	2b07      	cmp	r3, #7
 800149a:	ddd3      	ble.n	8001444 <reset_all_leds+0x18>
	for(int i = 0; i < number_leds; i++){
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	3301      	adds	r3, #1
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	887b      	ldrh	r3, [r7, #2]
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	dbc9      	blt.n	800143e <reset_all_leds+0x12>
		}
	}
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <set_specific_led>:
	}
}


// Function to set specific color to a particular LED
void set_specific_led(neopixel_led* leds, uint16_t led_position, rgb_color* color){
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	460b      	mov	r3, r1
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	817b      	strh	r3, [r7, #10]

	// 7 - j is neccesary to reverse the order of the bits
	for(int j = 0; j < 8; j++){
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	e07b      	b.n	80015c4 <set_specific_led+0x10c>

		if(color->r & (0x1 <<j)){
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	fa42 f303 	asr.w	r3, r2, r3
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00f      	beq.n	8001500 <set_specific_led+0x48>
			(leds + led_position) ->r[7 - j] = LED_LOGICAL_ONE;
 80014e0:	897a      	ldrh	r2, [r7, #10]
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	461a      	mov	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4413      	add	r3, r2
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	f1c2 0207 	rsb	r2, r2, #7
 80014f6:	3208      	adds	r2, #8
 80014f8:	210f      	movs	r1, #15
 80014fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80014fe:	e00e      	b.n	800151e <set_specific_led+0x66>
		} else{
			(leds + led_position) ->r[7 - j] = LED_LOGICAL_ZERO;
 8001500:	897a      	ldrh	r2, [r7, #10]
 8001502:	4613      	mov	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	461a      	mov	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	f1c2 0207 	rsb	r2, r2, #7
 8001516:	3208      	adds	r2, #8
 8001518:	2107      	movs	r1, #7
 800151a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		}

		if(color->g & (0x01 <<j)){
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	785b      	ldrb	r3, [r3, #1]
 8001522:	461a      	mov	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa42 f303 	asr.w	r3, r2, r3
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00e      	beq.n	8001550 <set_specific_led+0x98>
			(leds + led_position) ->g[7 - j] = LED_LOGICAL_ONE;
 8001532:	897a      	ldrh	r2, [r7, #10]
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	461a      	mov	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4413      	add	r3, r2
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	f1c2 0207 	rsb	r2, r2, #7
 8001548:	210f      	movs	r1, #15
 800154a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800154e:	e00d      	b.n	800156c <set_specific_led+0xb4>
		} else{
			(leds + led_position) ->g[7 - j] = LED_LOGICAL_ZERO;
 8001550:	897a      	ldrh	r2, [r7, #10]
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	f1c2 0207 	rsb	r2, r2, #7
 8001566:	2107      	movs	r1, #7
 8001568:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		}

		if(color->b & (0x01 <<j)){
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	789b      	ldrb	r3, [r3, #2]
 8001570:	461a      	mov	r2, r3
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	fa42 f303 	asr.w	r3, r2, r3
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00f      	beq.n	80015a0 <set_specific_led+0xe8>
			(leds + led_position) ->b[7 - j] = LED_LOGICAL_ONE;
 8001580:	897a      	ldrh	r2, [r7, #10]
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	f1c2 0207 	rsb	r2, r2, #7
 8001596:	3210      	adds	r2, #16
 8001598:	210f      	movs	r1, #15
 800159a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800159e:	e00e      	b.n	80015be <set_specific_led+0x106>
		} else{
			(leds + led_position) ->b[7 - j] = LED_LOGICAL_ZERO;
 80015a0:	897a      	ldrh	r2, [r7, #10]
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	461a      	mov	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	f1c2 0207 	rsb	r2, r2, #7
 80015b6:	3210      	adds	r2, #16
 80015b8:	2107      	movs	r1, #7
 80015ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int j = 0; j < 8; j++){
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	2b07      	cmp	r3, #7
 80015c8:	dd80      	ble.n	80014cc <set_specific_led+0x14>
		}
	}
}
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	371c      	adds	r7, #28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <set_pattern_led>:

// Function to set a particular pattern to LEDs
void set_pattern_led(neopixel_led* leds, rgb_color *pattern, uint16_t number_leds){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	4613      	mov	r3, r2
 80015e4:	80fb      	strh	r3, [r7, #6]

	for(int i = 0; i < number_leds; i++){
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e00e      	b.n	800160a <set_pattern_led+0x32>
		set_specific_led(leds, i, &pattern[i]);
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	b299      	uxth	r1, r3
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	4413      	add	r3, r2
 80015fc:	461a      	mov	r2, r3
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f7ff ff5a 	bl	80014b8 <set_specific_led>
	for(int i = 0; i < number_leds; i++){
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3301      	adds	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	429a      	cmp	r2, r3
 8001610:	dbec      	blt.n	80015ec <set_pattern_led+0x14>
	}
}
 8001612:	bf00      	nop
 8001614:	bf00      	nop
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <HAL_MspInit+0x4c>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	4a0f      	ldr	r2, [pc, #60]	@ (8001668 <HAL_MspInit+0x4c>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001630:	6453      	str	r3, [r2, #68]	@ 0x44
 8001632:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <HAL_MspInit+0x4c>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <HAL_MspInit+0x4c>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	4a08      	ldr	r2, [pc, #32]	@ (8001668 <HAL_MspInit+0x4c>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800164c:	6413      	str	r3, [r2, #64]	@ 0x40
 800164e:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <HAL_MspInit+0x4c>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800

0800166c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	@ 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a21      	ldr	r2, [pc, #132]	@ (8001710 <HAL_I2C_MspInit+0xa4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d13c      	bne.n	8001708 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <HAL_I2C_MspInit+0xa8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a1f      	ldr	r2, [pc, #124]	@ (8001714 <HAL_I2C_MspInit+0xa8>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b1d      	ldr	r3, [pc, #116]	@ (8001714 <HAL_I2C_MspInit+0xa8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b0:	2312      	movs	r3, #18
 80016b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b8:	2303      	movs	r3, #3
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016bc:	2304      	movs	r3, #4
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4814      	ldr	r0, [pc, #80]	@ (8001718 <HAL_I2C_MspInit+0xac>)
 80016c8:	f000 fed2 	bl	8002470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <HAL_I2C_MspInit+0xa8>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001714 <HAL_I2C_MspInit+0xa8>)
 80016d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016da:	6413      	str	r3, [r2, #64]	@ 0x40
 80016dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001714 <HAL_I2C_MspInit+0xa8>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	201f      	movs	r0, #31
 80016ee:	f000 fae8 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016f2:	201f      	movs	r0, #31
 80016f4:	f000 fb01 	bl	8001cfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2100      	movs	r1, #0
 80016fc:	2020      	movs	r0, #32
 80016fe:	f000 fae0 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001702:	2020      	movs	r0, #32
 8001704:	f000 faf9 	bl	8001cfa <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	@ 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40005400 	.word	0x40005400
 8001714:	40023800 	.word	0x40023800
 8001718:	40020400 	.word	0x40020400

0800171c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a29      	ldr	r2, [pc, #164]	@ (80017d0 <HAL_TIM_PWM_MspInit+0xb4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d14b      	bne.n	80017c6 <HAL_TIM_PWM_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b28      	ldr	r3, [pc, #160]	@ (80017d4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	4a27      	ldr	r2, [pc, #156]	@ (80017d4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6413      	str	r3, [r2, #64]	@ 0x40
 800173e:	4b25      	ldr	r3, [pc, #148]	@ (80017d4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 800174a:	4b23      	ldr	r3, [pc, #140]	@ (80017d8 <HAL_TIM_PWM_MspInit+0xbc>)
 800174c:	4a23      	ldr	r2, [pc, #140]	@ (80017dc <HAL_TIM_PWM_MspInit+0xc0>)
 800174e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8001750:	4b21      	ldr	r3, [pc, #132]	@ (80017d8 <HAL_TIM_PWM_MspInit+0xbc>)
 8001752:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001756:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001758:	4b1f      	ldr	r3, [pc, #124]	@ (80017d8 <HAL_TIM_PWM_MspInit+0xbc>)
 800175a:	2240      	movs	r2, #64	@ 0x40
 800175c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800175e:	4b1e      	ldr	r3, [pc, #120]	@ (80017d8 <HAL_TIM_PWM_MspInit+0xbc>)
 8001760:	2200      	movs	r2, #0
 8001762:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001764:	4b1c      	ldr	r3, [pc, #112]	@ (80017d8 <HAL_TIM_PWM_MspInit+0xbc>)
 8001766:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800176a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800176c:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <HAL_TIM_PWM_MspInit+0xbc>)
 800176e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001772:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001774:	4b18      	ldr	r3, [pc, #96]	@ (80017d8 <HAL_TIM_PWM_MspInit+0xbc>)
 8001776:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800177a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800177c:	4b16      	ldr	r3, [pc, #88]	@ (80017d8 <HAL_TIM_PWM_MspInit+0xbc>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001782:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <HAL_TIM_PWM_MspInit+0xbc>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001788:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <HAL_TIM_PWM_MspInit+0xbc>)
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800178e:	4812      	ldr	r0, [pc, #72]	@ (80017d8 <HAL_TIM_PWM_MspInit+0xbc>)
 8001790:	f000 face 	bl	8001d30 <HAL_DMA_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 800179a:	f7ff fe41 	bl	8001420 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a0d      	ldr	r2, [pc, #52]	@ (80017d8 <HAL_TIM_PWM_MspInit+0xbc>)
 80017a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80017a4:	4a0c      	ldr	r2, [pc, #48]	@ (80017d8 <HAL_TIM_PWM_MspInit+0xbc>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a0a      	ldr	r2, [pc, #40]	@ (80017d8 <HAL_TIM_PWM_MspInit+0xbc>)
 80017ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80017b0:	4a09      	ldr	r2, [pc, #36]	@ (80017d8 <HAL_TIM_PWM_MspInit+0xbc>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	201d      	movs	r0, #29
 80017bc:	f000 fa81 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017c0:	201d      	movs	r0, #29
 80017c2:	f000 fa9a 	bl	8001cfa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40000400 	.word	0x40000400
 80017d4:	40023800 	.word	0x40023800
 80017d8:	200000e8 	.word	0x200000e8
 80017dc:	40026070 	.word	0x40026070

080017e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a12      	ldr	r2, [pc, #72]	@ (8001848 <HAL_TIM_MspPostInit+0x68>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d11d      	bne.n	800183e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	4b11      	ldr	r3, [pc, #68]	@ (800184c <HAL_TIM_MspPostInit+0x6c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	4a10      	ldr	r2, [pc, #64]	@ (800184c <HAL_TIM_MspPostInit+0x6c>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6313      	str	r3, [r2, #48]	@ 0x30
 8001812:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <HAL_TIM_MspPostInit+0x6c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800181e:	2340      	movs	r3, #64	@ 0x40
 8001820:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800182e:	2302      	movs	r3, #2
 8001830:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	4619      	mov	r1, r3
 8001838:	4805      	ldr	r0, [pc, #20]	@ (8001850 <HAL_TIM_MspPostInit+0x70>)
 800183a:	f000 fe19 	bl	8002470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3720      	adds	r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40000400 	.word	0x40000400
 800184c:	40023800 	.word	0x40023800
 8001850:	40020000 	.word	0x40020000

08001854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <NMI_Handler+0x4>

0800185c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <HardFault_Handler+0x4>

08001864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <MemManage_Handler+0x4>

0800186c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <BusFault_Handler+0x4>

08001874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <UsageFault_Handler+0x4>

0800187c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018aa:	f000 f8eb 	bl	8001a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor1_Pin);
 80018b6:	2001      	movs	r0, #1
 80018b8:	f000 ff88 	bl	80027cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor2_Pin);
 80018c4:	2002      	movs	r0, #2
 80018c6:	f000 ff81 	bl	80027cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}

080018ce <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor7_Pin);
 80018d2:	2008      	movs	r0, #8
 80018d4:	f000 ff7a 	bl	80027cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}

080018dc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor4_Pin);
 80018e0:	2010      	movs	r0, #16
 80018e2:	f000 ff73 	bl	80027cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <DMA1_Stream4_IRQHandler+0x10>)
 80018f2:	f000 fb45 	bl	8001f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200000e8 	.word	0x200000e8

08001900 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor6_Pin);
 8001904:	2020      	movs	r0, #32
 8001906:	f000 ff61 	bl	80027cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(sensor8_Pin);
 800190a:	2080      	movs	r0, #128	@ 0x80
 800190c:	f000 ff5e 	bl	80027cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(sensor5_Pin);
 8001910:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001914:	f000 ff5a 	bl	80027cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001920:	4802      	ldr	r0, [pc, #8]	@ (800192c <TIM3_IRQHandler+0x10>)
 8001922:	f004 f857 	bl	80059d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200000a0 	.word	0x200000a0

08001930 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001934:	4802      	ldr	r0, [pc, #8]	@ (8001940 <I2C1_EV_IRQHandler+0x10>)
 8001936:	f001 f9b9 	bl	8002cac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000004c 	.word	0x2000004c

08001944 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <I2C1_ER_IRQHandler+0x10>)
 800194a:	f001 fb02 	bl	8002f52 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2000004c 	.word	0x2000004c

08001958 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor3_Pin);
 800195c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001960:	f000 ff34 	bl	80027cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <SystemInit+0x20>)
 800196e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001972:	4a05      	ldr	r2, [pc, #20]	@ (8001988 <SystemInit+0x20>)
 8001974:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001978:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800198c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001990:	f7ff ffea 	bl	8001968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001994:	480c      	ldr	r0, [pc, #48]	@ (80019c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001996:	490d      	ldr	r1, [pc, #52]	@ (80019cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001998:	4a0d      	ldr	r2, [pc, #52]	@ (80019d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800199c:	e002      	b.n	80019a4 <LoopCopyDataInit>

0800199e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a2:	3304      	adds	r3, #4

080019a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a8:	d3f9      	bcc.n	800199e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019aa:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019ac:	4c0a      	ldr	r4, [pc, #40]	@ (80019d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b0:	e001      	b.n	80019b6 <LoopFillZerobss>

080019b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b4:	3204      	adds	r2, #4

080019b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b8:	d3fb      	bcc.n	80019b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019ba:	f004 fdef 	bl	800659c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019be:	f7ff f903 	bl	8000bc8 <main>
  bx  lr    
 80019c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019cc:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80019d0:	0800662c 	.word	0x0800662c
  ldr r2, =_sbss
 80019d4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80019d8:	20000648 	.word	0x20000648

080019dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <ADC_IRQHandler>
	...

080019e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a20 <HAL_Init+0x40>)
 80019ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a20 <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001a20 <HAL_Init+0x40>)
 80019f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019fc:	4b08      	ldr	r3, [pc, #32]	@ (8001a20 <HAL_Init+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a07      	ldr	r2, [pc, #28]	@ (8001a20 <HAL_Init+0x40>)
 8001a02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a08:	2003      	movs	r0, #3
 8001a0a:	f000 f94f 	bl	8001cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0e:	200f      	movs	r0, #15
 8001a10:	f000 f808 	bl	8001a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a14:	f7ff fe02 	bl	800161c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023c00 	.word	0x40023c00

08001a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <HAL_InitTick+0x54>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <HAL_InitTick+0x58>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f967 	bl	8001d16 <HAL_SYSTICK_Config>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00e      	b.n	8001a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b0f      	cmp	r3, #15
 8001a56:	d80a      	bhi.n	8001a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f000 f92f 	bl	8001cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a64:	4a06      	ldr	r2, [pc, #24]	@ (8001a80 <HAL_InitTick+0x5c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e000      	b.n	8001a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000014 	.word	0x20000014
 8001a7c:	2000001c 	.word	0x2000001c
 8001a80:	20000018 	.word	0x20000018

08001a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <HAL_IncTick+0x20>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <HAL_IncTick+0x24>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	4a04      	ldr	r2, [pc, #16]	@ (8001aa8 <HAL_IncTick+0x24>)
 8001a96:	6013      	str	r3, [r2, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	2000001c 	.word	0x2000001c
 8001aa8:	20000644 	.word	0x20000644

08001aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	@ (8001ac0 <HAL_GetTick+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000644 	.word	0x20000644

08001ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001acc:	f7ff ffee 	bl	8001aac <HAL_GetTick>
 8001ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001adc:	d005      	beq.n	8001aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ade:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <HAL_Delay+0x44>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aea:	bf00      	nop
 8001aec:	f7ff ffde 	bl	8001aac <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d8f7      	bhi.n	8001aec <HAL_Delay+0x28>
  {
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000001c 	.word	0x2000001c

08001b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3e:	4a04      	ldr	r2, [pc, #16]	@ (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	60d3      	str	r3, [r2, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b58:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <__NVIC_GetPriorityGrouping+0x18>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	f003 0307 	and.w	r3, r3, #7
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	db0b      	blt.n	8001b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	f003 021f 	and.w	r2, r3, #31
 8001b88:	4907      	ldr	r1, [pc, #28]	@ (8001ba8 <__NVIC_EnableIRQ+0x38>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	2001      	movs	r0, #1
 8001b92:	fa00 f202 	lsl.w	r2, r0, r2
 8001b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000e100 	.word	0xe000e100

08001bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	db0a      	blt.n	8001bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	490c      	ldr	r1, [pc, #48]	@ (8001bf8 <__NVIC_SetPriority+0x4c>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd4:	e00a      	b.n	8001bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4908      	ldr	r1, [pc, #32]	@ (8001bfc <__NVIC_SetPriority+0x50>)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	3b04      	subs	r3, #4
 8001be4:	0112      	lsls	r2, r2, #4
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	440b      	add	r3, r1
 8001bea:	761a      	strb	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000e100 	.word	0xe000e100
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	@ 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f1c3 0307 	rsb	r3, r3, #7
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	bf28      	it	cs
 8001c1e:	2304      	movcs	r3, #4
 8001c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3304      	adds	r3, #4
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d902      	bls.n	8001c30 <NVIC_EncodePriority+0x30>
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3b03      	subs	r3, #3
 8001c2e:	e000      	b.n	8001c32 <NVIC_EncodePriority+0x32>
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	401a      	ands	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c48:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	43d9      	mvns	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	4313      	orrs	r3, r2
         );
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3724      	adds	r7, #36	@ 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c78:	d301      	bcc.n	8001c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00f      	b.n	8001c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca8 <SysTick_Config+0x40>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c86:	210f      	movs	r1, #15
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f7ff ff8e 	bl	8001bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c90:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <SysTick_Config+0x40>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c96:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <SysTick_Config+0x40>)
 8001c98:	2207      	movs	r2, #7
 8001c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	e000e010 	.word	0xe000e010

08001cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ff29 	bl	8001b0c <__NVIC_SetPriorityGrouping>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd4:	f7ff ff3e 	bl	8001b54 <__NVIC_GetPriorityGrouping>
 8001cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	6978      	ldr	r0, [r7, #20]
 8001ce0:	f7ff ff8e 	bl	8001c00 <NVIC_EncodePriority>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff5d 	bl	8001bac <__NVIC_SetPriority>
}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff31 	bl	8001b70 <__NVIC_EnableIRQ>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffa2 	bl	8001c68 <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d3c:	f7ff feb6 	bl	8001aac <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e099      	b.n	8001e80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d6c:	e00f      	b.n	8001d8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d6e:	f7ff fe9d 	bl	8001aac <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b05      	cmp	r3, #5
 8001d7a:	d908      	bls.n	8001d8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2203      	movs	r2, #3
 8001d86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e078      	b.n	8001e80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e8      	bne.n	8001d6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	4b38      	ldr	r3, [pc, #224]	@ (8001e88 <HAL_DMA_Init+0x158>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d107      	bne.n	8001df8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df0:	4313      	orrs	r3, r2
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f023 0307 	bic.w	r3, r3, #7
 8001e0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d117      	bne.n	8001e52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00e      	beq.n	8001e52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 fa9f 	bl	8002378 <DMA_CheckFifoParam>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d008      	beq.n	8001e52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2240      	movs	r2, #64	@ 0x40
 8001e44:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e016      	b.n	8001e80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fa56 	bl	800230c <DMA_CalcBaseAndBitshift>
 8001e60:	4603      	mov	r3, r0
 8001e62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e68:	223f      	movs	r2, #63	@ 0x3f
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	f010803f 	.word	0xf010803f

08001e8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_DMA_Start_IT+0x26>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e040      	b.n	8001f34 <HAL_DMA_Start_IT+0xa8>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d12f      	bne.n	8001f26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2202      	movs	r2, #2
 8001eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f9e8 	bl	80022b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee4:	223f      	movs	r2, #63	@ 0x3f
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0216 	orr.w	r2, r2, #22
 8001efa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d007      	beq.n	8001f14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0208 	orr.w	r2, r2, #8
 8001f12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	e005      	b.n	8001f32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d004      	beq.n	8001f5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2280      	movs	r2, #128	@ 0x80
 8001f54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00c      	b.n	8001f74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2205      	movs	r2, #5
 8001f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0201 	bic.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f8c:	4b8e      	ldr	r3, [pc, #568]	@ (80021c8 <HAL_DMA_IRQHandler+0x248>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a8e      	ldr	r2, [pc, #568]	@ (80021cc <HAL_DMA_IRQHandler+0x24c>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	0a9b      	lsrs	r3, r3, #10
 8001f98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001faa:	2208      	movs	r2, #8
 8001fac:	409a      	lsls	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01a      	beq.n	8001fec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d013      	beq.n	8001fec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0204 	bic.w	r2, r2, #4
 8001fd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd8:	2208      	movs	r2, #8
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe4:	f043 0201 	orr.w	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d012      	beq.n	8002022 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00b      	beq.n	8002022 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800200e:	2201      	movs	r2, #1
 8002010:	409a      	lsls	r2, r3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201a:	f043 0202 	orr.w	r2, r3, #2
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002026:	2204      	movs	r2, #4
 8002028:	409a      	lsls	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d012      	beq.n	8002058 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00b      	beq.n	8002058 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002044:	2204      	movs	r2, #4
 8002046:	409a      	lsls	r2, r3
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002050:	f043 0204 	orr.w	r2, r3, #4
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205c:	2210      	movs	r2, #16
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d043      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d03c      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207a:	2210      	movs	r2, #16
 800207c:	409a      	lsls	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d018      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d108      	bne.n	80020b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d024      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	4798      	blx	r3
 80020ae:	e01f      	b.n	80020f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01b      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	4798      	blx	r3
 80020c0:	e016      	b.n	80020f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d107      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0208 	bic.w	r2, r2, #8
 80020de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f4:	2220      	movs	r2, #32
 80020f6:	409a      	lsls	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 808f 	beq.w	8002220 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0310 	and.w	r3, r3, #16
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 8087 	beq.w	8002220 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002116:	2220      	movs	r2, #32
 8002118:	409a      	lsls	r2, r3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b05      	cmp	r3, #5
 8002128:	d136      	bne.n	8002198 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0216 	bic.w	r2, r2, #22
 8002138:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002148:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d103      	bne.n	800215a <HAL_DMA_IRQHandler+0x1da>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0208 	bic.w	r2, r2, #8
 8002168:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216e:	223f      	movs	r2, #63	@ 0x3f
 8002170:	409a      	lsls	r2, r3
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800218a:	2b00      	cmp	r3, #0
 800218c:	d07e      	beq.n	800228c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	4798      	blx	r3
        }
        return;
 8002196:	e079      	b.n	800228c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d01d      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10d      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d031      	beq.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4798      	blx	r3
 80021c4:	e02c      	b.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
 80021c6:	bf00      	nop
 80021c8:	20000014 	.word	0x20000014
 80021cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d023      	beq.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
 80021e0:	e01e      	b.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10f      	bne.n	8002210 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0210 	bic.w	r2, r2, #16
 80021fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002224:	2b00      	cmp	r3, #0
 8002226:	d032      	beq.n	800228e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d022      	beq.n	800227a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2205      	movs	r2, #5
 8002238:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	3301      	adds	r3, #1
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	429a      	cmp	r2, r3
 8002256:	d307      	bcc.n	8002268 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f2      	bne.n	800224c <HAL_DMA_IRQHandler+0x2cc>
 8002266:	e000      	b.n	800226a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002268:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	4798      	blx	r3
 800228a:	e000      	b.n	800228e <HAL_DMA_IRQHandler+0x30e>
        return;
 800228c:	bf00      	nop
    }
  }
}
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022a2:	b2db      	uxtb	r3, r3
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b40      	cmp	r3, #64	@ 0x40
 80022dc:	d108      	bne.n	80022f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022ee:	e007      	b.n	8002300 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	60da      	str	r2, [r3, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	3b10      	subs	r3, #16
 800231c:	4a14      	ldr	r2, [pc, #80]	@ (8002370 <DMA_CalcBaseAndBitshift+0x64>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002326:	4a13      	ldr	r2, [pc, #76]	@ (8002374 <DMA_CalcBaseAndBitshift+0x68>)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d909      	bls.n	800234e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002342:	f023 0303 	bic.w	r3, r3, #3
 8002346:	1d1a      	adds	r2, r3, #4
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	659a      	str	r2, [r3, #88]	@ 0x58
 800234c:	e007      	b.n	800235e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002356:	f023 0303 	bic.w	r3, r3, #3
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	aaaaaaab 	.word	0xaaaaaaab
 8002374:	08006614 	.word	0x08006614

08002378 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002388:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d11f      	bne.n	80023d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d856      	bhi.n	8002446 <DMA_CheckFifoParam+0xce>
 8002398:	a201      	add	r2, pc, #4	@ (adr r2, 80023a0 <DMA_CheckFifoParam+0x28>)
 800239a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239e:	bf00      	nop
 80023a0:	080023b1 	.word	0x080023b1
 80023a4:	080023c3 	.word	0x080023c3
 80023a8:	080023b1 	.word	0x080023b1
 80023ac:	08002447 	.word	0x08002447
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d046      	beq.n	800244a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c0:	e043      	b.n	800244a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023ca:	d140      	bne.n	800244e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d0:	e03d      	b.n	800244e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023da:	d121      	bne.n	8002420 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d837      	bhi.n	8002452 <DMA_CheckFifoParam+0xda>
 80023e2:	a201      	add	r2, pc, #4	@ (adr r2, 80023e8 <DMA_CheckFifoParam+0x70>)
 80023e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e8:	080023f9 	.word	0x080023f9
 80023ec:	080023ff 	.word	0x080023ff
 80023f0:	080023f9 	.word	0x080023f9
 80023f4:	08002411 	.word	0x08002411
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
      break;
 80023fc:	e030      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002402:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d025      	beq.n	8002456 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800240e:	e022      	b.n	8002456 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002418:	d11f      	bne.n	800245a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800241e:	e01c      	b.n	800245a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d903      	bls.n	800242e <DMA_CheckFifoParam+0xb6>
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b03      	cmp	r3, #3
 800242a:	d003      	beq.n	8002434 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800242c:	e018      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
      break;
 8002432:	e015      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002438:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00e      	beq.n	800245e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
      break;
 8002444:	e00b      	b.n	800245e <DMA_CheckFifoParam+0xe6>
      break;
 8002446:	bf00      	nop
 8002448:	e00a      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      break;
 800244a:	bf00      	nop
 800244c:	e008      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      break;
 800244e:	bf00      	nop
 8002450:	e006      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      break;
 8002452:	bf00      	nop
 8002454:	e004      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      break;
 8002456:	bf00      	nop
 8002458:	e002      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      break;   
 800245a:	bf00      	nop
 800245c:	e000      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      break;
 800245e:	bf00      	nop
    }
  } 
  
  return status; 
 8002460:	7bfb      	ldrb	r3, [r7, #15]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop

08002470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002470:	b480      	push	{r7}
 8002472:	b089      	sub	sp, #36	@ 0x24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
 800248a:	e165      	b.n	8002758 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800248c:	2201      	movs	r2, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	f040 8154 	bne.w	8002752 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d005      	beq.n	80024c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d130      	bne.n	8002524 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	2203      	movs	r2, #3
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024f8:	2201      	movs	r2, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f003 0201 	and.w	r2, r3, #1
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	2b03      	cmp	r3, #3
 800252e:	d017      	beq.n	8002560 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2203      	movs	r2, #3
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d123      	bne.n	80025b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	08da      	lsrs	r2, r3, #3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3208      	adds	r2, #8
 8002574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002578:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	220f      	movs	r2, #15
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	08da      	lsrs	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3208      	adds	r2, #8
 80025ae:	69b9      	ldr	r1, [r7, #24]
 80025b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	2203      	movs	r2, #3
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0203 	and.w	r2, r3, #3
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80ae 	beq.w	8002752 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002770 <HAL_GPIO_Init+0x300>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	4a5c      	ldr	r2, [pc, #368]	@ (8002770 <HAL_GPIO_Init+0x300>)
 8002600:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002604:	6453      	str	r3, [r2, #68]	@ 0x44
 8002606:	4b5a      	ldr	r3, [pc, #360]	@ (8002770 <HAL_GPIO_Init+0x300>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002612:	4a58      	ldr	r2, [pc, #352]	@ (8002774 <HAL_GPIO_Init+0x304>)
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	089b      	lsrs	r3, r3, #2
 8002618:	3302      	adds	r3, #2
 800261a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	220f      	movs	r2, #15
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a4f      	ldr	r2, [pc, #316]	@ (8002778 <HAL_GPIO_Init+0x308>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d025      	beq.n	800268a <HAL_GPIO_Init+0x21a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a4e      	ldr	r2, [pc, #312]	@ (800277c <HAL_GPIO_Init+0x30c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d01f      	beq.n	8002686 <HAL_GPIO_Init+0x216>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a4d      	ldr	r2, [pc, #308]	@ (8002780 <HAL_GPIO_Init+0x310>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d019      	beq.n	8002682 <HAL_GPIO_Init+0x212>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a4c      	ldr	r2, [pc, #304]	@ (8002784 <HAL_GPIO_Init+0x314>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d013      	beq.n	800267e <HAL_GPIO_Init+0x20e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a4b      	ldr	r2, [pc, #300]	@ (8002788 <HAL_GPIO_Init+0x318>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00d      	beq.n	800267a <HAL_GPIO_Init+0x20a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4a      	ldr	r2, [pc, #296]	@ (800278c <HAL_GPIO_Init+0x31c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d007      	beq.n	8002676 <HAL_GPIO_Init+0x206>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a49      	ldr	r2, [pc, #292]	@ (8002790 <HAL_GPIO_Init+0x320>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d101      	bne.n	8002672 <HAL_GPIO_Init+0x202>
 800266e:	2306      	movs	r3, #6
 8002670:	e00c      	b.n	800268c <HAL_GPIO_Init+0x21c>
 8002672:	2307      	movs	r3, #7
 8002674:	e00a      	b.n	800268c <HAL_GPIO_Init+0x21c>
 8002676:	2305      	movs	r3, #5
 8002678:	e008      	b.n	800268c <HAL_GPIO_Init+0x21c>
 800267a:	2304      	movs	r3, #4
 800267c:	e006      	b.n	800268c <HAL_GPIO_Init+0x21c>
 800267e:	2303      	movs	r3, #3
 8002680:	e004      	b.n	800268c <HAL_GPIO_Init+0x21c>
 8002682:	2302      	movs	r3, #2
 8002684:	e002      	b.n	800268c <HAL_GPIO_Init+0x21c>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_GPIO_Init+0x21c>
 800268a:	2300      	movs	r3, #0
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	f002 0203 	and.w	r2, r2, #3
 8002692:	0092      	lsls	r2, r2, #2
 8002694:	4093      	lsls	r3, r2
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800269c:	4935      	ldr	r1, [pc, #212]	@ (8002774 <HAL_GPIO_Init+0x304>)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	089b      	lsrs	r3, r3, #2
 80026a2:	3302      	adds	r3, #2
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002794 <HAL_GPIO_Init+0x324>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ce:	4a31      	ldr	r2, [pc, #196]	@ (8002794 <HAL_GPIO_Init+0x324>)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002794 <HAL_GPIO_Init+0x324>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f8:	4a26      	ldr	r2, [pc, #152]	@ (8002794 <HAL_GPIO_Init+0x324>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026fe:	4b25      	ldr	r3, [pc, #148]	@ (8002794 <HAL_GPIO_Init+0x324>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002722:	4a1c      	ldr	r2, [pc, #112]	@ (8002794 <HAL_GPIO_Init+0x324>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002728:	4b1a      	ldr	r3, [pc, #104]	@ (8002794 <HAL_GPIO_Init+0x324>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800274c:	4a11      	ldr	r2, [pc, #68]	@ (8002794 <HAL_GPIO_Init+0x324>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3301      	adds	r3, #1
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	2b0f      	cmp	r3, #15
 800275c:	f67f ae96 	bls.w	800248c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	3724      	adds	r7, #36	@ 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800
 8002774:	40013800 	.word	0x40013800
 8002778:	40020000 	.word	0x40020000
 800277c:	40020400 	.word	0x40020400
 8002780:	40020800 	.word	0x40020800
 8002784:	40020c00 	.word	0x40020c00
 8002788:	40021000 	.word	0x40021000
 800278c:	40021400 	.word	0x40021400
 8002790:	40021800 	.word	0x40021800
 8002794:	40013c00 	.word	0x40013c00

08002798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	807b      	strh	r3, [r7, #2]
 80027a4:	4613      	mov	r3, r2
 80027a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027a8:	787b      	ldrb	r3, [r7, #1]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ae:	887a      	ldrh	r2, [r7, #2]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027b4:	e003      	b.n	80027be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027b6:	887b      	ldrh	r3, [r7, #2]
 80027b8:	041a      	lsls	r2, r3, #16
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	619a      	str	r2, [r3, #24]
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027d6:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d006      	beq.n	80027f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027e2:	4a05      	ldr	r2, [pc, #20]	@ (80027f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027e8:	88fb      	ldrh	r3, [r7, #6]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fd fe82 	bl	80004f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40013c00 	.word	0x40013c00

080027fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e12b      	b.n	8002a66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fe ff22 	bl	800166c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2224      	movs	r2, #36	@ 0x24
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800284e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800285e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002860:	f002 fa44 	bl	8004cec <HAL_RCC_GetPCLK1Freq>
 8002864:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4a81      	ldr	r2, [pc, #516]	@ (8002a70 <HAL_I2C_Init+0x274>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d807      	bhi.n	8002880 <HAL_I2C_Init+0x84>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4a80      	ldr	r2, [pc, #512]	@ (8002a74 <HAL_I2C_Init+0x278>)
 8002874:	4293      	cmp	r3, r2
 8002876:	bf94      	ite	ls
 8002878:	2301      	movls	r3, #1
 800287a:	2300      	movhi	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	e006      	b.n	800288e <HAL_I2C_Init+0x92>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4a7d      	ldr	r2, [pc, #500]	@ (8002a78 <HAL_I2C_Init+0x27c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	bf94      	ite	ls
 8002888:	2301      	movls	r3, #1
 800288a:	2300      	movhi	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e0e7      	b.n	8002a66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4a78      	ldr	r2, [pc, #480]	@ (8002a7c <HAL_I2C_Init+0x280>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	0c9b      	lsrs	r3, r3, #18
 80028a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	4a6a      	ldr	r2, [pc, #424]	@ (8002a70 <HAL_I2C_Init+0x274>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d802      	bhi.n	80028d0 <HAL_I2C_Init+0xd4>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	3301      	adds	r3, #1
 80028ce:	e009      	b.n	80028e4 <HAL_I2C_Init+0xe8>
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	4a69      	ldr	r2, [pc, #420]	@ (8002a80 <HAL_I2C_Init+0x284>)
 80028dc:	fba2 2303 	umull	r2, r3, r2, r3
 80028e0:	099b      	lsrs	r3, r3, #6
 80028e2:	3301      	adds	r3, #1
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	430b      	orrs	r3, r1
 80028ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	495c      	ldr	r1, [pc, #368]	@ (8002a70 <HAL_I2C_Init+0x274>)
 8002900:	428b      	cmp	r3, r1
 8002902:	d819      	bhi.n	8002938 <HAL_I2C_Init+0x13c>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1e59      	subs	r1, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002912:	1c59      	adds	r1, r3, #1
 8002914:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002918:	400b      	ands	r3, r1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <HAL_I2C_Init+0x138>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1e59      	subs	r1, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	fbb1 f3f3 	udiv	r3, r1, r3
 800292c:	3301      	adds	r3, #1
 800292e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002932:	e051      	b.n	80029d8 <HAL_I2C_Init+0x1dc>
 8002934:	2304      	movs	r3, #4
 8002936:	e04f      	b.n	80029d8 <HAL_I2C_Init+0x1dc>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d111      	bne.n	8002964 <HAL_I2C_Init+0x168>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1e58      	subs	r0, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	440b      	add	r3, r1
 800294e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002952:	3301      	adds	r3, #1
 8002954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf0c      	ite	eq
 800295c:	2301      	moveq	r3, #1
 800295e:	2300      	movne	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	e012      	b.n	800298a <HAL_I2C_Init+0x18e>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1e58      	subs	r0, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	0099      	lsls	r1, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	fbb0 f3f3 	udiv	r3, r0, r3
 800297a:	3301      	adds	r3, #1
 800297c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_I2C_Init+0x196>
 800298e:	2301      	movs	r3, #1
 8002990:	e022      	b.n	80029d8 <HAL_I2C_Init+0x1dc>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10e      	bne.n	80029b8 <HAL_I2C_Init+0x1bc>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1e58      	subs	r0, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6859      	ldr	r1, [r3, #4]
 80029a2:	460b      	mov	r3, r1
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	440b      	add	r3, r1
 80029a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ac:	3301      	adds	r3, #1
 80029ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029b6:	e00f      	b.n	80029d8 <HAL_I2C_Init+0x1dc>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1e58      	subs	r0, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6859      	ldr	r1, [r3, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	0099      	lsls	r1, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ce:	3301      	adds	r3, #1
 80029d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	6809      	ldr	r1, [r1, #0]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69da      	ldr	r2, [r3, #28]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6911      	ldr	r1, [r2, #16]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68d2      	ldr	r2, [r2, #12]
 8002a12:	4311      	orrs	r1, r2
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695a      	ldr	r2, [r3, #20]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	000186a0 	.word	0x000186a0
 8002a74:	001e847f 	.word	0x001e847f
 8002a78:	003d08ff 	.word	0x003d08ff
 8002a7c:	431bde83 	.word	0x431bde83
 8002a80:	10624dd3 	.word	0x10624dd3

08002a84 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a96:	2b80      	cmp	r3, #128	@ 0x80
 8002a98:	d103      	bne.n	8002aa2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	611a      	str	r2, [r3, #16]
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	461a      	mov	r2, r3
 8002abc:	460b      	mov	r3, r1
 8002abe:	817b      	strh	r3, [r7, #10]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ac4:	f7fe fff2 	bl	8001aac <HAL_GetTick>
 8002ac8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	f040 80e0 	bne.w	8002c98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	2319      	movs	r3, #25
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4970      	ldr	r1, [pc, #448]	@ (8002ca4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f001 fdea 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
 8002af0:	e0d3      	b.n	8002c9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_I2C_Master_Transmit+0x50>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e0cc      	b.n	8002c9a <HAL_I2C_Master_Transmit+0x1ea>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d007      	beq.n	8002b26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0201 	orr.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2221      	movs	r2, #33	@ 0x21
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2210      	movs	r2, #16
 8002b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	893a      	ldrh	r2, [r7, #8]
 8002b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4a50      	ldr	r2, [pc, #320]	@ (8002ca8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b66:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b68:	8979      	ldrh	r1, [r7, #10]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	6a3a      	ldr	r2, [r7, #32]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f001 fc7a 	bl	8004468 <I2C_MasterRequestWrite>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e08d      	b.n	8002c9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b94:	e066      	b.n	8002c64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	6a39      	ldr	r1, [r7, #32]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f001 fea8 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d107      	bne.n	8002bbe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e06b      	b.n	8002c9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc6:	781a      	ldrb	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d11b      	bne.n	8002c38 <HAL_I2C_Master_Transmit+0x188>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d017      	beq.n	8002c38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0c:	781a      	ldrb	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	6a39      	ldr	r1, [r7, #32]
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f001 fe9f 	bl	8004980 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d107      	bne.n	8002c60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e01a      	b.n	8002c9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d194      	bne.n	8002b96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	e000      	b.n	8002c9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c98:	2302      	movs	r3, #2
  }
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	00100002 	.word	0x00100002
 8002ca8:	ffff0000 	.word	0xffff0000

08002cac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ccc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	2b10      	cmp	r3, #16
 8002cda:	d003      	beq.n	8002ce4 <HAL_I2C_EV_IRQHandler+0x38>
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b40      	cmp	r3, #64	@ 0x40
 8002ce0:	f040 80b1 	bne.w	8002e46 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10d      	bne.n	8002d1a <HAL_I2C_EV_IRQHandler+0x6e>
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002d04:	d003      	beq.n	8002d0e <HAL_I2C_EV_IRQHandler+0x62>
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002d0c:	d101      	bne.n	8002d12 <HAL_I2C_EV_IRQHandler+0x66>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_I2C_EV_IRQHandler+0x68>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	f000 8114 	beq.w	8002f42 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <HAL_I2C_EV_IRQHandler+0x90>
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d006      	beq.n	8002d3c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f001 fecf 	bl	8004ad2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fd7a 	bl	800382e <I2C_Master_SB>
 8002d3a:	e083      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d008      	beq.n	8002d58 <HAL_I2C_EV_IRQHandler+0xac>
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fdf2 	bl	800393a <I2C_Master_ADD10>
 8002d56:	e075      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d008      	beq.n	8002d74 <HAL_I2C_EV_IRQHandler+0xc8>
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fe0e 	bl	800398e <I2C_Master_ADDR>
 8002d72:	e067      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d036      	beq.n	8002dec <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d8c:	f000 80db 	beq.w	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00d      	beq.n	8002db6 <HAL_I2C_EV_IRQHandler+0x10a>
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_I2C_EV_IRQHandler+0x10a>
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d103      	bne.n	8002db6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f9d6 	bl	8003160 <I2C_MasterTransmit_TXE>
 8002db4:	e046      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80c2 	beq.w	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80bc 	beq.w	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002dce:	7bbb      	ldrb	r3, [r7, #14]
 8002dd0:	2b21      	cmp	r3, #33	@ 0x21
 8002dd2:	d103      	bne.n	8002ddc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 fa5f 	bl	8003298 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dda:	e0b4      	b.n	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b40      	cmp	r3, #64	@ 0x40
 8002de0:	f040 80b1 	bne.w	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 facd 	bl	8003384 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dea:	e0ac      	b.n	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002df6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dfa:	f000 80a4 	beq.w	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00d      	beq.n	8002e24 <HAL_I2C_EV_IRQHandler+0x178>
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <HAL_I2C_EV_IRQHandler+0x178>
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d103      	bne.n	8002e24 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 fb49 	bl	80034b4 <I2C_MasterReceive_RXNE>
 8002e22:	e00f      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 808b 	beq.w	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8085 	beq.w	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fc01 	bl	8003644 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e42:	e080      	b.n	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
 8002e44:	e07f      	b.n	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d004      	beq.n	8002e58 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	e007      	b.n	8002e68 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d011      	beq.n	8002e96 <HAL_I2C_EV_IRQHandler+0x1ea>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00c      	beq.n	8002e96 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002e8c:	69b9      	ldr	r1, [r7, #24]
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 ffcc 	bl	8003e2c <I2C_Slave_ADDR>
 8002e94:	e05a      	b.n	8002f4c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_I2C_EV_IRQHandler+0x206>
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f001 f806 	bl	8003ebc <I2C_Slave_STOPF>
 8002eb0:	e04c      	b.n	8002f4c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002eb2:	7bbb      	ldrb	r3, [r7, #14]
 8002eb4:	2b21      	cmp	r3, #33	@ 0x21
 8002eb6:	d002      	beq.n	8002ebe <HAL_I2C_EV_IRQHandler+0x212>
 8002eb8:	7bbb      	ldrb	r3, [r7, #14]
 8002eba:	2b29      	cmp	r3, #41	@ 0x29
 8002ebc:	d120      	bne.n	8002f00 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00d      	beq.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x238>
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x238>
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d103      	bne.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 fee7 	bl	8003cb0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ee2:	e032      	b.n	8002f4a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d02d      	beq.n	8002f4a <HAL_I2C_EV_IRQHandler+0x29e>
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d028      	beq.n	8002f4a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 ff16 	bl	8003d2a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002efe:	e024      	b.n	8002f4a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00d      	beq.n	8002f26 <HAL_I2C_EV_IRQHandler+0x27a>
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_I2C_EV_IRQHandler+0x27a>
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d103      	bne.n	8002f26 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 ff24 	bl	8003d6c <I2C_SlaveReceive_RXNE>
 8002f24:	e012      	b.n	8002f4c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00d      	beq.n	8002f4c <HAL_I2C_EV_IRQHandler+0x2a0>
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d008      	beq.n	8002f4c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 ff54 	bl	8003de8 <I2C_SlaveReceive_BTF>
 8002f40:	e004      	b.n	8002f4c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002f42:	bf00      	nop
 8002f44:	e002      	b.n	8002f4c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f46:	bf00      	nop
 8002f48:	e000      	b.n	8002f4c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f4a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b08a      	sub	sp, #40	@ 0x28
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f74:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00d      	beq.n	8002f9c <HAL_I2C_ER_IRQHandler+0x4a>
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d008      	beq.n	8002f9c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002f9a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00d      	beq.n	8002fc2 <HAL_I2C_ER_IRQHandler+0x70>
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb2:	f043 0302 	orr.w	r3, r3, #2
 8002fb6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002fc0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d03e      	beq.n	800304a <HAL_I2C_ER_IRQHandler+0xf8>
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d039      	beq.n	800304a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8002fd6:	7efb      	ldrb	r3, [r7, #27]
 8002fd8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002ff0:	7ebb      	ldrb	r3, [r7, #26]
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d112      	bne.n	800301c <HAL_I2C_ER_IRQHandler+0xca>
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10f      	bne.n	800301c <HAL_I2C_ER_IRQHandler+0xca>
 8002ffc:	7cfb      	ldrb	r3, [r7, #19]
 8002ffe:	2b21      	cmp	r3, #33	@ 0x21
 8003000:	d008      	beq.n	8003014 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003002:	7cfb      	ldrb	r3, [r7, #19]
 8003004:	2b29      	cmp	r3, #41	@ 0x29
 8003006:	d005      	beq.n	8003014 <HAL_I2C_ER_IRQHandler+0xc2>
 8003008:	7cfb      	ldrb	r3, [r7, #19]
 800300a:	2b28      	cmp	r3, #40	@ 0x28
 800300c:	d106      	bne.n	800301c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b21      	cmp	r3, #33	@ 0x21
 8003012:	d103      	bne.n	800301c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f001 f881 	bl	800411c <I2C_Slave_AF>
 800301a:	e016      	b.n	800304a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003024:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	f043 0304 	orr.w	r3, r3, #4
 800302c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800302e:	7efb      	ldrb	r3, [r7, #27]
 8003030:	2b10      	cmp	r3, #16
 8003032:	d002      	beq.n	800303a <HAL_I2C_ER_IRQHandler+0xe8>
 8003034:	7efb      	ldrb	r3, [r7, #27]
 8003036:	2b40      	cmp	r3, #64	@ 0x40
 8003038:	d107      	bne.n	800304a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003048:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00d      	beq.n	8003070 <HAL_I2C_ER_IRQHandler+0x11e>
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	f043 0308 	orr.w	r3, r3, #8
 8003064:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800306e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f001 f8be 	bl	8004204 <I2C_ITError>
  }
}
 8003088:	bf00      	nop
 800308a:	3728      	adds	r7, #40	@ 0x28
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	70fb      	strb	r3, [r7, #3]
 80030ec:	4613      	mov	r3, r2
 80030ee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800316e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003176:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003182:	2b00      	cmp	r3, #0
 8003184:	d150      	bne.n	8003228 <I2C_MasterTransmit_TXE+0xc8>
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	2b21      	cmp	r3, #33	@ 0x21
 800318a:	d14d      	bne.n	8003228 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b08      	cmp	r3, #8
 8003190:	d01d      	beq.n	80031ce <I2C_MasterTransmit_TXE+0x6e>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b20      	cmp	r3, #32
 8003196:	d01a      	beq.n	80031ce <I2C_MasterTransmit_TXE+0x6e>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800319e:	d016      	beq.n	80031ce <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031ae:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2211      	movs	r2, #17
 80031b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff ff62 	bl	8003090 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031cc:	e060      	b.n	8003290 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031dc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ec:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b40      	cmp	r3, #64	@ 0x40
 8003206:	d107      	bne.n	8003218 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff ff7d 	bl	8003110 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003216:	e03b      	b.n	8003290 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff ff35 	bl	8003090 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003226:	e033      	b.n	8003290 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	2b21      	cmp	r3, #33	@ 0x21
 800322c:	d005      	beq.n	800323a <I2C_MasterTransmit_TXE+0xda>
 800322e:	7bbb      	ldrb	r3, [r7, #14]
 8003230:	2b40      	cmp	r3, #64	@ 0x40
 8003232:	d12d      	bne.n	8003290 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	2b22      	cmp	r3, #34	@ 0x22
 8003238:	d12a      	bne.n	8003290 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d108      	bne.n	8003256 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003252:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003254:	e01c      	b.n	8003290 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b40      	cmp	r3, #64	@ 0x40
 8003260:	d103      	bne.n	800326a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f88e 	bl	8003384 <I2C_MemoryTransmit_TXE_BTF>
}
 8003268:	e012      	b.n	8003290 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326e:	781a      	ldrb	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800328e:	e7ff      	b.n	8003290 <I2C_MasterTransmit_TXE+0x130>
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b21      	cmp	r3, #33	@ 0x21
 80032b0:	d164      	bne.n	800337c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d012      	beq.n	80032e2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	781a      	ldrb	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80032e0:	e04c      	b.n	800337c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d01d      	beq.n	8003324 <I2C_MasterTransmit_BTF+0x8c>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	d01a      	beq.n	8003324 <I2C_MasterTransmit_BTF+0x8c>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032f4:	d016      	beq.n	8003324 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003304:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2211      	movs	r2, #17
 800330a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff feb7 	bl	8003090 <HAL_I2C_MasterTxCpltCallback>
}
 8003322:	e02b      	b.n	800337c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003332:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003342:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b40      	cmp	r3, #64	@ 0x40
 800335c:	d107      	bne.n	800336e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff fed2 	bl	8003110 <HAL_I2C_MemTxCpltCallback>
}
 800336c:	e006      	b.n	800337c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff fe8a 	bl	8003090 <HAL_I2C_MasterTxCpltCallback>
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003392:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003398:	2b00      	cmp	r3, #0
 800339a:	d11d      	bne.n	80033d8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d10b      	bne.n	80033bc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033b4:	1c9a      	adds	r2, r3, #2
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80033ba:	e077      	b.n	80034ac <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	121b      	asrs	r3, r3, #8
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80033d6:	e069      	b.n	80034ac <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d10b      	bne.n	80033f8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80033f6:	e059      	b.n	80034ac <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d152      	bne.n	80034a6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	2b22      	cmp	r3, #34	@ 0x22
 8003404:	d10d      	bne.n	8003422 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003414:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003420:	e044      	b.n	80034ac <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d015      	beq.n	8003458 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2b21      	cmp	r3, #33	@ 0x21
 8003430:	d112      	bne.n	8003458 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003436:	781a      	ldrb	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003456:	e029      	b.n	80034ac <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d124      	bne.n	80034ac <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	2b21      	cmp	r3, #33	@ 0x21
 8003466:	d121      	bne.n	80034ac <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003476:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003486:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff fe36 	bl	8003110 <HAL_I2C_MemTxCpltCallback>
}
 80034a4:	e002      	b.n	80034ac <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff faec 	bl	8002a84 <I2C_Flush_DR>
}
 80034ac:	bf00      	nop
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b22      	cmp	r3, #34	@ 0x22
 80034c6:	f040 80b9 	bne.w	800363c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ce:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d921      	bls.n	8003522 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b03      	cmp	r3, #3
 800350c:	f040 8096 	bne.w	800363c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800351e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003520:	e08c      	b.n	800363c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003526:	2b02      	cmp	r3, #2
 8003528:	d07f      	beq.n	800362a <I2C_MasterReceive_RXNE+0x176>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d002      	beq.n	8003536 <I2C_MasterReceive_RXNE+0x82>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d179      	bne.n	800362a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f001 fa6a 	bl	8004a10 <I2C_WaitOnSTOPRequestThroughIT>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d14c      	bne.n	80035dc <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003550:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003560:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b40      	cmp	r3, #64	@ 0x40
 800359a:	d10a      	bne.n	80035b2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff fdba 	bl	8003124 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035b0:	e044      	b.n	800363c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d002      	beq.n	80035c6 <I2C_MasterReceive_RXNE+0x112>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d103      	bne.n	80035ce <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80035cc:	e002      	b.n	80035d4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2212      	movs	r2, #18
 80035d2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff fd65 	bl	80030a4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035da:	e02f      	b.n	800363c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80035ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff fd88 	bl	8003138 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003628:	e008      	b.n	800363c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003638:	605a      	str	r2, [r3, #4]
}
 800363a:	e7ff      	b.n	800363c <I2C_MasterReceive_RXNE+0x188>
 800363c:	bf00      	nop
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003650:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b04      	cmp	r3, #4
 800365a:	d11b      	bne.n	8003694 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800366a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003692:	e0c8      	b.n	8003826 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b03      	cmp	r3, #3
 800369c:	d129      	bne.n	80036f2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ac:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d00a      	beq.n	80036ca <I2C_MasterReceive_BTF+0x86>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d007      	beq.n	80036ca <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036c8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80036f0:	e099      	b.n	8003826 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	f040 8081 	bne.w	8003800 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d002      	beq.n	800370a <I2C_MasterReceive_BTF+0xc6>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b10      	cmp	r3, #16
 8003708:	d108      	bne.n	800371c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e019      	b.n	8003750 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b04      	cmp	r3, #4
 8003720:	d002      	beq.n	8003728 <I2C_MasterReceive_BTF+0xe4>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d108      	bne.n	800373a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	e00a      	b.n	8003750 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b10      	cmp	r3, #16
 800373e:	d007      	beq.n	8003750 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800374e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80037aa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b40      	cmp	r3, #64	@ 0x40
 80037be:	d10a      	bne.n	80037d6 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff fca8 	bl	8003124 <HAL_I2C_MemRxCpltCallback>
}
 80037d4:	e027      	b.n	8003826 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d002      	beq.n	80037ea <I2C_MasterReceive_BTF+0x1a6>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	d103      	bne.n	80037f2 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80037f0:	e002      	b.n	80037f8 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2212      	movs	r2, #18
 80037f6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff fc53 	bl	80030a4 <HAL_I2C_MasterRxCpltCallback>
}
 80037fe:	e012      	b.n	8003826 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003826:	bf00      	nop
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b40      	cmp	r3, #64	@ 0x40
 8003840:	d117      	bne.n	8003872 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384e:	b2db      	uxtb	r3, r3
 8003850:	461a      	mov	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800385a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800385c:	e067      	b.n	800392e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	b2da      	uxtb	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	611a      	str	r2, [r3, #16]
}
 8003870:	e05d      	b.n	800392e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800387a:	d133      	bne.n	80038e4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b21      	cmp	r3, #33	@ 0x21
 8003886:	d109      	bne.n	800389c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003898:	611a      	str	r2, [r3, #16]
 800389a:	e008      	b.n	80038ae <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d004      	beq.n	80038c0 <I2C_Master_SB+0x92>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d108      	bne.n	80038d2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d032      	beq.n	800392e <I2C_Master_SB+0x100>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d02d      	beq.n	800392e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038e0:	605a      	str	r2, [r3, #4]
}
 80038e2:	e024      	b.n	800392e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10e      	bne.n	800390a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	11db      	asrs	r3, r3, #7
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	f003 0306 	and.w	r3, r3, #6
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f063 030f 	orn	r3, r3, #15
 8003900:	b2da      	uxtb	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	611a      	str	r2, [r3, #16]
}
 8003908:	e011      	b.n	800392e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800390e:	2b01      	cmp	r3, #1
 8003910:	d10d      	bne.n	800392e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003916:	b29b      	uxth	r3, r3
 8003918:	11db      	asrs	r3, r3, #7
 800391a:	b2db      	uxtb	r3, r3
 800391c:	f003 0306 	and.w	r3, r3, #6
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f063 030e 	orn	r3, r3, #14
 8003926:	b2da      	uxtb	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	611a      	str	r2, [r3, #16]
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003946:	b2da      	uxtb	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003952:	2b00      	cmp	r3, #0
 8003954:	d004      	beq.n	8003960 <I2C_Master_ADD10+0x26>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800395a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395c:	2b00      	cmp	r3, #0
 800395e:	d108      	bne.n	8003972 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00c      	beq.n	8003982 <I2C_Master_ADD10+0x48>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003980:	605a      	str	r2, [r3, #4]
  }
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800398e:	b480      	push	{r7}
 8003990:	b091      	sub	sp, #68	@ 0x44
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800399c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b22      	cmp	r3, #34	@ 0x22
 80039b6:	f040 8169 	bne.w	8003c8c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10f      	bne.n	80039e2 <I2C_Master_ADDR+0x54>
 80039c2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80039c6:	2b40      	cmp	r3, #64	@ 0x40
 80039c8:	d10b      	bne.n	80039e2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ca:	2300      	movs	r3, #0
 80039cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80039de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e0:	e160      	b.n	8003ca4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d11d      	bne.n	8003a26 <I2C_Master_ADDR+0x98>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80039f2:	d118      	bne.n	8003a26 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f4:	2300      	movs	r3, #0
 80039f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a18:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a24:	e13e      	b.n	8003ca4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d113      	bne.n	8003a58 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a30:	2300      	movs	r3, #0
 8003a32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	e115      	b.n	8003c84 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	f040 808a 	bne.w	8003b78 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a66:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a6a:	d137      	bne.n	8003adc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a7a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a8a:	d113      	bne.n	8003ab4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a9a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	e0e7      	b.n	8003c84 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	623b      	str	r3, [r7, #32]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	623b      	str	r3, [r7, #32]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	623b      	str	r3, [r7, #32]
 8003ac8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	e0d3      	b.n	8003c84 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d02e      	beq.n	8003b40 <I2C_Master_ADDR+0x1b2>
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	d02b      	beq.n	8003b40 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aea:	2b12      	cmp	r3, #18
 8003aec:	d102      	bne.n	8003af4 <I2C_Master_ADDR+0x166>
 8003aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d125      	bne.n	8003b40 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d00e      	beq.n	8003b18 <I2C_Master_ADDR+0x18a>
 8003afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d00b      	beq.n	8003b18 <I2C_Master_ADDR+0x18a>
 8003b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b02:	2b10      	cmp	r3, #16
 8003b04:	d008      	beq.n	8003b18 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	e007      	b.n	8003b28 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b26:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	61fb      	str	r3, [r7, #28]
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	e0a1      	b.n	8003c84 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b4e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b50:	2300      	movs	r3, #0
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	61bb      	str	r3, [r7, #24]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	e085      	b.n	8003c84 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d14d      	bne.n	8003c1e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d016      	beq.n	8003bb6 <I2C_Master_ADDR+0x228>
 8003b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d013      	beq.n	8003bb6 <I2C_Master_ADDR+0x228>
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b90:	2b10      	cmp	r3, #16
 8003b92:	d010      	beq.n	8003bb6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	e007      	b.n	8003bc6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bc4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bd4:	d117      	bne.n	8003c06 <I2C_Master_ADDR+0x278>
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bdc:	d00b      	beq.n	8003bf6 <I2C_Master_ADDR+0x268>
 8003bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d008      	beq.n	8003bf6 <I2C_Master_ADDR+0x268>
 8003be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d005      	beq.n	8003bf6 <I2C_Master_ADDR+0x268>
 8003bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bec:	2b10      	cmp	r3, #16
 8003bee:	d002      	beq.n	8003bf6 <I2C_Master_ADDR+0x268>
 8003bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d107      	bne.n	8003c06 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c04:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	e032      	b.n	8003c84 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c2c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c3c:	d117      	bne.n	8003c6e <I2C_Master_ADDR+0x2e0>
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c44:	d00b      	beq.n	8003c5e <I2C_Master_ADDR+0x2d0>
 8003c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d008      	beq.n	8003c5e <I2C_Master_ADDR+0x2d0>
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d005      	beq.n	8003c5e <I2C_Master_ADDR+0x2d0>
 8003c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c54:	2b10      	cmp	r3, #16
 8003c56:	d002      	beq.n	8003c5e <I2C_Master_ADDR+0x2d0>
 8003c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	d107      	bne.n	8003c6e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c6c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003c8a:	e00b      	b.n	8003ca4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
}
 8003ca2:	e7ff      	b.n	8003ca4 <I2C_Master_ADDR+0x316>
 8003ca4:	bf00      	nop
 8003ca6:	3744      	adds	r7, #68	@ 0x44
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cbe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d02b      	beq.n	8003d22 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	781a      	ldrb	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d114      	bne.n	8003d22 <I2C_SlaveTransmit_TXE+0x72>
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b29      	cmp	r3, #41	@ 0x29
 8003cfc:	d111      	bne.n	8003d22 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d0c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2221      	movs	r2, #33	@ 0x21
 8003d12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2228      	movs	r2, #40	@ 0x28
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff f9cb 	bl	80030b8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003d22:	bf00      	nop
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d011      	beq.n	8003d60 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d40:	781a      	ldrb	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d7a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d02c      	beq.n	8003de0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d114      	bne.n	8003de0 <I2C_SlaveReceive_RXNE+0x74>
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dba:	d111      	bne.n	8003de0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dca:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2222      	movs	r2, #34	@ 0x22
 8003dd0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2228      	movs	r2, #40	@ 0x28
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff f976 	bl	80030cc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003de0:	bf00      	nop
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d012      	beq.n	8003e20 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e46:	2b28      	cmp	r3, #40	@ 0x28
 8003e48:	d125      	bne.n	8003e96 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e58:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003e64:	2301      	movs	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d103      	bne.n	8003e7a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	81bb      	strh	r3, [r7, #12]
 8003e78:	e002      	b.n	8003e80 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003e88:	89ba      	ldrh	r2, [r7, #12]
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff f926 	bl	80030e0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003e94:	e00e      	b.n	8003eb4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e96:	2300      	movs	r3, #0
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003eda:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003edc:	2300      	movs	r3, #0
 8003ede:	60bb      	str	r3, [r7, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f08:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f18:	d172      	bne.n	8004000 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	2b22      	cmp	r3, #34	@ 0x22
 8003f1e:	d002      	beq.n	8003f26 <I2C_Slave_STOPF+0x6a>
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f24:	d135      	bne.n	8003f92 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	f043 0204 	orr.w	r2, r3, #4
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f58:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fe f998 	bl	8002294 <HAL_DMA_GetState>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d049      	beq.n	8003ffe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6e:	4a69      	ldr	r2, [pc, #420]	@ (8004114 <I2C_Slave_STOPF+0x258>)
 8003f70:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fd ffe0 	bl	8001f3c <HAL_DMA_Abort_IT>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d03d      	beq.n	8003ffe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f90:	e035      	b.n	8003ffe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	f043 0204 	orr.w	r2, r3, #4
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fc4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe f962 	bl	8002294 <HAL_DMA_GetState>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d014      	beq.n	8004000 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fda:	4a4e      	ldr	r2, [pc, #312]	@ (8004114 <I2C_Slave_STOPF+0x258>)
 8003fdc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fd ffaa 	bl	8001f3c <HAL_DMA_Abort_IT>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4798      	blx	r3
 8003ffc:	e000      	b.n	8004000 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ffe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d03e      	beq.n	8004088 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b04      	cmp	r3, #4
 8004016:	d112      	bne.n	800403e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004048:	2b40      	cmp	r3, #64	@ 0x40
 800404a:	d112      	bne.n	8004072 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691a      	ldr	r2, [r3, #16]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004080:	f043 0204 	orr.w	r2, r3, #4
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f8b7 	bl	8004204 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004096:	e039      	b.n	800410c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b2a      	cmp	r3, #42	@ 0x2a
 800409c:	d109      	bne.n	80040b2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2228      	movs	r2, #40	@ 0x28
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff f80d 	bl	80030cc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b28      	cmp	r3, #40	@ 0x28
 80040bc:	d111      	bne.n	80040e2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a15      	ldr	r2, [pc, #84]	@ (8004118 <I2C_Slave_STOPF+0x25c>)
 80040c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff f80e 	bl	80030fc <HAL_I2C_ListenCpltCallback>
}
 80040e0:	e014      	b.n	800410c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e6:	2b22      	cmp	r3, #34	@ 0x22
 80040e8:	d002      	beq.n	80040f0 <I2C_Slave_STOPF+0x234>
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	2b22      	cmp	r3, #34	@ 0x22
 80040ee:	d10d      	bne.n	800410c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fe ffe0 	bl	80030cc <HAL_I2C_SlaveRxCpltCallback>
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	0800456d 	.word	0x0800456d
 8004118:	ffff0000 	.word	0xffff0000

0800411c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800412a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004130:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b08      	cmp	r3, #8
 8004136:	d002      	beq.n	800413e <I2C_Slave_AF+0x22>
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b20      	cmp	r3, #32
 800413c:	d129      	bne.n	8004192 <I2C_Slave_AF+0x76>
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	2b28      	cmp	r3, #40	@ 0x28
 8004142:	d126      	bne.n	8004192 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a2e      	ldr	r2, [pc, #184]	@ (8004200 <I2C_Slave_AF+0xe4>)
 8004148:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004158:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004162:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004172:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fe ffb6 	bl	80030fc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004190:	e031      	b.n	80041f6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	2b21      	cmp	r3, #33	@ 0x21
 8004196:	d129      	bne.n	80041ec <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a19      	ldr	r2, [pc, #100]	@ (8004200 <I2C_Slave_AF+0xe4>)
 800419c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2221      	movs	r2, #33	@ 0x21
 80041a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041c2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041cc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041dc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7fe fc50 	bl	8002a84 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7fe ff67 	bl	80030b8 <HAL_I2C_SlaveTxCpltCallback>
}
 80041ea:	e004      	b.n	80041f6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041f4:	615a      	str	r2, [r3, #20]
}
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	ffff0000 	.word	0xffff0000

08004204 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004212:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800421a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800421c:	7bbb      	ldrb	r3, [r7, #14]
 800421e:	2b10      	cmp	r3, #16
 8004220:	d002      	beq.n	8004228 <I2C_ITError+0x24>
 8004222:	7bbb      	ldrb	r3, [r7, #14]
 8004224:	2b40      	cmp	r3, #64	@ 0x40
 8004226:	d10a      	bne.n	800423e <I2C_ITError+0x3a>
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	2b22      	cmp	r3, #34	@ 0x22
 800422c:	d107      	bne.n	800423e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800423c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004244:	2b28      	cmp	r3, #40	@ 0x28
 8004246:	d107      	bne.n	8004258 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2228      	movs	r2, #40	@ 0x28
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004256:	e015      	b.n	8004284 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004262:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004266:	d00a      	beq.n	800427e <I2C_ITError+0x7a>
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	2b60      	cmp	r3, #96	@ 0x60
 800426c:	d007      	beq.n	800427e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800428e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004292:	d162      	bne.n	800435a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042a2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d020      	beq.n	80042f4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b6:	4a6a      	ldr	r2, [pc, #424]	@ (8004460 <I2C_ITError+0x25c>)
 80042b8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fd fe3c 	bl	8001f3c <HAL_DMA_Abort_IT>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 8089 	beq.w	80043de <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80042ee:	4610      	mov	r0, r2
 80042f0:	4798      	blx	r3
 80042f2:	e074      	b.n	80043de <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f8:	4a59      	ldr	r2, [pc, #356]	@ (8004460 <I2C_ITError+0x25c>)
 80042fa:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004300:	4618      	mov	r0, r3
 8004302:	f7fd fe1b 	bl	8001f3c <HAL_DMA_Abort_IT>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d068      	beq.n	80043de <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004316:	2b40      	cmp	r3, #64	@ 0x40
 8004318:	d10b      	bne.n	8004332 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0201 	bic.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004354:	4610      	mov	r0, r2
 8004356:	4798      	blx	r3
 8004358:	e041      	b.n	80043de <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b60      	cmp	r3, #96	@ 0x60
 8004364:	d125      	bne.n	80043b2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800437e:	2b40      	cmp	r3, #64	@ 0x40
 8004380:	d10b      	bne.n	800439a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0201 	bic.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fe fece 	bl	800314c <HAL_I2C_AbortCpltCallback>
 80043b0:	e015      	b.n	80043de <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043bc:	2b40      	cmp	r3, #64	@ 0x40
 80043be:	d10b      	bne.n	80043d8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691a      	ldr	r2, [r3, #16]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7fe fead 	bl	8003138 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10e      	bne.n	800440c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d109      	bne.n	800440c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d104      	bne.n	800440c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004408:	2b00      	cmp	r3, #0
 800440a:	d007      	beq.n	800441c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800441a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004422:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b04      	cmp	r3, #4
 800442e:	d113      	bne.n	8004458 <I2C_ITError+0x254>
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	2b28      	cmp	r3, #40	@ 0x28
 8004434:	d110      	bne.n	8004458 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a0a      	ldr	r2, [pc, #40]	@ (8004464 <I2C_ITError+0x260>)
 800443a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fe fe52 	bl	80030fc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004458:	bf00      	nop
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	0800456d 	.word	0x0800456d
 8004464:	ffff0000 	.word	0xffff0000

08004468 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	460b      	mov	r3, r1
 8004476:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d006      	beq.n	8004492 <I2C_MasterRequestWrite+0x2a>
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d003      	beq.n	8004492 <I2C_MasterRequestWrite+0x2a>
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004490:	d108      	bne.n	80044a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	e00b      	b.n	80044bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a8:	2b12      	cmp	r3, #18
 80044aa:	d107      	bne.n	80044bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f8f7 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00d      	beq.n	80044f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044e2:	d103      	bne.n	80044ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e035      	b.n	800455c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044f8:	d108      	bne.n	800450c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044fa:	897b      	ldrh	r3, [r7, #10]
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004508:	611a      	str	r2, [r3, #16]
 800450a:	e01b      	b.n	8004544 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800450c:	897b      	ldrh	r3, [r7, #10]
 800450e:	11db      	asrs	r3, r3, #7
 8004510:	b2db      	uxtb	r3, r3
 8004512:	f003 0306 	and.w	r3, r3, #6
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f063 030f 	orn	r3, r3, #15
 800451c:	b2da      	uxtb	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	490e      	ldr	r1, [pc, #56]	@ (8004564 <I2C_MasterRequestWrite+0xfc>)
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f940 	bl	80047b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e010      	b.n	800455c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800453a:	897b      	ldrh	r3, [r7, #10]
 800453c:	b2da      	uxtb	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	4907      	ldr	r1, [pc, #28]	@ (8004568 <I2C_MasterRequestWrite+0x100>)
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f930 	bl	80047b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	00010008 	.word	0x00010008
 8004568:	00010002 	.word	0x00010002

0800456c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004584:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004586:	4b4b      	ldr	r3, [pc, #300]	@ (80046b4 <I2C_DMAAbort+0x148>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	08db      	lsrs	r3, r3, #3
 800458c:	4a4a      	ldr	r2, [pc, #296]	@ (80046b8 <I2C_DMAAbort+0x14c>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	0a1a      	lsrs	r2, r3, #8
 8004594:	4613      	mov	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	00da      	lsls	r2, r3, #3
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045aa:	f043 0220 	orr.w	r2, r3, #32
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80045b2:	e00a      	b.n	80045ca <I2C_DMAAbort+0x5e>
    }
    count--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045c8:	d0ea      	beq.n	80045a0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d6:	2200      	movs	r2, #0
 80045d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e6:	2200      	movs	r2, #0
 80045e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045f8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2200      	movs	r2, #0
 80045fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800460c:	2200      	movs	r2, #0
 800460e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461c:	2200      	movs	r2, #0
 800461e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0201 	bic.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b60      	cmp	r3, #96	@ 0x60
 800463a:	d10e      	bne.n	800465a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2200      	movs	r2, #0
 8004650:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004652:	6978      	ldr	r0, [r7, #20]
 8004654:	f7fe fd7a 	bl	800314c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004658:	e027      	b.n	80046aa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800465a:	7cfb      	ldrb	r3, [r7, #19]
 800465c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004660:	2b28      	cmp	r3, #40	@ 0x28
 8004662:	d117      	bne.n	8004694 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0201 	orr.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004682:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2200      	movs	r2, #0
 8004688:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2228      	movs	r2, #40	@ 0x28
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004692:	e007      	b.n	80046a4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80046a4:	6978      	ldr	r0, [r7, #20]
 80046a6:	f7fe fd47 	bl	8003138 <HAL_I2C_ErrorCallback>
}
 80046aa:	bf00      	nop
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20000014 	.word	0x20000014
 80046b8:	14f8b589 	.word	0x14f8b589

080046bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	4613      	mov	r3, r2
 80046ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046cc:	e048      	b.n	8004760 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d044      	beq.n	8004760 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d6:	f7fd f9e9 	bl	8001aac <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d302      	bcc.n	80046ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d139      	bne.n	8004760 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	0c1b      	lsrs	r3, r3, #16
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d10d      	bne.n	8004712 <I2C_WaitOnFlagUntilTimeout+0x56>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	43da      	mvns	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	4013      	ands	r3, r2
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	bf0c      	ite	eq
 8004708:	2301      	moveq	r3, #1
 800470a:	2300      	movne	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	e00c      	b.n	800472c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	43da      	mvns	r2, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	4013      	ands	r3, r2
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	bf0c      	ite	eq
 8004724:	2301      	moveq	r3, #1
 8004726:	2300      	movne	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	429a      	cmp	r2, r3
 8004730:	d116      	bne.n	8004760 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	f043 0220 	orr.w	r2, r3, #32
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e023      	b.n	80047a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	0c1b      	lsrs	r3, r3, #16
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b01      	cmp	r3, #1
 8004768:	d10d      	bne.n	8004786 <I2C_WaitOnFlagUntilTimeout+0xca>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	43da      	mvns	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	4013      	ands	r3, r2
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	bf0c      	ite	eq
 800477c:	2301      	moveq	r3, #1
 800477e:	2300      	movne	r3, #0
 8004780:	b2db      	uxtb	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	e00c      	b.n	80047a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	43da      	mvns	r2, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4013      	ands	r3, r2
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d093      	beq.n	80046ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047be:	e071      	b.n	80048a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ce:	d123      	bne.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004804:	f043 0204 	orr.w	r2, r3, #4
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e067      	b.n	80048e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d041      	beq.n	80048a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004820:	f7fd f944 	bl	8001aac <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	429a      	cmp	r2, r3
 800482e:	d302      	bcc.n	8004836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d136      	bne.n	80048a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	0c1b      	lsrs	r3, r3, #16
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	d10c      	bne.n	800485a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	43da      	mvns	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4013      	ands	r3, r2
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	bf14      	ite	ne
 8004852:	2301      	movne	r3, #1
 8004854:	2300      	moveq	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	e00b      	b.n	8004872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	43da      	mvns	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	4013      	ands	r3, r2
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	bf14      	ite	ne
 800486c:	2301      	movne	r3, #1
 800486e:	2300      	moveq	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d016      	beq.n	80048a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004890:	f043 0220 	orr.w	r2, r3, #32
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e021      	b.n	80048e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	0c1b      	lsrs	r3, r3, #16
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d10c      	bne.n	80048c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	43da      	mvns	r2, r3
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	4013      	ands	r3, r2
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	bf14      	ite	ne
 80048c0:	2301      	movne	r3, #1
 80048c2:	2300      	moveq	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	e00b      	b.n	80048e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	43da      	mvns	r2, r3
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4013      	ands	r3, r2
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bf14      	ite	ne
 80048da:	2301      	movne	r3, #1
 80048dc:	2300      	moveq	r3, #0
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f47f af6d 	bne.w	80047c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048fc:	e034      	b.n	8004968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f8b8 	bl	8004a74 <I2C_IsAcknowledgeFailed>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e034      	b.n	8004978 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d028      	beq.n	8004968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004916:	f7fd f8c9 	bl	8001aac <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	429a      	cmp	r2, r3
 8004924:	d302      	bcc.n	800492c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d11d      	bne.n	8004968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004936:	2b80      	cmp	r3, #128	@ 0x80
 8004938:	d016      	beq.n	8004968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004954:	f043 0220 	orr.w	r2, r3, #32
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e007      	b.n	8004978 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004972:	2b80      	cmp	r3, #128	@ 0x80
 8004974:	d1c3      	bne.n	80048fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800498c:	e034      	b.n	80049f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f870 	bl	8004a74 <I2C_IsAcknowledgeFailed>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e034      	b.n	8004a08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a4:	d028      	beq.n	80049f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a6:	f7fd f881 	bl	8001aac <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d302      	bcc.n	80049bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d11d      	bne.n	80049f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d016      	beq.n	80049f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e4:	f043 0220 	orr.w	r2, r3, #32
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e007      	b.n	8004a08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d1c3      	bne.n	800498e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a1c:	4b13      	ldr	r3, [pc, #76]	@ (8004a6c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	08db      	lsrs	r3, r3, #3
 8004a22:	4a13      	ldr	r2, [pc, #76]	@ (8004a70 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004a24:	fba2 2303 	umull	r2, r3, r2, r3
 8004a28:	0a1a      	lsrs	r2, r3, #8
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3b01      	subs	r3, #1
 8004a36:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d107      	bne.n	8004a4e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a42:	f043 0220 	orr.w	r2, r3, #32
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e008      	b.n	8004a60 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a5c:	d0e9      	beq.n	8004a32 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	20000014 	.word	0x20000014
 8004a70:	14f8b589 	.word	0x14f8b589

08004a74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a8a:	d11b      	bne.n	8004ac4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab0:	f043 0204 	orr.w	r2, r3, #4
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ade:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004ae2:	d103      	bne.n	8004aec <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004aea:	e007      	b.n	8004afc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004af4:	d102      	bne.n	8004afc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2208      	movs	r2, #8
 8004afa:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0cc      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b1c:	4b68      	ldr	r3, [pc, #416]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 030f 	and.w	r3, r3, #15
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d90c      	bls.n	8004b44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2a:	4b65      	ldr	r3, [pc, #404]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b32:	4b63      	ldr	r3, [pc, #396]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d001      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0b8      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d020      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b5c:	4b59      	ldr	r3, [pc, #356]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	4a58      	ldr	r2, [pc, #352]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b74:	4b53      	ldr	r3, [pc, #332]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	4a52      	ldr	r2, [pc, #328]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b80:	4b50      	ldr	r3, [pc, #320]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	494d      	ldr	r1, [pc, #308]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d044      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d107      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba6:	4b47      	ldr	r3, [pc, #284]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d119      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e07f      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d003      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d107      	bne.n	8004bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d109      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e06f      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e067      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004be6:	4b37      	ldr	r3, [pc, #220]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f023 0203 	bic.w	r2, r3, #3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	4934      	ldr	r1, [pc, #208]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bf8:	f7fc ff58 	bl	8001aac <HAL_GetTick>
 8004bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfe:	e00a      	b.n	8004c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c00:	f7fc ff54 	bl	8001aac <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e04f      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c16:	4b2b      	ldr	r3, [pc, #172]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 020c 	and.w	r2, r3, #12
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d1eb      	bne.n	8004c00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c28:	4b25      	ldr	r3, [pc, #148]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d20c      	bcs.n	8004c50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c36:	4b22      	ldr	r3, [pc, #136]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3e:	4b20      	ldr	r3, [pc, #128]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d001      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e032      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d008      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c5c:	4b19      	ldr	r3, [pc, #100]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	4916      	ldr	r1, [pc, #88]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d009      	beq.n	8004c8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c7a:	4b12      	ldr	r3, [pc, #72]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	490e      	ldr	r1, [pc, #56]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c8e:	f000 f841 	bl	8004d14 <HAL_RCC_GetSysClockFreq>
 8004c92:	4602      	mov	r2, r0
 8004c94:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	091b      	lsrs	r3, r3, #4
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	490a      	ldr	r1, [pc, #40]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004ca0:	5ccb      	ldrb	r3, [r1, r3]
 8004ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca6:	4a09      	ldr	r2, [pc, #36]	@ (8004ccc <HAL_RCC_ClockConfig+0x1c4>)
 8004ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004caa:	4b09      	ldr	r3, [pc, #36]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fc feb8 	bl	8001a24 <HAL_InitTick>

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40023c00 	.word	0x40023c00
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	080065fc 	.word	0x080065fc
 8004ccc:	20000014 	.word	0x20000014
 8004cd0:	20000018 	.word	0x20000018

08004cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd8:	4b03      	ldr	r3, [pc, #12]	@ (8004ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cda:	681b      	ldr	r3, [r3, #0]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	20000014 	.word	0x20000014

08004cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cf0:	f7ff fff0 	bl	8004cd4 <HAL_RCC_GetHCLKFreq>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	4b05      	ldr	r3, [pc, #20]	@ (8004d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	0a9b      	lsrs	r3, r3, #10
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	4903      	ldr	r1, [pc, #12]	@ (8004d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d02:	5ccb      	ldrb	r3, [r1, r3]
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	0800660c 	.word	0x0800660c

08004d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d18:	b0a6      	sub	sp, #152	@ 0x98
 8004d1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d3a:	4bc8      	ldr	r3, [pc, #800]	@ (800505c <HAL_RCC_GetSysClockFreq+0x348>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
 8004d42:	2b0c      	cmp	r3, #12
 8004d44:	f200 817e 	bhi.w	8005044 <HAL_RCC_GetSysClockFreq+0x330>
 8004d48:	a201      	add	r2, pc, #4	@ (adr r2, 8004d50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4e:	bf00      	nop
 8004d50:	08004d85 	.word	0x08004d85
 8004d54:	08005045 	.word	0x08005045
 8004d58:	08005045 	.word	0x08005045
 8004d5c:	08005045 	.word	0x08005045
 8004d60:	08004d8d 	.word	0x08004d8d
 8004d64:	08005045 	.word	0x08005045
 8004d68:	08005045 	.word	0x08005045
 8004d6c:	08005045 	.word	0x08005045
 8004d70:	08004d95 	.word	0x08004d95
 8004d74:	08005045 	.word	0x08005045
 8004d78:	08005045 	.word	0x08005045
 8004d7c:	08005045 	.word	0x08005045
 8004d80:	08004eff 	.word	0x08004eff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d84:	4bb6      	ldr	r3, [pc, #728]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004d86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004d8a:	e15f      	b.n	800504c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d8c:	4bb5      	ldr	r3, [pc, #724]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x350>)
 8004d8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004d92:	e15b      	b.n	800504c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d94:	4bb1      	ldr	r3, [pc, #708]	@ (800505c <HAL_RCC_GetSysClockFreq+0x348>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004da0:	4bae      	ldr	r3, [pc, #696]	@ (800505c <HAL_RCC_GetSysClockFreq+0x348>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d031      	beq.n	8004e10 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dac:	4bab      	ldr	r3, [pc, #684]	@ (800505c <HAL_RCC_GetSysClockFreq+0x348>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	099b      	lsrs	r3, r3, #6
 8004db2:	2200      	movs	r2, #0
 8004db4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004db6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004db8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dc4:	4ba7      	ldr	r3, [pc, #668]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x350>)
 8004dc6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004dca:	462a      	mov	r2, r5
 8004dcc:	fb03 f202 	mul.w	r2, r3, r2
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	fb01 f303 	mul.w	r3, r1, r3
 8004dd8:	4413      	add	r3, r2
 8004dda:	4aa2      	ldr	r2, [pc, #648]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x350>)
 8004ddc:	4621      	mov	r1, r4
 8004dde:	fba1 1202 	umull	r1, r2, r1, r2
 8004de2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004de4:	460a      	mov	r2, r1
 8004de6:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004de8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004dea:	4413      	add	r3, r2
 8004dec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004dee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004df2:	2200      	movs	r2, #0
 8004df4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004df6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004df8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004dfc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004e00:	f7fb fa00 	bl	8000204 <__aeabi_uldivmod>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4613      	mov	r3, r2
 8004e0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e0e:	e064      	b.n	8004eda <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e10:	4b92      	ldr	r3, [pc, #584]	@ (800505c <HAL_RCC_GetSysClockFreq+0x348>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	099b      	lsrs	r3, r3, #6
 8004e16:	2200      	movs	r2, #0
 8004e18:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e1a:	657a      	str	r2, [r7, #84]	@ 0x54
 8004e1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e24:	2300      	movs	r3, #0
 8004e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e28:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	462b      	mov	r3, r5
 8004e30:	f04f 0000 	mov.w	r0, #0
 8004e34:	f04f 0100 	mov.w	r1, #0
 8004e38:	0159      	lsls	r1, r3, #5
 8004e3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e3e:	0150      	lsls	r0, r2, #5
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	4621      	mov	r1, r4
 8004e46:	1a51      	subs	r1, r2, r1
 8004e48:	6139      	str	r1, [r7, #16]
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	eb63 0301 	sbc.w	r3, r3, r1
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e5e:	4659      	mov	r1, fp
 8004e60:	018b      	lsls	r3, r1, #6
 8004e62:	4651      	mov	r1, sl
 8004e64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e68:	4651      	mov	r1, sl
 8004e6a:	018a      	lsls	r2, r1, #6
 8004e6c:	4651      	mov	r1, sl
 8004e6e:	ebb2 0801 	subs.w	r8, r2, r1
 8004e72:	4659      	mov	r1, fp
 8004e74:	eb63 0901 	sbc.w	r9, r3, r1
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e8c:	4690      	mov	r8, r2
 8004e8e:	4699      	mov	r9, r3
 8004e90:	4623      	mov	r3, r4
 8004e92:	eb18 0303 	adds.w	r3, r8, r3
 8004e96:	60bb      	str	r3, [r7, #8]
 8004e98:	462b      	mov	r3, r5
 8004e9a:	eb49 0303 	adc.w	r3, r9, r3
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004eac:	4629      	mov	r1, r5
 8004eae:	028b      	lsls	r3, r1, #10
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	028a      	lsls	r2, r1, #10
 8004eba:	4610      	mov	r0, r2
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ec6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ec8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ecc:	f7fb f99a 	bl	8000204 <__aeabi_uldivmod>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004eda:	4b60      	ldr	r3, [pc, #384]	@ (800505c <HAL_RCC_GetSysClockFreq+0x348>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	0c1b      	lsrs	r3, r3, #16
 8004ee0:	f003 0303 	and.w	r3, r3, #3
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004eec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004efc:	e0a6      	b.n	800504c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004efe:	4b57      	ldr	r3, [pc, #348]	@ (800505c <HAL_RCC_GetSysClockFreq+0x348>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f0a:	4b54      	ldr	r3, [pc, #336]	@ (800505c <HAL_RCC_GetSysClockFreq+0x348>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d02a      	beq.n	8004f6c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f16:	4b51      	ldr	r3, [pc, #324]	@ (800505c <HAL_RCC_GetSysClockFreq+0x348>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	099b      	lsrs	r3, r3, #6
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f20:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4b4e      	ldr	r3, [pc, #312]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x350>)
 8004f2c:	fb03 f201 	mul.w	r2, r3, r1
 8004f30:	2300      	movs	r3, #0
 8004f32:	fb00 f303 	mul.w	r3, r0, r3
 8004f36:	4413      	add	r3, r2
 8004f38:	4a4a      	ldr	r2, [pc, #296]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x350>)
 8004f3a:	fba0 1202 	umull	r1, r2, r0, r2
 8004f3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f40:	460a      	mov	r2, r1
 8004f42:	673a      	str	r2, [r7, #112]	@ 0x70
 8004f44:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004f46:	4413      	add	r3, r2
 8004f48:	677b      	str	r3, [r7, #116]	@ 0x74
 8004f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f4e:	2200      	movs	r2, #0
 8004f50:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f52:	637a      	str	r2, [r7, #52]	@ 0x34
 8004f54:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004f58:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004f5c:	f7fb f952 	bl	8000204 <__aeabi_uldivmod>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4613      	mov	r3, r2
 8004f66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f6a:	e05b      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f6c:	4b3b      	ldr	r3, [pc, #236]	@ (800505c <HAL_RCC_GetSysClockFreq+0x348>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	099b      	lsrs	r3, r3, #6
 8004f72:	2200      	movs	r2, #0
 8004f74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f7e:	623b      	str	r3, [r7, #32]
 8004f80:	2300      	movs	r3, #0
 8004f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f88:	4642      	mov	r2, r8
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	f04f 0000 	mov.w	r0, #0
 8004f90:	f04f 0100 	mov.w	r1, #0
 8004f94:	0159      	lsls	r1, r3, #5
 8004f96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f9a:	0150      	lsls	r0, r2, #5
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4641      	mov	r1, r8
 8004fa2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fc0:	ebb2 040a 	subs.w	r4, r2, sl
 8004fc4:	eb63 050b 	sbc.w	r5, r3, fp
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	00eb      	lsls	r3, r5, #3
 8004fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fd6:	00e2      	lsls	r2, r4, #3
 8004fd8:	4614      	mov	r4, r2
 8004fda:	461d      	mov	r5, r3
 8004fdc:	4643      	mov	r3, r8
 8004fde:	18e3      	adds	r3, r4, r3
 8004fe0:	603b      	str	r3, [r7, #0]
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	eb45 0303 	adc.w	r3, r5, r3
 8004fe8:	607b      	str	r3, [r7, #4]
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	028b      	lsls	r3, r1, #10
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005000:	4621      	mov	r1, r4
 8005002:	028a      	lsls	r2, r1, #10
 8005004:	4610      	mov	r0, r2
 8005006:	4619      	mov	r1, r3
 8005008:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800500c:	2200      	movs	r2, #0
 800500e:	61bb      	str	r3, [r7, #24]
 8005010:	61fa      	str	r2, [r7, #28]
 8005012:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005016:	f7fb f8f5 	bl	8000204 <__aeabi_uldivmod>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4613      	mov	r3, r2
 8005020:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005024:	4b0d      	ldr	r3, [pc, #52]	@ (800505c <HAL_RCC_GetSysClockFreq+0x348>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	0f1b      	lsrs	r3, r3, #28
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8005032:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005036:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800503a:	fbb2 f3f3 	udiv	r3, r2, r3
 800503e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005042:	e003      	b.n	800504c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005044:	4b06      	ldr	r3, [pc, #24]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005046:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800504a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800504c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8005050:	4618      	mov	r0, r3
 8005052:	3798      	adds	r7, #152	@ 0x98
 8005054:	46bd      	mov	sp, r7
 8005056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800505a:	bf00      	nop
 800505c:	40023800 	.word	0x40023800
 8005060:	00f42400 	.word	0x00f42400
 8005064:	017d7840 	.word	0x017d7840

08005068 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e28d      	b.n	8005596 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 8083 	beq.w	800518e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005088:	4b94      	ldr	r3, [pc, #592]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 030c 	and.w	r3, r3, #12
 8005090:	2b04      	cmp	r3, #4
 8005092:	d019      	beq.n	80050c8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005094:	4b91      	ldr	r3, [pc, #580]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 030c 	and.w	r3, r3, #12
        || \
 800509c:	2b08      	cmp	r3, #8
 800509e:	d106      	bne.n	80050ae <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80050a0:	4b8e      	ldr	r3, [pc, #568]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050ac:	d00c      	beq.n	80050c8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ae:	4b8b      	ldr	r3, [pc, #556]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80050b6:	2b0c      	cmp	r3, #12
 80050b8:	d112      	bne.n	80050e0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ba:	4b88      	ldr	r3, [pc, #544]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050c6:	d10b      	bne.n	80050e0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c8:	4b84      	ldr	r3, [pc, #528]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d05b      	beq.n	800518c <HAL_RCC_OscConfig+0x124>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d157      	bne.n	800518c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e25a      	b.n	8005596 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050e8:	d106      	bne.n	80050f8 <HAL_RCC_OscConfig+0x90>
 80050ea:	4b7c      	ldr	r3, [pc, #496]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a7b      	ldr	r2, [pc, #492]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 80050f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	e01d      	b.n	8005134 <HAL_RCC_OscConfig+0xcc>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005100:	d10c      	bne.n	800511c <HAL_RCC_OscConfig+0xb4>
 8005102:	4b76      	ldr	r3, [pc, #472]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a75      	ldr	r2, [pc, #468]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 8005108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	4b73      	ldr	r3, [pc, #460]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a72      	ldr	r2, [pc, #456]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 8005114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	e00b      	b.n	8005134 <HAL_RCC_OscConfig+0xcc>
 800511c:	4b6f      	ldr	r3, [pc, #444]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a6e      	ldr	r2, [pc, #440]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 8005122:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	4b6c      	ldr	r3, [pc, #432]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a6b      	ldr	r2, [pc, #428]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 800512e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d013      	beq.n	8005164 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513c:	f7fc fcb6 	bl	8001aac <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005144:	f7fc fcb2 	bl	8001aac <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b64      	cmp	r3, #100	@ 0x64
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e21f      	b.n	8005596 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005156:	4b61      	ldr	r3, [pc, #388]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0f0      	beq.n	8005144 <HAL_RCC_OscConfig+0xdc>
 8005162:	e014      	b.n	800518e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7fc fca2 	bl	8001aac <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800516c:	f7fc fc9e 	bl	8001aac <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b64      	cmp	r3, #100	@ 0x64
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e20b      	b.n	8005596 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800517e:	4b57      	ldr	r3, [pc, #348]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x104>
 800518a:	e000      	b.n	800518e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800518c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d06f      	beq.n	800527a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800519a:	4b50      	ldr	r3, [pc, #320]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 030c 	and.w	r3, r3, #12
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d017      	beq.n	80051d6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80051a6:	4b4d      	ldr	r3, [pc, #308]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 030c 	and.w	r3, r3, #12
        || \
 80051ae:	2b08      	cmp	r3, #8
 80051b0:	d105      	bne.n	80051be <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80051b2:	4b4a      	ldr	r3, [pc, #296]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00b      	beq.n	80051d6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051be:	4b47      	ldr	r3, [pc, #284]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80051c6:	2b0c      	cmp	r3, #12
 80051c8:	d11c      	bne.n	8005204 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ca:	4b44      	ldr	r3, [pc, #272]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d116      	bne.n	8005204 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051d6:	4b41      	ldr	r3, [pc, #260]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d005      	beq.n	80051ee <HAL_RCC_OscConfig+0x186>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d001      	beq.n	80051ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e1d3      	b.n	8005596 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ee:	4b3b      	ldr	r3, [pc, #236]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	4937      	ldr	r1, [pc, #220]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005202:	e03a      	b.n	800527a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d020      	beq.n	800524e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800520c:	4b34      	ldr	r3, [pc, #208]	@ (80052e0 <HAL_RCC_OscConfig+0x278>)
 800520e:	2201      	movs	r2, #1
 8005210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005212:	f7fc fc4b 	bl	8001aac <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800521a:	f7fc fc47 	bl	8001aac <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e1b4      	b.n	8005596 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522c:	4b2b      	ldr	r3, [pc, #172]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0f0      	beq.n	800521a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005238:	4b28      	ldr	r3, [pc, #160]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4925      	ldr	r1, [pc, #148]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 8005248:	4313      	orrs	r3, r2
 800524a:	600b      	str	r3, [r1, #0]
 800524c:	e015      	b.n	800527a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800524e:	4b24      	ldr	r3, [pc, #144]	@ (80052e0 <HAL_RCC_OscConfig+0x278>)
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7fc fc2a 	bl	8001aac <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800525c:	f7fc fc26 	bl	8001aac <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e193      	b.n	8005596 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800526e:	4b1b      	ldr	r3, [pc, #108]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1f0      	bne.n	800525c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d036      	beq.n	80052f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d016      	beq.n	80052bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800528e:	4b15      	ldr	r3, [pc, #84]	@ (80052e4 <HAL_RCC_OscConfig+0x27c>)
 8005290:	2201      	movs	r2, #1
 8005292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005294:	f7fc fc0a 	bl	8001aac <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800529c:	f7fc fc06 	bl	8001aac <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e173      	b.n	8005596 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ae:	4b0b      	ldr	r3, [pc, #44]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 80052b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0f0      	beq.n	800529c <HAL_RCC_OscConfig+0x234>
 80052ba:	e01b      	b.n	80052f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052bc:	4b09      	ldr	r3, [pc, #36]	@ (80052e4 <HAL_RCC_OscConfig+0x27c>)
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c2:	f7fc fbf3 	bl	8001aac <HAL_GetTick>
 80052c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c8:	e00e      	b.n	80052e8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052ca:	f7fc fbef 	bl	8001aac <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d907      	bls.n	80052e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e15c      	b.n	8005596 <HAL_RCC_OscConfig+0x52e>
 80052dc:	40023800 	.word	0x40023800
 80052e0:	42470000 	.word	0x42470000
 80052e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e8:	4b8a      	ldr	r3, [pc, #552]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 80052ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1ea      	bne.n	80052ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 8097 	beq.w	8005430 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005302:	2300      	movs	r3, #0
 8005304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005306:	4b83      	ldr	r3, [pc, #524]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10f      	bne.n	8005332 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005312:	2300      	movs	r3, #0
 8005314:	60bb      	str	r3, [r7, #8]
 8005316:	4b7f      	ldr	r3, [pc, #508]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531a:	4a7e      	ldr	r2, [pc, #504]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 800531c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005320:	6413      	str	r3, [r2, #64]	@ 0x40
 8005322:	4b7c      	ldr	r3, [pc, #496]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800532a:	60bb      	str	r3, [r7, #8]
 800532c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800532e:	2301      	movs	r3, #1
 8005330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005332:	4b79      	ldr	r3, [pc, #484]	@ (8005518 <HAL_RCC_OscConfig+0x4b0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800533a:	2b00      	cmp	r3, #0
 800533c:	d118      	bne.n	8005370 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800533e:	4b76      	ldr	r3, [pc, #472]	@ (8005518 <HAL_RCC_OscConfig+0x4b0>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a75      	ldr	r2, [pc, #468]	@ (8005518 <HAL_RCC_OscConfig+0x4b0>)
 8005344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800534a:	f7fc fbaf 	bl	8001aac <HAL_GetTick>
 800534e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005352:	f7fc fbab 	bl	8001aac <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e118      	b.n	8005596 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005364:	4b6c      	ldr	r3, [pc, #432]	@ (8005518 <HAL_RCC_OscConfig+0x4b0>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0f0      	beq.n	8005352 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d106      	bne.n	8005386 <HAL_RCC_OscConfig+0x31e>
 8005378:	4b66      	ldr	r3, [pc, #408]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 800537a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800537c:	4a65      	ldr	r2, [pc, #404]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 800537e:	f043 0301 	orr.w	r3, r3, #1
 8005382:	6713      	str	r3, [r2, #112]	@ 0x70
 8005384:	e01c      	b.n	80053c0 <HAL_RCC_OscConfig+0x358>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b05      	cmp	r3, #5
 800538c:	d10c      	bne.n	80053a8 <HAL_RCC_OscConfig+0x340>
 800538e:	4b61      	ldr	r3, [pc, #388]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 8005390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005392:	4a60      	ldr	r2, [pc, #384]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 8005394:	f043 0304 	orr.w	r3, r3, #4
 8005398:	6713      	str	r3, [r2, #112]	@ 0x70
 800539a:	4b5e      	ldr	r3, [pc, #376]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 800539c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800539e:	4a5d      	ldr	r2, [pc, #372]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 80053a0:	f043 0301 	orr.w	r3, r3, #1
 80053a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80053a6:	e00b      	b.n	80053c0 <HAL_RCC_OscConfig+0x358>
 80053a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 80053aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ac:	4a59      	ldr	r2, [pc, #356]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 80053ae:	f023 0301 	bic.w	r3, r3, #1
 80053b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053b4:	4b57      	ldr	r3, [pc, #348]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 80053b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b8:	4a56      	ldr	r2, [pc, #344]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 80053ba:	f023 0304 	bic.w	r3, r3, #4
 80053be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d015      	beq.n	80053f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c8:	f7fc fb70 	bl	8001aac <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ce:	e00a      	b.n	80053e6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d0:	f7fc fb6c 	bl	8001aac <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053de:	4293      	cmp	r3, r2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e0d7      	b.n	8005596 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e6:	4b4b      	ldr	r3, [pc, #300]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 80053e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0ee      	beq.n	80053d0 <HAL_RCC_OscConfig+0x368>
 80053f2:	e014      	b.n	800541e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f4:	f7fc fb5a 	bl	8001aac <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053fa:	e00a      	b.n	8005412 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fc:	f7fc fb56 	bl	8001aac <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800540a:	4293      	cmp	r3, r2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e0c1      	b.n	8005596 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005412:	4b40      	ldr	r3, [pc, #256]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 8005414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1ee      	bne.n	80053fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800541e:	7dfb      	ldrb	r3, [r7, #23]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d105      	bne.n	8005430 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005424:	4b3b      	ldr	r3, [pc, #236]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 8005426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005428:	4a3a      	ldr	r2, [pc, #232]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 800542a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800542e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 80ad 	beq.w	8005594 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800543a:	4b36      	ldr	r3, [pc, #216]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 030c 	and.w	r3, r3, #12
 8005442:	2b08      	cmp	r3, #8
 8005444:	d060      	beq.n	8005508 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d145      	bne.n	80054da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544e:	4b33      	ldr	r3, [pc, #204]	@ (800551c <HAL_RCC_OscConfig+0x4b4>)
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fc fb2a 	bl	8001aac <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545c:	f7fc fb26 	bl	8001aac <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e093      	b.n	8005596 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546e:	4b29      	ldr	r3, [pc, #164]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69da      	ldr	r2, [r3, #28]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005488:	019b      	lsls	r3, r3, #6
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005490:	085b      	lsrs	r3, r3, #1
 8005492:	3b01      	subs	r3, #1
 8005494:	041b      	lsls	r3, r3, #16
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549c:	061b      	lsls	r3, r3, #24
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a4:	071b      	lsls	r3, r3, #28
 80054a6:	491b      	ldr	r1, [pc, #108]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054ac:	4b1b      	ldr	r3, [pc, #108]	@ (800551c <HAL_RCC_OscConfig+0x4b4>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b2:	f7fc fafb 	bl	8001aac <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ba:	f7fc faf7 	bl	8001aac <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e064      	b.n	8005596 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054cc:	4b11      	ldr	r3, [pc, #68]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0f0      	beq.n	80054ba <HAL_RCC_OscConfig+0x452>
 80054d8:	e05c      	b.n	8005594 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054da:	4b10      	ldr	r3, [pc, #64]	@ (800551c <HAL_RCC_OscConfig+0x4b4>)
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e0:	f7fc fae4 	bl	8001aac <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e8:	f7fc fae0 	bl	8001aac <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e04d      	b.n	8005596 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054fa:	4b06      	ldr	r3, [pc, #24]	@ (8005514 <HAL_RCC_OscConfig+0x4ac>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1f0      	bne.n	80054e8 <HAL_RCC_OscConfig+0x480>
 8005506:	e045      	b.n	8005594 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d107      	bne.n	8005520 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e040      	b.n	8005596 <HAL_RCC_OscConfig+0x52e>
 8005514:	40023800 	.word	0x40023800
 8005518:	40007000 	.word	0x40007000
 800551c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005520:	4b1f      	ldr	r3, [pc, #124]	@ (80055a0 <HAL_RCC_OscConfig+0x538>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d030      	beq.n	8005590 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005538:	429a      	cmp	r2, r3
 800553a:	d129      	bne.n	8005590 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005546:	429a      	cmp	r2, r3
 8005548:	d122      	bne.n	8005590 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005550:	4013      	ands	r3, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005556:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005558:	4293      	cmp	r3, r2
 800555a:	d119      	bne.n	8005590 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005566:	085b      	lsrs	r3, r3, #1
 8005568:	3b01      	subs	r3, #1
 800556a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800556c:	429a      	cmp	r2, r3
 800556e:	d10f      	bne.n	8005590 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800557c:	429a      	cmp	r2, r3
 800557e:	d107      	bne.n	8005590 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800558c:	429a      	cmp	r2, r3
 800558e:	d001      	beq.n	8005594 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	40023800 	.word	0x40023800

080055a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e041      	b.n	800563a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d106      	bne.n	80055d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fc f8a6 	bl	800171c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3304      	adds	r3, #4
 80055e0:	4619      	mov	r1, r3
 80055e2:	4610      	mov	r0, r2
 80055e4:	f000 fcc0 	bl	8005f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d109      	bne.n	8005670 <HAL_TIM_PWM_Start_DMA+0x2c>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	bf0c      	ite	eq
 8005668:	2301      	moveq	r3, #1
 800566a:	2300      	movne	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	e022      	b.n	80056b6 <HAL_TIM_PWM_Start_DMA+0x72>
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b04      	cmp	r3, #4
 8005674:	d109      	bne.n	800568a <HAL_TIM_PWM_Start_DMA+0x46>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	bf0c      	ite	eq
 8005682:	2301      	moveq	r3, #1
 8005684:	2300      	movne	r3, #0
 8005686:	b2db      	uxtb	r3, r3
 8005688:	e015      	b.n	80056b6 <HAL_TIM_PWM_Start_DMA+0x72>
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b08      	cmp	r3, #8
 800568e:	d109      	bne.n	80056a4 <HAL_TIM_PWM_Start_DMA+0x60>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	bf0c      	ite	eq
 800569c:	2301      	moveq	r3, #1
 800569e:	2300      	movne	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	e008      	b.n	80056b6 <HAL_TIM_PWM_Start_DMA+0x72>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	bf0c      	ite	eq
 80056b0:	2301      	moveq	r3, #1
 80056b2:	2300      	movne	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80056ba:	2302      	movs	r3, #2
 80056bc:	e171      	b.n	80059a2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d109      	bne.n	80056d8 <HAL_TIM_PWM_Start_DMA+0x94>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	bf0c      	ite	eq
 80056d0:	2301      	moveq	r3, #1
 80056d2:	2300      	movne	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	e022      	b.n	800571e <HAL_TIM_PWM_Start_DMA+0xda>
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d109      	bne.n	80056f2 <HAL_TIM_PWM_Start_DMA+0xae>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	bf0c      	ite	eq
 80056ea:	2301      	moveq	r3, #1
 80056ec:	2300      	movne	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	e015      	b.n	800571e <HAL_TIM_PWM_Start_DMA+0xda>
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d109      	bne.n	800570c <HAL_TIM_PWM_Start_DMA+0xc8>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	bf0c      	ite	eq
 8005704:	2301      	moveq	r3, #1
 8005706:	2300      	movne	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	e008      	b.n	800571e <HAL_TIM_PWM_Start_DMA+0xda>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b01      	cmp	r3, #1
 8005716:	bf0c      	ite	eq
 8005718:	2301      	moveq	r3, #1
 800571a:	2300      	movne	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d024      	beq.n	800576c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_TIM_PWM_Start_DMA+0xea>
 8005728:	887b      	ldrh	r3, [r7, #2]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e137      	b.n	80059a2 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d104      	bne.n	8005742 <HAL_TIM_PWM_Start_DMA+0xfe>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005740:	e016      	b.n	8005770 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b04      	cmp	r3, #4
 8005746:	d104      	bne.n	8005752 <HAL_TIM_PWM_Start_DMA+0x10e>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005750:	e00e      	b.n	8005770 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b08      	cmp	r3, #8
 8005756:	d104      	bne.n	8005762 <HAL_TIM_PWM_Start_DMA+0x11e>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005760:	e006      	b.n	8005770 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2202      	movs	r2, #2
 8005766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800576a:	e001      	b.n	8005770 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e118      	b.n	80059a2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b0c      	cmp	r3, #12
 8005774:	f200 80ae 	bhi.w	80058d4 <HAL_TIM_PWM_Start_DMA+0x290>
 8005778:	a201      	add	r2, pc, #4	@ (adr r2, 8005780 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	080057b5 	.word	0x080057b5
 8005784:	080058d5 	.word	0x080058d5
 8005788:	080058d5 	.word	0x080058d5
 800578c:	080058d5 	.word	0x080058d5
 8005790:	080057fd 	.word	0x080057fd
 8005794:	080058d5 	.word	0x080058d5
 8005798:	080058d5 	.word	0x080058d5
 800579c:	080058d5 	.word	0x080058d5
 80057a0:	08005845 	.word	0x08005845
 80057a4:	080058d5 	.word	0x080058d5
 80057a8:	080058d5 	.word	0x080058d5
 80057ac:	080058d5 	.word	0x080058d5
 80057b0:	0800588d 	.word	0x0800588d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b8:	4a7c      	ldr	r2, [pc, #496]	@ (80059ac <HAL_TIM_PWM_Start_DMA+0x368>)
 80057ba:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c0:	4a7b      	ldr	r2, [pc, #492]	@ (80059b0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80057c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c8:	4a7a      	ldr	r2, [pc, #488]	@ (80059b4 <HAL_TIM_PWM_Start_DMA+0x370>)
 80057ca:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3334      	adds	r3, #52	@ 0x34
 80057d8:	461a      	mov	r2, r3
 80057da:	887b      	ldrh	r3, [r7, #2]
 80057dc:	f7fc fb56 	bl	8001e8c <HAL_DMA_Start_IT>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e0db      	b.n	80059a2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057f8:	60da      	str	r2, [r3, #12]
      break;
 80057fa:	e06e      	b.n	80058da <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005800:	4a6a      	ldr	r2, [pc, #424]	@ (80059ac <HAL_TIM_PWM_Start_DMA+0x368>)
 8005802:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005808:	4a69      	ldr	r2, [pc, #420]	@ (80059b0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800580a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005810:	4a68      	ldr	r2, [pc, #416]	@ (80059b4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005812:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3338      	adds	r3, #56	@ 0x38
 8005820:	461a      	mov	r2, r3
 8005822:	887b      	ldrh	r3, [r7, #2]
 8005824:	f7fc fb32 	bl	8001e8c <HAL_DMA_Start_IT>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e0b7      	b.n	80059a2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005840:	60da      	str	r2, [r3, #12]
      break;
 8005842:	e04a      	b.n	80058da <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005848:	4a58      	ldr	r2, [pc, #352]	@ (80059ac <HAL_TIM_PWM_Start_DMA+0x368>)
 800584a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005850:	4a57      	ldr	r2, [pc, #348]	@ (80059b0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005852:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005858:	4a56      	ldr	r2, [pc, #344]	@ (80059b4 <HAL_TIM_PWM_Start_DMA+0x370>)
 800585a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	333c      	adds	r3, #60	@ 0x3c
 8005868:	461a      	mov	r2, r3
 800586a:	887b      	ldrh	r3, [r7, #2]
 800586c:	f7fc fb0e 	bl	8001e8c <HAL_DMA_Start_IT>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e093      	b.n	80059a2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005888:	60da      	str	r2, [r3, #12]
      break;
 800588a:	e026      	b.n	80058da <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005890:	4a46      	ldr	r2, [pc, #280]	@ (80059ac <HAL_TIM_PWM_Start_DMA+0x368>)
 8005892:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005898:	4a45      	ldr	r2, [pc, #276]	@ (80059b0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800589a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a0:	4a44      	ldr	r2, [pc, #272]	@ (80059b4 <HAL_TIM_PWM_Start_DMA+0x370>)
 80058a2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3340      	adds	r3, #64	@ 0x40
 80058b0:	461a      	mov	r2, r3
 80058b2:	887b      	ldrh	r3, [r7, #2]
 80058b4:	f7fc faea 	bl	8001e8c <HAL_DMA_Start_IT>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e06f      	b.n	80059a2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058d0:	60da      	str	r2, [r3, #12]
      break;
 80058d2:	e002      	b.n	80058da <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	75fb      	strb	r3, [r7, #23]
      break;
 80058d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80058da:	7dfb      	ldrb	r3, [r7, #23]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d15f      	bne.n	80059a0 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2201      	movs	r2, #1
 80058e6:	68b9      	ldr	r1, [r7, #8]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fd99 	bl	8006420 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a31      	ldr	r2, [pc, #196]	@ (80059b8 <HAL_TIM_PWM_Start_DMA+0x374>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d004      	beq.n	8005902 <HAL_TIM_PWM_Start_DMA+0x2be>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a2f      	ldr	r2, [pc, #188]	@ (80059bc <HAL_TIM_PWM_Start_DMA+0x378>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d101      	bne.n	8005906 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8005906:	2300      	movs	r3, #0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d007      	beq.n	800591c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800591a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a25      	ldr	r2, [pc, #148]	@ (80059b8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d022      	beq.n	800596c <HAL_TIM_PWM_Start_DMA+0x328>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800592e:	d01d      	beq.n	800596c <HAL_TIM_PWM_Start_DMA+0x328>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a22      	ldr	r2, [pc, #136]	@ (80059c0 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d018      	beq.n	800596c <HAL_TIM_PWM_Start_DMA+0x328>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a21      	ldr	r2, [pc, #132]	@ (80059c4 <HAL_TIM_PWM_Start_DMA+0x380>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d013      	beq.n	800596c <HAL_TIM_PWM_Start_DMA+0x328>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1f      	ldr	r2, [pc, #124]	@ (80059c8 <HAL_TIM_PWM_Start_DMA+0x384>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00e      	beq.n	800596c <HAL_TIM_PWM_Start_DMA+0x328>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1a      	ldr	r2, [pc, #104]	@ (80059bc <HAL_TIM_PWM_Start_DMA+0x378>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d009      	beq.n	800596c <HAL_TIM_PWM_Start_DMA+0x328>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a1b      	ldr	r2, [pc, #108]	@ (80059cc <HAL_TIM_PWM_Start_DMA+0x388>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d004      	beq.n	800596c <HAL_TIM_PWM_Start_DMA+0x328>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a1a      	ldr	r2, [pc, #104]	@ (80059d0 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d111      	bne.n	8005990 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	2b06      	cmp	r3, #6
 800597c:	d010      	beq.n	80059a0 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0201 	orr.w	r2, r2, #1
 800598c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598e:	e007      	b.n	80059a0 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0201 	orr.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80059a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	08005e57 	.word	0x08005e57
 80059b0:	08005eff 	.word	0x08005eff
 80059b4:	08005dc5 	.word	0x08005dc5
 80059b8:	40010000 	.word	0x40010000
 80059bc:	40010400 	.word	0x40010400
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40000800 	.word	0x40000800
 80059c8:	40000c00 	.word	0x40000c00
 80059cc:	40014000 	.word	0x40014000
 80059d0:	40001800 	.word	0x40001800

080059d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d020      	beq.n	8005a38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01b      	beq.n	8005a38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0202 	mvn.w	r2, #2
 8005a08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f99e 	bl	8005d60 <HAL_TIM_IC_CaptureCallback>
 8005a24:	e005      	b.n	8005a32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f990 	bl	8005d4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f9a1 	bl	8005d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d020      	beq.n	8005a84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01b      	beq.n	8005a84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0204 	mvn.w	r2, #4
 8005a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f978 	bl	8005d60 <HAL_TIM_IC_CaptureCallback>
 8005a70:	e005      	b.n	8005a7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f96a 	bl	8005d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f97b 	bl	8005d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f003 0308 	and.w	r3, r3, #8
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d020      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01b      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0208 	mvn.w	r2, #8
 8005aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2204      	movs	r2, #4
 8005aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f952 	bl	8005d60 <HAL_TIM_IC_CaptureCallback>
 8005abc:	e005      	b.n	8005aca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f944 	bl	8005d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f955 	bl	8005d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f003 0310 	and.w	r3, r3, #16
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d020      	beq.n	8005b1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f003 0310 	and.w	r3, r3, #16
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d01b      	beq.n	8005b1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0210 	mvn.w	r2, #16
 8005aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2208      	movs	r2, #8
 8005af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f92c 	bl	8005d60 <HAL_TIM_IC_CaptureCallback>
 8005b08:	e005      	b.n	8005b16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f91e 	bl	8005d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f92f 	bl	8005d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00c      	beq.n	8005b40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0201 	mvn.w	r2, #1
 8005b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f8fc 	bl	8005d38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00c      	beq.n	8005b64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d007      	beq.n	8005b64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fd0a 	bl	8006578 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00c      	beq.n	8005b88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d007      	beq.n	8005b88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f90a 	bl	8005d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00c      	beq.n	8005bac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d007      	beq.n	8005bac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0220 	mvn.w	r2, #32
 8005ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fcdc 	bl	8006564 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bac:	bf00      	nop
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d101      	bne.n	8005bd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e0ae      	b.n	8005d30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b0c      	cmp	r3, #12
 8005bde:	f200 809f 	bhi.w	8005d20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005be2:	a201      	add	r2, pc, #4	@ (adr r2, 8005be8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005c1d 	.word	0x08005c1d
 8005bec:	08005d21 	.word	0x08005d21
 8005bf0:	08005d21 	.word	0x08005d21
 8005bf4:	08005d21 	.word	0x08005d21
 8005bf8:	08005c5d 	.word	0x08005c5d
 8005bfc:	08005d21 	.word	0x08005d21
 8005c00:	08005d21 	.word	0x08005d21
 8005c04:	08005d21 	.word	0x08005d21
 8005c08:	08005c9f 	.word	0x08005c9f
 8005c0c:	08005d21 	.word	0x08005d21
 8005c10:	08005d21 	.word	0x08005d21
 8005c14:	08005d21 	.word	0x08005d21
 8005c18:	08005cdf 	.word	0x08005cdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fa4c 	bl	80060c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0208 	orr.w	r2, r2, #8
 8005c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0204 	bic.w	r2, r2, #4
 8005c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6999      	ldr	r1, [r3, #24]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	619a      	str	r2, [r3, #24]
      break;
 8005c5a:	e064      	b.n	8005d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fa9c 	bl	80061a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6999      	ldr	r1, [r3, #24]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	021a      	lsls	r2, r3, #8
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	619a      	str	r2, [r3, #24]
      break;
 8005c9c:	e043      	b.n	8005d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 faf1 	bl	800628c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69da      	ldr	r2, [r3, #28]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 0208 	orr.w	r2, r2, #8
 8005cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69da      	ldr	r2, [r3, #28]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0204 	bic.w	r2, r2, #4
 8005cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69d9      	ldr	r1, [r3, #28]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	61da      	str	r2, [r3, #28]
      break;
 8005cdc:	e023      	b.n	8005d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68b9      	ldr	r1, [r7, #8]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 fb45 	bl	8006374 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69da      	ldr	r2, [r3, #28]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69da      	ldr	r2, [r3, #28]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69d9      	ldr	r1, [r3, #28]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	021a      	lsls	r2, r3, #8
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	61da      	str	r2, [r3, #28]
      break;
 8005d1e:	e002      	b.n	8005d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	75fb      	strb	r3, [r7, #23]
      break;
 8005d24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d107      	bne.n	8005dec <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2201      	movs	r2, #1
 8005de0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dea:	e02a      	b.n	8005e42 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d107      	bne.n	8005e06 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e04:	e01d      	b.n	8005e42 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d107      	bne.n	8005e20 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2204      	movs	r2, #4
 8005e14:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e1e:	e010      	b.n	8005e42 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d107      	bne.n	8005e3a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2208      	movs	r2, #8
 8005e2e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e38:	e003      	b.n	8005e42 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f7ff ffb4 	bl	8005db0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	771a      	strb	r2, [r3, #28]
}
 8005e4e:	bf00      	nop
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e62:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d10b      	bne.n	8005e86 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2201      	movs	r2, #1
 8005e72:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d136      	bne.n	8005eea <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e84:	e031      	b.n	8005eea <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d10b      	bne.n	8005ea8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2202      	movs	r2, #2
 8005e94:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d125      	bne.n	8005eea <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ea6:	e020      	b.n	8005eea <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d10b      	bne.n	8005eca <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2204      	movs	r2, #4
 8005eb6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d114      	bne.n	8005eea <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ec8:	e00f      	b.n	8005eea <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d10a      	bne.n	8005eea <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2208      	movs	r2, #8
 8005ed8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d103      	bne.n	8005eea <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f7ff ff42 	bl	8005d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	771a      	strb	r2, [r3, #28]
}
 8005ef6:	bf00      	nop
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d103      	bne.n	8005f1e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	771a      	strb	r2, [r3, #28]
 8005f1c:	e019      	b.n	8005f52 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d103      	bne.n	8005f30 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	771a      	strb	r2, [r3, #28]
 8005f2e:	e010      	b.n	8005f52 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d103      	bne.n	8005f42 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2204      	movs	r2, #4
 8005f3e:	771a      	strb	r2, [r3, #28]
 8005f40:	e007      	b.n	8005f52 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d102      	bne.n	8005f52 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2208      	movs	r2, #8
 8005f50:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7ff ff18 	bl	8005d88 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	771a      	strb	r2, [r3, #28]
}
 8005f5e:	bf00      	nop
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
	...

08005f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a46      	ldr	r2, [pc, #280]	@ (8006094 <TIM_Base_SetConfig+0x12c>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d013      	beq.n	8005fa8 <TIM_Base_SetConfig+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f86:	d00f      	beq.n	8005fa8 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a43      	ldr	r2, [pc, #268]	@ (8006098 <TIM_Base_SetConfig+0x130>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00b      	beq.n	8005fa8 <TIM_Base_SetConfig+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a42      	ldr	r2, [pc, #264]	@ (800609c <TIM_Base_SetConfig+0x134>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d007      	beq.n	8005fa8 <TIM_Base_SetConfig+0x40>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a41      	ldr	r2, [pc, #260]	@ (80060a0 <TIM_Base_SetConfig+0x138>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d003      	beq.n	8005fa8 <TIM_Base_SetConfig+0x40>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a40      	ldr	r2, [pc, #256]	@ (80060a4 <TIM_Base_SetConfig+0x13c>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d108      	bne.n	8005fba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a35      	ldr	r2, [pc, #212]	@ (8006094 <TIM_Base_SetConfig+0x12c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d02b      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc8:	d027      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a32      	ldr	r2, [pc, #200]	@ (8006098 <TIM_Base_SetConfig+0x130>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d023      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a31      	ldr	r2, [pc, #196]	@ (800609c <TIM_Base_SetConfig+0x134>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d01f      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a30      	ldr	r2, [pc, #192]	@ (80060a0 <TIM_Base_SetConfig+0x138>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d01b      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a2f      	ldr	r2, [pc, #188]	@ (80060a4 <TIM_Base_SetConfig+0x13c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d017      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a2e      	ldr	r2, [pc, #184]	@ (80060a8 <TIM_Base_SetConfig+0x140>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d013      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80060ac <TIM_Base_SetConfig+0x144>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00f      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a2c      	ldr	r2, [pc, #176]	@ (80060b0 <TIM_Base_SetConfig+0x148>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00b      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a2b      	ldr	r2, [pc, #172]	@ (80060b4 <TIM_Base_SetConfig+0x14c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d007      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a2a      	ldr	r2, [pc, #168]	@ (80060b8 <TIM_Base_SetConfig+0x150>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d003      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a29      	ldr	r2, [pc, #164]	@ (80060bc <TIM_Base_SetConfig+0x154>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d108      	bne.n	800602c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4313      	orrs	r3, r2
 800602a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a10      	ldr	r2, [pc, #64]	@ (8006094 <TIM_Base_SetConfig+0x12c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d003      	beq.n	8006060 <TIM_Base_SetConfig+0xf8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a12      	ldr	r2, [pc, #72]	@ (80060a4 <TIM_Base_SetConfig+0x13c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d103      	bne.n	8006068 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	691a      	ldr	r2, [r3, #16]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b01      	cmp	r3, #1
 8006078:	d105      	bne.n	8006086 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f023 0201 	bic.w	r2, r3, #1
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	611a      	str	r2, [r3, #16]
  }
}
 8006086:	bf00      	nop
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40010000 	.word	0x40010000
 8006098:	40000400 	.word	0x40000400
 800609c:	40000800 	.word	0x40000800
 80060a0:	40000c00 	.word	0x40000c00
 80060a4:	40010400 	.word	0x40010400
 80060a8:	40014000 	.word	0x40014000
 80060ac:	40014400 	.word	0x40014400
 80060b0:	40014800 	.word	0x40014800
 80060b4:	40001800 	.word	0x40001800
 80060b8:	40001c00 	.word	0x40001c00
 80060bc:	40002000 	.word	0x40002000

080060c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	f023 0201 	bic.w	r2, r3, #1
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0303 	bic.w	r3, r3, #3
 80060f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f023 0302 	bic.w	r3, r3, #2
 8006108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4313      	orrs	r3, r2
 8006112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a20      	ldr	r2, [pc, #128]	@ (8006198 <TIM_OC1_SetConfig+0xd8>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d003      	beq.n	8006124 <TIM_OC1_SetConfig+0x64>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a1f      	ldr	r2, [pc, #124]	@ (800619c <TIM_OC1_SetConfig+0xdc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d10c      	bne.n	800613e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f023 0308 	bic.w	r3, r3, #8
 800612a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f023 0304 	bic.w	r3, r3, #4
 800613c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a15      	ldr	r2, [pc, #84]	@ (8006198 <TIM_OC1_SetConfig+0xd8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d003      	beq.n	800614e <TIM_OC1_SetConfig+0x8e>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a14      	ldr	r2, [pc, #80]	@ (800619c <TIM_OC1_SetConfig+0xdc>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d111      	bne.n	8006172 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800615c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	621a      	str	r2, [r3, #32]
}
 800618c:	bf00      	nop
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	40010000 	.word	0x40010000
 800619c:	40010400 	.word	0x40010400

080061a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	f023 0210 	bic.w	r2, r3, #16
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	021b      	lsls	r3, r3, #8
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f023 0320 	bic.w	r3, r3, #32
 80061ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a22      	ldr	r2, [pc, #136]	@ (8006284 <TIM_OC2_SetConfig+0xe4>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d003      	beq.n	8006208 <TIM_OC2_SetConfig+0x68>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a21      	ldr	r2, [pc, #132]	@ (8006288 <TIM_OC2_SetConfig+0xe8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d10d      	bne.n	8006224 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800620e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006222:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a17      	ldr	r2, [pc, #92]	@ (8006284 <TIM_OC2_SetConfig+0xe4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d003      	beq.n	8006234 <TIM_OC2_SetConfig+0x94>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a16      	ldr	r2, [pc, #88]	@ (8006288 <TIM_OC2_SetConfig+0xe8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d113      	bne.n	800625c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800623a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	621a      	str	r2, [r3, #32]
}
 8006276:	bf00      	nop
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	40010000 	.word	0x40010000
 8006288:	40010400 	.word	0x40010400

0800628c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0303 	bic.w	r3, r3, #3
 80062c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a21      	ldr	r2, [pc, #132]	@ (800636c <TIM_OC3_SetConfig+0xe0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d003      	beq.n	80062f2 <TIM_OC3_SetConfig+0x66>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a20      	ldr	r2, [pc, #128]	@ (8006370 <TIM_OC3_SetConfig+0xe4>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d10d      	bne.n	800630e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	021b      	lsls	r3, r3, #8
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800630c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a16      	ldr	r2, [pc, #88]	@ (800636c <TIM_OC3_SetConfig+0xe0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d003      	beq.n	800631e <TIM_OC3_SetConfig+0x92>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a15      	ldr	r2, [pc, #84]	@ (8006370 <TIM_OC3_SetConfig+0xe4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d113      	bne.n	8006346 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800632c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	4313      	orrs	r3, r2
 8006344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	621a      	str	r2, [r3, #32]
}
 8006360:	bf00      	nop
 8006362:	371c      	adds	r7, #28
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	40010000 	.word	0x40010000
 8006370:	40010400 	.word	0x40010400

08006374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	021b      	lsls	r3, r3, #8
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	031b      	lsls	r3, r3, #12
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a12      	ldr	r2, [pc, #72]	@ (8006418 <TIM_OC4_SetConfig+0xa4>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d003      	beq.n	80063dc <TIM_OC4_SetConfig+0x68>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a11      	ldr	r2, [pc, #68]	@ (800641c <TIM_OC4_SetConfig+0xa8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d109      	bne.n	80063f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	019b      	lsls	r3, r3, #6
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	621a      	str	r2, [r3, #32]
}
 800640a:	bf00      	nop
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40010000 	.word	0x40010000
 800641c:	40010400 	.word	0x40010400

08006420 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f003 031f 	and.w	r3, r3, #31
 8006432:	2201      	movs	r2, #1
 8006434:	fa02 f303 	lsl.w	r3, r2, r3
 8006438:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a1a      	ldr	r2, [r3, #32]
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	43db      	mvns	r3, r3
 8006442:	401a      	ands	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6a1a      	ldr	r2, [r3, #32]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f003 031f 	and.w	r3, r3, #31
 8006452:	6879      	ldr	r1, [r7, #4]
 8006454:	fa01 f303 	lsl.w	r3, r1, r3
 8006458:	431a      	orrs	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	621a      	str	r2, [r3, #32]
}
 800645e:	bf00      	nop
 8006460:	371c      	adds	r7, #28
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800647c:	2b01      	cmp	r3, #1
 800647e:	d101      	bne.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006480:	2302      	movs	r3, #2
 8006482:	e05a      	b.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a21      	ldr	r2, [pc, #132]	@ (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d022      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064d0:	d01d      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1d      	ldr	r2, [pc, #116]	@ (800654c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d018      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d013      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1a      	ldr	r2, [pc, #104]	@ (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00e      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a18      	ldr	r2, [pc, #96]	@ (8006558 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d009      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a17      	ldr	r2, [pc, #92]	@ (800655c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d004      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a15      	ldr	r2, [pc, #84]	@ (8006560 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d10c      	bne.n	8006528 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	4313      	orrs	r3, r2
 800651e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40010000 	.word	0x40010000
 800654c:	40000400 	.word	0x40000400
 8006550:	40000800 	.word	0x40000800
 8006554:	40000c00 	.word	0x40000c00
 8006558:	40010400 	.word	0x40010400
 800655c:	40014000 	.word	0x40014000
 8006560:	40001800 	.word	0x40001800

08006564 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <memset>:
 800658c:	4402      	add	r2, r0
 800658e:	4603      	mov	r3, r0
 8006590:	4293      	cmp	r3, r2
 8006592:	d100      	bne.n	8006596 <memset+0xa>
 8006594:	4770      	bx	lr
 8006596:	f803 1b01 	strb.w	r1, [r3], #1
 800659a:	e7f9      	b.n	8006590 <memset+0x4>

0800659c <__libc_init_array>:
 800659c:	b570      	push	{r4, r5, r6, lr}
 800659e:	4d0d      	ldr	r5, [pc, #52]	@ (80065d4 <__libc_init_array+0x38>)
 80065a0:	4c0d      	ldr	r4, [pc, #52]	@ (80065d8 <__libc_init_array+0x3c>)
 80065a2:	1b64      	subs	r4, r4, r5
 80065a4:	10a4      	asrs	r4, r4, #2
 80065a6:	2600      	movs	r6, #0
 80065a8:	42a6      	cmp	r6, r4
 80065aa:	d109      	bne.n	80065c0 <__libc_init_array+0x24>
 80065ac:	4d0b      	ldr	r5, [pc, #44]	@ (80065dc <__libc_init_array+0x40>)
 80065ae:	4c0c      	ldr	r4, [pc, #48]	@ (80065e0 <__libc_init_array+0x44>)
 80065b0:	f000 f818 	bl	80065e4 <_init>
 80065b4:	1b64      	subs	r4, r4, r5
 80065b6:	10a4      	asrs	r4, r4, #2
 80065b8:	2600      	movs	r6, #0
 80065ba:	42a6      	cmp	r6, r4
 80065bc:	d105      	bne.n	80065ca <__libc_init_array+0x2e>
 80065be:	bd70      	pop	{r4, r5, r6, pc}
 80065c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c4:	4798      	blx	r3
 80065c6:	3601      	adds	r6, #1
 80065c8:	e7ee      	b.n	80065a8 <__libc_init_array+0xc>
 80065ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ce:	4798      	blx	r3
 80065d0:	3601      	adds	r6, #1
 80065d2:	e7f2      	b.n	80065ba <__libc_init_array+0x1e>
 80065d4:	08006624 	.word	0x08006624
 80065d8:	08006624 	.word	0x08006624
 80065dc:	08006624 	.word	0x08006624
 80065e0:	08006628 	.word	0x08006628

080065e4 <_init>:
 80065e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e6:	bf00      	nop
 80065e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ea:	bc08      	pop	{r3}
 80065ec:	469e      	mov	lr, r3
 80065ee:	4770      	bx	lr

080065f0 <_fini>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	bf00      	nop
 80065f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f6:	bc08      	pop	{r3}
 80065f8:	469e      	mov	lr, r3
 80065fa:	4770      	bx	lr
